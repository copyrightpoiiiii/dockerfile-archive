FROM ubuntu:20.01
RUN make
RUN make install
RUN apt-get update
RUN mkdir /docker-entrypoint-initdb.d
RUN ./configure
RUN mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
RUN go mod download
RUN apt-get update && apt-get upgrade -y && apt-get install -y git-core build-essential wget
RUN apt-get install -y --no-install-recommends autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libevent-dev automake autoconf
RUN apt-get install -y --no-install-recommends make binutils autoconf automake autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev libjemalloc-dev cython python3.4-dev python-setuptools
RUN cd /root && git clone https://github.com/tatsuhiro-t/nghttp2.git
RUN git reset --hard $NGHTTP2_VER
RUN autoreconf
RUN automake
RUN autoconf
RUN tar -zxvf curl-7.45.0.tar.gz
RUN ./configure --with-ssl --with-nghttp2=/usr/local
RUN ldconfig
RUN apk add --no-cache ca-certificates
RUN yarn build
RUN wget https://curl.se/download/curl-7.45.0.tar.gz
RUN npm run build
RUN set -ex; groupadd -r --gid "$SOLR_GID" "$SOLR_GROUP"; useradd -r --uid "$SOLR_UID" --gid "$SOLR_GID" "solr"
RUN npm ci
RUN set -ex; curl -o joomla.tar.bz2 -SL https://github.com/joomla/joomla-cms/releases/download/${JOOMLA_VERSION}/Joomla_${JOOMLA_VERSION}-Stable-Full_Package.tar.bz2; echo "$JOOMLA_SHA512 *joomla.tar.bz2" | sha512sum -c -; mkdir /usr/src/joomla; tar -xf joomla.tar.bz2 -C /usr/src/joomla; rm joomla.tar.bz2; chown -R www-data:www-data /usr/src/joomla
RUN set -ex; apt-get update; apt-get -y install acl dirmngr gpg lsof procps wget netcat gosu tini; rm -rf /var/lib/apt/lists/*; cd /usr/local/bin; wget -nv https://github.com/apangin/jattach/releases/download/v1.5/jattach; chmod 755 jattach; echo >jattach.sha512 "d8eedbb3e192a8596c08efedff99b9acf1075331e1747107c07cdb1718db2abe259ef168109e46bd4cf80d47d43028ff469f95e6ddcbdda4d7ffa73a20e852f9  jattach"; sha512sum -c jattach.sha512; rm jattach.sha512
RUN set -xe; for key in 9056B710F1E332780DE7AF34CBAEBE39A46C4CA1 F067B8140F5DD80E1D3B5D92318242FE9A0B1183 223D3A74B068ECA354DC385CE126833F9CF64915 DBCCD103B8B24F86FFAAB025C8BB472CD297D428 7A2744A8A9AAF063C23EB7868EBE7DBE8D050EEF B8B301E6105DF628076BD92C5483E55897ABD9B9 FAA603D58B1BA4EDF65896D0ED340E0E6D545F97 A57DAF81C1B69921F4BA8723A8DE0A4DB863A7C1 82D8419BA697F0E7FB85916EE91287822FDB81B1 B7574789F5018690043E6DD9C212662E12F3E1DD C23A3F6F595EBD0F960270CC997C8F1A5BE6E4C1 678F2D98F1FD9643811639FB622B8F2D043F71D8 BDD0BBEB753192957EFC5F896A62FC8EF17D8FEF D11DF12CC2CA4894BDE638B967C1227A2678363C C92604B0DEC5C62CFF5801E73D4683C24EDC64D1 626C542EDA7C113814B77AF09C04914D63645D20 3948829384B269D333CC5B98358807C52B4B0E23 B83D15E72253ED1104EB4FBBDAB472F0E5B8A431 ; do gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$key" || gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; done
RUN { echo 'opcache.memory_consumption=128'; echo 'opcache.interned_strings_buffer=8'; echo 'opcache.max_accelerated_files=4000'; echo 'opcache.revalidate_freq=60'; echo 'opcache.fast_shutdown=1'; } > /usr/local/etc/php/conf.d/opcache-recommended.ini
RUN set -eux; version='6.0'; sha1='7a5a6d0591771e730b05c49d0c3fc134624d0491';  curl -o wordpress.tar.gz -fL "https://wordpress.org/wordpress-$version.tar.gz"; echo "$sha1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/; rm wordpress.tar.gz;  [ ! -e /usr/src/wordpress/.htaccess ]; { echo '# BEGIN WordPress'; echo ''; echo 'RewriteEngine On'; echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]'; echo 'RewriteBase /'; echo 'RewriteRule ^index\.php$ - [L]'; echo 'RewriteCond %{REQUEST_FILENAME} !-f'; echo 'RewriteCond %{REQUEST_FILENAME} !-d'; echo 'RewriteRule . /index.php [L]'; echo ''; echo '# END WordPress'; } > /usr/src/wordpress/.htaccess;  chown -R www-data:www-data /usr/src/wordpress; mkdir wp-content; for dir in /usr/src/wordpress/wp-content/*/ cache; do dir="$(basename "${dir%/}")"; mkdir "wp-content/$dir"; done; chown -R www-data:www-data wp-content; chmod -R 777 wp-content
RUN gem install bundler rake net-telnet xmlrpc
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates && buildDeps=" make gcc g++ libc-dev wget bzip2 gnupg dirmngr " && apt-get install -y --no-install-recommends $buildDeps && echo 'gem: --no-document' >> /etc/gemrc && gem install oj -v 3.10.18 && gem install json -v 2.4.1 && gem install async-http -v 0.54.0 && gem install ext_monitor -v 0.1.2 && gem install fluentd -v 1.14.6 && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" && wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/v0.18.0/tini-$dpkgArch" && wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/v0.18.0/tini-$dpkgArch.asc" && export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini && rm -r /usr/local/bin/tini.asc && chmod +x /usr/local/bin/tini && tini -h && wget -O /tmp/jemalloc-4.5.0.tar.bz2 https://github.com/jemalloc/jemalloc/releases/download/4.5.0/jemalloc-4.5.0.tar.bz2 && cd /tmp && tar -xjf jemalloc-4.5.0.tar.bz2 && cd jemalloc-4.5.0/ && ./configure && make && mv lib/libjemalloc.so.2 /usr/lib && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem /usr/lib/ruby/gems/2.*/gems/fluentd-*/test
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none
RUN mkdir /opt/jruby && curl -fSL https://repo1.maven.org/maven2/org/jruby/jruby-dist/${JRUBY_VERSION}/jruby-dist-${JRUBY_VERSION}-bin.tar.gz -o /tmp/jruby.tar.gz && echo "$JRUBY_SHA256 /tmp/jruby.tar.gz" | sha256sum -c - && tar -zx --strip-components=1 -f /tmp/jruby.tar.gz -C /opt/jruby && rm /tmp/jruby.tar.gz && update-alternatives --install /usr/local/bin/ruby ruby /opt/jruby/bin/jruby 1
RUN git clone --single-branch --branch llvmorg-10.0.0 https://github.com/llvm/llvm-project clang10 && mkdir /clang10/build && cd /clang10/build && cmake -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX='/usr/local' -DLLVM_ENABLE_PROJECTS='lld;polly;clang;clang-tools-extra;libcxx;libcxxabi;libunwind;compiler-rt' -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_INCLUDE_DOCS=OFF -DLLVM_TARGETS_TO_BUILD=host -DCMAKE_BUILD_TYPE=Release ../llvm && make -j $(nproc) && make install && cd / && rm -rf /clang10
RUN set -ex; wget -nv -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"; wget -nv -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"; export GNUPGHOME="$(mktemp -d)"; for server in ha.pool.sks-keyservers.net $(shuf -e hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu) ; do gpg --batch --keyserver "$server" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || : ; done && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; chmod +x /usr/local/bin/gosu; gosu nobody true
RUN set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; rm -rf /var/lib/apt/lists/*; dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true
RUN set -o errexit -o nounset && echo "Downloading Gradle" && wget --no-verbose --output-document=gradle.zip "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"  && echo "Checking download hash" && echo "29e49b10984e585d8118b7d0bc452f944e386458df27371b49b4ac1dec4b7fda *gradle.zip" | sha256sum --check -  && echo "Installing Gradle" && unzip gradle.zip && rm gradle.zip && mv "gradle-${GRADLE_VERSION}" "${GRADLE_HOME}/" && ln --symbolic "${GRADLE_HOME}/bin/gradle" /usr/bin/gradle  && echo "Testing Gradle installation" && gradle --version
RUN set -o errexit -o nounset && echo "Downloading Gradle" && wget --no-verbose --output-document=gradle.zip "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"  && echo "Checking download hash" && echo "29e49b10984e585d8118b7d0bc452f944e386458df27371b49b4ac1dec4b7fda *gradle.zip" | sha256sum --check -  && echo "Installing Gradle" && unzip gradle.zip && rm gradle.zip && mv "gradle-${GRADLE_VERSION}" "${GRADLE_HOME}/" && ln --symbolic "${GRADLE_HOME}/bin/gradle" /usr/bin/gradle  && echo "Testing Gradle installation" && gradle --version
RUN set -x && export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y mongodb-org=$MONGO_VERSION mongodb-org-server=$MONGO_VERSION mongodb-org-shell=$MONGO_VERSION mongodb-org-mongos=$MONGO_VERSION mongodb-org-tools=$MONGO_VERSION && rm -rf /var/lib/apt/lists/* && rm -rf /var/lib/mongodb && mv /etc/mongod.conf /etc/mongod.conf.orig
RUN cp -L /etc/resolv.conf rootfs/etc/; chroot rootfs /bin/sh -xec 'nslookup google.com'; rm rootfs/etc/resolv.conf
RUN cp $GITDIR/advanced/Scripts/*.sh $GITDIR/gravity.sh $GITDIR/pihole $GITDIR/automated\ install/*.sh $SCRIPTDIR/
RUN curl -fSL -o $GN_FILE https://sourceforge.net/projects/geonetwork/files/GeoNetwork_opensource/v${GN_VERSION}/${GN_FILE}/download && echo "${GN_DOWNLOAD_MD5} *${GN_FILE}" | md5sum -c && mkdir -p geonetwork && unzip -e $GN_FILE -d geonetwork && rm $GN_FILE
RUN rm -rf /usr/local/tomcat/webapps/* && mkdir -p /usr/local/tomcat/temp && mkdir -p /usr/local/xwiki/data && curl -fSL "${XWIKI_URL_PREFIX}/xwiki-platform-distribution-war-14.4.1.war" -o xwiki.war && echo "$XWIKI_DOWNLOAD_SHA256 xwiki.war" | sha256sum -c - && unzip -d /usr/local/tomcat/webapps/ROOT xwiki.war && rm -f xwiki.war