make 38
make install 35
apt-get update 30
mkdir /docker-entrypoint-initdb.d 23
./configure 19
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME" 18
go mod download 17
apt-get update && apt-get upgrade -y && apt-get install -y git-core build-essential wget 16
apt-get install -y --no-install-recommends autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libevent-dev automake autoconf 16
apt-get install -y --no-install-recommends make binutils autoconf automake autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev libjemalloc-dev cython python3.4-dev python-setuptools 16
cd /root && git clone https://github.com/tatsuhiro-t/nghttp2.git 16
git reset --hard $NGHTTP2_VER 16
autoreconf -i 16
automake 16
autoconf 16
tar -zxvf curl-7.45.0.tar.gz 16
./configure --with-ssl --with-nghttp2=/usr/local 16
ldconfig 16
apk add --no-cache ca-certificates 14
yarn build 13
wget https://curl.se/download/curl-7.45.0.tar.gz 13
npm run build 12
set -ex; groupadd -r --gid "$SOLR_GID" "$SOLR_GROUP"; useradd -r --uid "$SOLR_UID" --gid "$SOLR_GID" "solr" 11
npm ci 10
set -ex; curl -o joomla.tar.bz2 -SL https://github.com/joomla/joomla-cms/releases/download/${JOOMLA_VERSION}/Joomla_${JOOMLA_VERSION}-Stable-Full_Package.tar.bz2; echo "$JOOMLA_SHA512 *joomla.tar.bz2" | sha512sum -c -; mkdir /usr/src/joomla; tar -xf joomla.tar.bz2 -C /usr/src/joomla; rm joomla.tar.bz2; chown -R www-data:www-data /usr/src/joomla 10
set -ex; apt-get update; apt-get -y install acl dirmngr gpg lsof procps wget netcat gosu tini; rm -rf /var/lib/apt/lists/*; cd /usr/local/bin; wget -nv https://github.com/apangin/jattach/releases/download/v1.5/jattach; chmod 755 jattach; echo >jattach.sha512 "d8eedbb3e192a8596c08efedff99b9acf1075331e1747107c07cdb1718db2abe259ef168109e46bd4cf80d47d43028ff469f95e6ddcbdda4d7ffa73a20e852f9  jattach"; sha512sum -c jattach.sha512; rm jattach.sha512 10
mkdir -p /usr/local/tomee 10
set -xe; for key in 9056B710F1E332780DE7AF34CBAEBE39A46C4CA1 F067B8140F5DD80E1D3B5D92318242FE9A0B1183 223D3A74B068ECA354DC385CE126833F9CF64915 DBCCD103B8B24F86FFAAB025C8BB472CD297D428 7A2744A8A9AAF063C23EB7868EBE7DBE8D050EEF B8B301E6105DF628076BD92C5483E55897ABD9B9 FAA603D58B1BA4EDF65896D0ED340E0E6D545F97 A57DAF81C1B69921F4BA8723A8DE0A4DB863A7C1 82D8419BA697F0E7FB85916EE91287822FDB81B1 B7574789F5018690043E6DD9C212662E12F3E1DD C23A3F6F595EBD0F960270CC997C8F1A5BE6E4C1 678F2D98F1FD9643811639FB622B8F2D043F71D8 BDD0BBEB753192957EFC5F896A62FC8EF17D8FEF D11DF12CC2CA4894BDE638B967C1227A2678363C C92604B0DEC5C62CFF5801E73D4683C24EDC64D1 626C542EDA7C113814B77AF09C04914D63645D20 3948829384B269D333CC5B98358807C52B4B0E23 B83D15E72253ED1104EB4FBBDAB472F0E5B8A431 ; do gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$key" || gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; done 10
{ echo 'opcache.memory_consumption=128'; echo 'opcache.interned_strings_buffer=8'; echo 'opcache.max_accelerated_files=4000'; echo 'opcache.revalidate_freq=60'; echo 'opcache.fast_shutdown=1'; } > /usr/local/etc/php/conf.d/opcache-recommended.ini 10
set -ex; apt-get update; apt-get -y install libsnappy1v5 gettext-base libjemalloc-dev; rm -rf /var/lib/apt/lists/* 10
set -ex; wget -nv -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"; wget -nv -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"; export GNUPGHOME="$(mktemp -d)"; for server in ha.pool.sks-keyservers.net $(shuf -e hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu) ; do gpg --batch --keyserver "$server" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || : ; done && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; chmod +x /usr/local/bin/gosu; gosu nobody true 10
groupadd --system --gid=9999 flink && useradd --system --home-dir /opt/flink --uid=9999 --gid=flink flink 10
set -eux; mkdir -p "$PHP_INI_DIR/conf.d"; [ ! -d /var/www/html ]; mkdir -p /var/www/html; chown www-data:www-data /var/www/html; chmod 777 /var/www/html 10
docker-php-ext-enable sodium 10
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql 10
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA" 10
set -eux; mkdir -p /usr/local/etc; { echo 'install: --no-document'; echo 'update: --no-document'; } >> /usr/local/etc/gemrc 10
sh /scripts/sccache.sh 10
set -eux; docker-php-ext-enable opcache; { echo 'opcache.memory_consumption=128'; echo 'opcache.interned_strings_buffer=8'; echo 'opcache.max_accelerated_files=4000'; echo 'opcache.revalidate_freq=2'; echo 'opcache.fast_shutdown=1'; } > /usr/local/etc/php/conf.d/opcache-recommended.ini 10
{ echo 'error_reporting = E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING | E_RECOVERABLE_ERROR'; echo 'display_errors = Off'; echo 'display_startup_errors = Off'; echo 'log_errors = On'; echo 'error_log = /dev/stderr'; echo 'log_errors_max_len = 1024'; echo 'ignore_repeated_errors = On'; echo 'ignore_repeated_source = Off'; echo 'html_errors = Off'; } > /usr/local/etc/php/conf.d/error-logging.ini 10
set -eux; version='6.0'; sha1='7a5a6d0591771e730b05c49d0c3fc134624d0491';  curl -o wordpress.tar.gz -fL "https://wordpress.org/wordpress-$version.tar.gz"; echo "$sha1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/; rm wordpress.tar.gz;  [ ! -e /usr/src/wordpress/.htaccess ]; { echo '# BEGIN WordPress'; echo ''; echo 'RewriteEngine On'; echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]'; echo 'RewriteBase /'; echo 'RewriteRule ^index\.php$ - [L]'; echo 'RewriteCond %{REQUEST_FILENAME} !-f'; echo 'RewriteCond %{REQUEST_FILENAME} !-d'; echo 'RewriteRule . /index.php [L]'; echo ''; echo '# END WordPress'; } > /usr/src/wordpress/.htaccess;  chown -R www-data:www-data /usr/src/wordpress; mkdir wp-content; for dir in /usr/src/wordpress/wp-content/*/ cache; do dir="$(basename "${dir%/}")"; mkdir "wp-content/$dir"; done; chown -R www-data:www-data wp-content; chmod -R 777 wp-content 10
set -ex; if ! command -v gpg > /dev/null; then apt-get update; apt-get install -y --no-install-recommends gnupg dirmngr ; rm -rf /var/lib/apt/lists/*; fi 9
set -ex; { echo 'opcache.enable=1' ; echo 'opcache.interned_strings_buffer=8'; echo 'opcache.max_accelerated_files=10000'; echo 'opcache.memory_consumption=128'; echo 'opcache.save_comments=1'; echo 'opcache.revalidte_freq=1'; } > /usr/local/etc/php/conf.d/opcache-recommended.ini;  { echo sendmail_path = "/usr/bin/msmtp -t"; } > /usr/local/etc/php/conf.d/sendmail.ini;  echo 'apc.enable_cli=1' >> /usr/local/etc/php/conf.d/docker-php-ext-apcu.ini;  { echo 'memory_limit=${PHP_MEMORY_LIMIT}'; echo 'upload_max_filesize=${PHP_UPLOAD_LIMIT}'; echo 'post_max_size=${PHP_UPLOAD_LIMIT}'; } > /usr/local/etc/php/conf.d/friendica.ini;  mkdir /var/www/data; chown -R www-data:root /var/www; chmod -R g=u /var/www 9
dotnet restore "eShopOnContainers-ServicesAndWebApps.sln" 9
dotnet publish --no-restore -c Release -o /app 9
mkdir /data && chown redis:redis /data 9
set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; rm -rf /var/lib/apt/lists/*; dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true 8
apt-get update && apt-get install -y cmake curl clang git pkg-config libssl-dev 8
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none 8
rustup install $(cat rust-toolchain) 8
set -o errexit -o nounset && echo "Adding gradle user and group" && groupadd --system --gid 1000 gradle && useradd --system --gid gradle --uid 1000 --shell /bin/bash --create-home gradle && mkdir /home/gradle/.gradle && chown --recursive gradle:gradle /home/gradle  && echo "Symlinking root Gradle cache to gradle Gradle cache" && ln --symbolic /home/gradle/.gradle /root/.gradle 8
set -o errexit -o nounset && apt-get update && apt-get install --yes --no-install-recommends unzip wget  bzr git git-lfs mercurial openssh-client subversion && rm --recursive --force /var/lib/apt/lists/*  && echo "Testing VCSes" && which bzr && which git && which git-lfs && which hg && which svn 8
set -o errexit -o nounset && echo "Downloading Gradle" && wget --no-verbose --output-document=gradle.zip "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"  && echo "Checking download hash" && echo "29e49b10984e585d8118b7d0bc452f944e386458df27371b49b4ac1dec4b7fda *gradle.zip" | sha256sum --check -  && echo "Installing Gradle" && unzip gradle.zip && rm gradle.zip && mv "gradle-${GRADLE_VERSION}" "${GRADLE_HOME}/" && ln --symbolic "${GRADLE_HOME}/bin/gradle" /usr/bin/gradle  && echo "Testing Gradle installation" && gradle --version 8
apt-get update && apt-get install -y libc6-dev --no-install-recommends && rm -rf /var/lib/apt/lists/* 8
mkdir /opt/jruby && curl -fSL https://repo1.maven.org/maven2/org/jruby/jruby-dist/${JRUBY_VERSION}/jruby-dist-${JRUBY_VERSION}-bin.tar.gz -o /tmp/jruby.tar.gz && echo "$JRUBY_SHA256 /tmp/jruby.tar.gz" | sha256sum -c - && tar -zx --strip-components=1 -f /tmp/jruby.tar.gz -C /opt/jruby && rm /tmp/jruby.tar.gz && update-alternatives --install /usr/local/bin/ruby ruby /opt/jruby/bin/jruby 1 8
mkdir -p /opt/jruby/etc && { echo 'install: --no-document'; echo 'update: --no-document'; } >> /opt/jruby/etc/gemrc 8
gem install bundler rake net-telnet xmlrpc 8
mkdir -p /usr/share/maven /usr/share/maven/ref && curl -fsSL -o /tmp/apache-maven.tar.gz https://apache.osuosl.org/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz && echo "89ab8ece99292476447ef6a6800d9842bbb60787b9b8a45c103aa61d2f205a971d8c3ddfb8b03e514455b4173602bd015e82958c0b3ddc1728a57126f773c743  /tmp/apache-maven.tar.gz" | sha512sum -c - && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 && rm -f /tmp/apache-maven.tar.gz && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn 8
addgroup --gid 7474 --system neo4j && adduser --uid 7474 --system --no-create-home --home "${NEO4J_HOME}" --ingroup neo4j neo4j 8
set -x && curl -fSL https://dist.apache.org/repos/dist/release/tomee/tomee-${TOMEE_VER}/apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz.asc -o tomee.tar.gz.asc && curl -fSL https://dist.apache.org/repos/dist/release/tomee/tomee-${TOMEE_VER}/apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz.sha512 -o tomee.tar.gz.sha512 && curl -fSL https://dist.apache.org/repos/dist/release/tomee/tomee-${TOMEE_VER}/apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz -o apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && gpg --batch --verify tomee.tar.gz.asc apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && echo `cat tomee.tar.gz.sha512` apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz | sha512sum -c - && tar -zxf apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && mv apache-tomee-${TOMEE_BUILD}-${TOMEE_VER}/* /usr/local/tomee && rm apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && rm -Rf apache-tomee-${TOMEE_BUILD}-${TOMEE_VER} && rm bin/*.bat && rm bin/*.exe && rm bin/*.tar.gz* && rm tomee.tar.gz.asc && rm tomee.tar.gz* 8
set -ex; wget -nv -O flink.tgz "https://www.apache.org/dyn/closer.cgi?action";  if [ "$CHECK_GPG" = "true" ]; then wget -nv -O flink.tgz.asc "$FLINK_ASC_URL"; export GNUPGHOME="$(mktemp -d)"; for server in ha.pool.sks-keyservers.net $(shuf -e hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu) ; do gpg --batch --keyserver "$server" --recv-keys "$GPG_KEY" && break || : ; done && gpg --batch --verify flink.tgz.asc flink.tgz; gpgconf --kill all; rm -rf "$GNUPGHOME" flink.tgz.asc; fi;  tar -xf flink.tgz --strip-components=1; rm flink.tgz;  chown -R flink:flink .; 8
set -eux; addgroup --gid 99 --system haproxy; adduser --disabled-password --home /var/lib/haproxy --ingroup haproxy --no-create-home --system --uid 99 haproxy ; mkdir /var/lib/haproxy; chown haproxy:haproxy /var/lib/haproxy 8
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat 8
groupadd -r mysql && useradd -r -g mysql mysql 8
set -ex; apt-get update; if ! which gpg; then apt-get install -y --no-install-recommends gnupg; fi; if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then apt-get install -y --no-install-recommends dirmngr; fi; rm -rf /var/lib/apt/lists/* 8
set -eux; apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates; savedAptMark="$(apt-mark showmanual)"; apt-get install -y --no-install-recommends wget; rm -rf /var/lib/apt/lists/*; dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true 8
set -ex; export GNUPGHOME="$(mktemp -d)"; for key in 177F4010FE56CA3336300305F1656F24C74CD1D8; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --export 177F4010FE56CA3336300305F1656F24C74CD1D8 > /etc/apt/trusted.gpg.d/mariadb.gpg; command -v gpgconf > /dev/null && gpgconf --kill all || :; rm -fr "$GNUPGHOME"; apt-key list 8
GRPC_HEALTH_PROBE_VERSION=v0.4.11 && wget -qO/bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/${GRPC_HEALTH_PROBE_VERSION}/grpc_health_probe-linux-amd64 && chmod +x /bin/grpc_health_probe 8
apt update && apt install -y curl wget && rm -rf /var/lib/apt/lists/* 8
./bootstrap-ubuntu.sh 8
npm install 7
ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat 7
pip3 install requests 7
go install ./... 7
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections 7
go install 7
mkdir -p /usr/src/app 7
set -ex; apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libjemalloc2 pwgen tzdata xz-utils zstd ; rm -rf /var/lib/apt/lists/* 7
set -eux; for src in idle3 pydoc3 python3 python3-config; do dst="$(echo "$src" | tr -d 3)"; [ -s "/usr/local/bin/$src" ]; [ ! -e "/usr/local/bin/$dst" ]; ln -svT "$src" "/usr/local/bin/$dst"; done 7
/scripts/cmake.sh 7
set -eux; apt-get update; apt-get install -y --no-install-recommends ghostscript ; rm -rf /var/lib/apt/lists/* 7
set -ex;  savedAptMark="$(apt-mark showmanual)";  apt-get update; apt-get install -y --no-install-recommends libfreetype6-dev libicu-dev libjpeg-dev libmagickwand-dev libpng-dev libwebp-dev libzip-dev ;  docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp ; docker-php-ext-install -j "$(nproc)" bcmath exif gd intl mysqli zip ; pecl install imagick-3.6.0; docker-php-ext-enable imagick; rm -r /tmp/pear;  out="$(php -r 'exit(0);')"; [ -z "$out" ]; err="$(php -r 'exit(0);' 3>&1 1>&2 2>&3)"; [ -z "$err" ];  extDir="$(php -r 'echo ini_get("extension_dir");')"; [ -d "$extDir" ]; apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; ldd "$extDir"/*.so | awk '/=>/ { print $3 }' | sort -u | xargs -r dpkg-query -S | cut -d: -f1 | sort -u | xargs -rt apt-mark manual;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*;  ! { ldd "$extDir"/*.so | grep 'not found'; }; err="$(php --version 3>&1 1>&2 2>&3)"; [ -z "$err" ] 7
mkdir /app 6
gpg --batch --keyserver keyserver.ubuntu.com --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B 6
set -eux; tarball="busybox-${BUSYBOX_VERSION}.tar.bz2"; curl -fL -o busybox.tar.bz2.sig "https://busybox.net/downloads/$tarball.sig"; curl -fL -o busybox.tar.bz2 "https://busybox.net/downloads/$tarball"; echo "$BUSYBOX_SHA256 *busybox.tar.bz2" | sha256sum -c -; gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2; mkdir -p /usr/src/busybox; tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1; rm busybox.tar.bz2* 6
set -eux; cd rootfs; for userHome in $(awk -F ':' '{ print $3 ":" $4 "=" $6 }' etc/passwd); do user="${userHome%%=*}"; home="${userHome#*=}"; home="./${home#/}"; if [ ! -d "$home" ]; then mkdir -p "$home"; chown "$user" "$home"; chmod 755 "$home"; fi; done 6
chroot rootfs /bin/sh -xec 'true' 6
set -eux; ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime; [ "$(chroot rootfs date +%Z)" = 'UTC' ] 6
cp -L /etc/resolv.conf rootfs/etc/; chroot rootfs /bin/sh -xec 'nslookup google.com'; rm rootfs/etc/resolv.conf 6
sed -i "s|http://archive.ubuntu.com|http://archive.ubuntu.com|g" /etc/apt/sources.list 6
groupadd -g 5984 -r couchdb && useradd -u 5984 -d /opt/couchdb -g couchdb couchdb 6
set -eux; apt-get update; apt-get install -y --no-install-recommends gosu tini; rm -rf /var/lib/apt/lists/*; gosu nobody true; tini --version 6
(curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh) | sh -s -- --verify-signature 6
pip install -r requirements.txt 6
apt-get update -y 6
set -ex;  apt-get update; apt-get install -y --no-install-recommends rsync bzip2 msmtp tini ; 6
set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates wget; if ! command -v gpg; then apt-get install -y --no-install-recommends gnupg2 dirmngr; elif gpg --version | grep -q '^gpg (GnuPG) 1\.'; then apt-get install -y --no-install-recommends gnupg-curl; fi; rm -rf /var/lib/apt/lists/*;  dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; command -v gpgconf && gpgconf --kill all || :; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true 6
set -ex;  savedAptMark="$(apt-mark showmanual)";  apt-get update; apt-get install -y --no-install-recommends mariadb-client bash libpng-dev libjpeg62-turbo-dev libtool libmagick++-dev libmemcached-dev libgraphicsmagick1-dev libfreetype6-dev libwebp-dev librsvg2-2 libzip-dev libldap2-dev ;  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp ; docker-php-ext-configure ldap --with-libdir=lib/$debMultiarch/  docker-php-ext-install -j "$(nproc)" pdo_mysql gd exif zip opcache ctype pcntl ldap ;  pecl install apcu-5.1.21; pecl install memcached-3.2.0RC2; pecl install redis-5.3.7; pecl install imagick-3.7.0;  docker-php-ext-enable apcu memcached redis imagick ;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so | awk '/=>/ { print $3 }' | sort -u | xargs -r dpkg-query -S | cut -d: -f1 | sort -u | xargs -rt apt-mark manual;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/* 6
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; INSTALL_STACK="true"; STACK_URL="https://github.com/commercialhaskell/stack/releases/download/v2.7.5/stack-2.7.5-linux-$ARCH.tar.gz"; case "$ARCH" in 'aarch64') INSTALL_STACK="false"; ;; 'x86_64') STACK_SHA256='9bcd165358d4dcafd2b33320d4fe98ce72faaf62300cc9b0fb86a27eb670da50'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'" ; exit 1 ;; esac; if [ "$INSTALL_STACK" = "true" ]; then curl -sSL "2.7.5_URL" -o stack.tar.gz; echo "2.7.5_SHA256 stack.tar.gz" | sha256sum --strict --check;  curl -sSL "2.7.5_URL.asc" -o stack.tar.gz.asc; GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "2.7.5_RELEASE_KEY"; gpg --batch --verify stack.tar.gz.asc stack.tar.gz; gpgconf --kill all;  tar -xf stack.tar.gz -C /usr/local/bin --strip-components=1 "stack-2.7.5-linux-$ARCH/stack"; stack config set system-ghc --global true; stack config set install-ghc --global false;  rm -rf /tmp/*;  stack --version; fi 6
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; CABAL_INSTALL_TAR="cabal-install-3.6.2.0-$ARCH-linux-deb10.tar.xz"; CABAL_INSTALL_URL="https://downloads.haskell.org/~cabal/cabal-install-3.6.2.0/3.6.2.0_TAR"; CABAL_INSTALL_SHA256SUMS_URL="https://downloads.haskell.org/~cabal/cabal-install-3.6.2.0/SHA256SUMS"; case "$ARCH" in 'aarch64') CABAL_INSTALL_SHA256='d9acee67d4308bc5c22d27bee034d388cc4192a25deff9e7e491e2396572b030'; ;; 'x86_64') CABAL_INSTALL_SHA256='4759b56e9257e02f29fa374a6b25d6cb2f9d80c7e3a55d4f678a8e570925641c'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'"; exit 1 ;; esac; curl -fSL "3.6.2.0_URL" -o cabal-install.tar.gz; echo "3.6.2.0_SHA256 cabal-install.tar.gz" | sha256sum --strict --check;  curl -sSLO "3.6.2.0_SHA256SUMS_URL"; curl -sSLO "3.6.2.0_SHA256SUMS_URL.sig"; GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "3.6.2.0_RELEASE_KEY"; gpg --batch --verify SHA256SUMS.sig SHA256SUMS; grep "3.6.2.0_SHA256  3.6.2.0_TAR" SHA256SUMS; gpgconf --kill all;  tar -xf cabal-install.tar.gz -C /usr/local/bin;  rm -rf /tmp/*;  cabal --version 6
set -ex;  savedAptMark="$(apt-mark showmanual)";  apt-get update; apt-get install -y --no-install-recommends libbz2-dev libgmp-dev libicu-dev libjpeg-dev libldap2-dev libmemcached-dev libpng-dev libpq-dev libzip-dev ;  docker-php-ext-configure gd --with-jpeg; debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; docker-php-ext-configure ldap --with-libdir="lib/$debMultiarch"; docker-php-ext-install -j "$(nproc)" bz2 gd gmp intl ldap mysqli pdo_mysql pdo_pgsql pgsql zip ;  pecl install APCu-5.1.21; pecl install memcached-3.2.0; pecl install redis-5.3.7;  docker-php-ext-enable apcu memcached redis ; rm -r /tmp/pear;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so | awk '/=>/ { print $3 }' | sort -u | xargs -r dpkg-query -S | cut -d: -f1 | sort -u | xargs -rt apt-mark manual;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/* 6
apt-get update && apt-get install -y  gpg && rm -rf /var/lib/apt/lists/* 6
sed -i 's/<id>org.xwiki.platform:xwiki-platform-distribution-war/<id>org.xwiki.platform:xwiki-platform-distribution-docker/' /usr/local/tomcat/webapps/ROOT/META-INF/extension.xed 6
set -x && apt-get update && { which gpg || apt-get install -y --no-install-recommends gnupg ; } && { gpg --version | grep -q '^gpg (GnuPG) 1\.' || apt-get install -y --no-install-recommends dirmngr ; } && rm -rf /var/lib/apt/lists/* 6
set -x && export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys DD95CC430502E37EF840ACEEA5D32F012649A5A9 && gpg --batch --export DD95CC430502E37EF840ACEEA5D32F012649A5A9 > /etc/apt/trusted.gpg.d/neurodebian.gpg && rm -rf "$GNUPGHOME" && apt-key list | grep neurodebian 6
set -x && apt-get update && apt-get install -y --no-install-recommends neurodebian-freeze eatmydata && ln -s /usr/bin/eatmydata /usr/local/bin/apt-get && rm -rf /var/lib/apt/lists/* 6
set -eux; curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz; echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -; tar -xz --strip-components=1 -f drupal.tar.gz; rm drupal.tar.gz; chown -R www-data:www-data sites modules themes 6
set -eux;  if command -v a2enmod; then a2enmod rewrite; fi;  savedAptMark="$(apt-mark showmanual)";  apt-get update; apt-get install -y --no-install-recommends libfreetype6-dev libjpeg-dev libpng-dev libpq-dev libwebp-dev libzip-dev ;  docker-php-ext-configure gd --with-freetype --with-jpeg=/usr --with-webp ;  docker-php-ext-install -j "$(nproc)" gd opcache pdo_mysql pdo_pgsql zip ;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so | awk '/=>/ { print $3 }' | sort -u | xargs -r dpkg-query -S | cut -d: -f1 | sort -u | xargs -rt apt-mark manual;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/* 6
groupadd -g 1000 fishuser && useradd -p $(openssl passwd -1 fish) -d /home/fishuser -m -u 1000 -g 1000 fishuser && adduser fishuser  && mkdir -p /home/fishuser/fish-build && mkdir /fish-source && chown -R fishuser:fishuser /home/fishuser /fish-source 6
mkdir /orientdb && wget  $ORIENTDB_DOWNLOAD_URL && echo "$ORIENTDB_DOWNLOAD_MD5 *orientdb-community-$ORIENTDB_VERSION.tar.gz" | md5sum -c - && echo "$ORIENTDB_DOWNLOAD_SHA1 *orientdb-community-$ORIENTDB_VERSION.tar.gz" | sha1sum -c - && tar -xvzf orientdb-community-$ORIENTDB_VERSION.tar.gz -C /orientdb --strip-components=1 && rm orientdb-community-$ORIENTDB_VERSION.tar.gz && rm -rf /orientdb/databases/* 6
set -eux; { echo 'Package: php*'; echo 'Pin: release *'; echo 'Pin-Priority: -1'; } > /etc/apt/preferences.d/no-debian-php 6
set -eux; apt-get update; apt-get install -y --no-install-recommends $PHPIZE_DEPS ca-certificates curl xz-utils ; rm -rf /var/lib/apt/lists/* 6
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends gnupg dirmngr; rm -rf /var/lib/apt/lists/*;  mkdir -p /usr/src; cd /usr/src;  curl -fsSL -o php.tar.xz "https://www.php.net/distributions/php-8.0.20.tar.xz";  if [ -n "973fec765336ee01f47536a5db1c2eee98df9d34a41522b7b6c760159bf0a77b" ]; then echo "973fec765336ee01f47536a5db1c2eee98df9d34a41522b7b6c760159bf0a77b *php.tar.xz" | sha256sum -c -; fi;  if [ -n "https://www.php.net/distributions/php-8.0.20.tar.xz.asc" ]; then curl -fsSL -o php.tar.xz.asc "https://www.php.net/distributions/php-8.0.20.tar.xz.asc"; export GNUPGHOME="$(mktemp -d)"; for key in $GPG_KEYS; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --verify php.tar.xz.asc php.tar.xz; gpgconf --kill all; rm -rf "$GNUPGHOME"; fi;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false 6
mkdir -p $GITDIR $SCRIPTDIR /etc/pihole 6
cp $GITDIR/advanced/Scripts/*.sh $GITDIR/gravity.sh $GITDIR/pihole $GITDIR/automated\ install/*.sh $SCRIPTDIR/ 6
true && chmod +x $SCRIPTDIR/* 6
set -eux; addgroup -g 70 -S postgres; adduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres; mkdir -p /var/lib/postgresql; chown -R postgres:postgres /var/lib/postgresql 6
set -eux; cp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig; sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample; grep -F "listen_addresses = '*'" /usr/local/share/postgresql/postgresql.conf.sample 6
ln -sf /opt/rabbitmq/plugins /plugins 6
sh /scripts/cross-apt-packages.sh 6
chmod a+rwx /etc/bash.bashrc 6
apk add --no-cache gnupg pwgen binutils numactl numactl-tools nodejs yarn && yarn global add foxx-cli@2.0.1 && apk del yarn && gpg --batch --keyserver keys.openpgp.org --recv-keys CD8CB0F1E0AD5B52E93F41E7EA93F5E56E751E9B && mkdir /docker-entrypoint-initdb.d && cd /tmp                                && wget ${ARANGO_SIGNATURE_URL}           && wget ${ARANGO_PACKAGE_URL}             && gpg --verify ${ARANGO_PACKAGE}.asc     && ar x ${ARANGO_PACKAGE} data.tar.gz     && tar -C / -x -z -f data.tar.gz          && sed -ri -e 's!127\.0\.0\.1!0.0.0.0!g' -e 's!^(file\s*=\s*).*!\1 -!' -e 's!^\s*uid\s*=.*!!' /etc/arangodb3/arangod.conf        && chgrp -R 0 /var/lib/arangodb3 /var/lib/arangodb3-apps && chmod -R 775 /var/lib/arangodb3 /var/lib/arangodb3-apps && rm -f /usr/bin/foxx && rm -f ${ARANGO_PACKAGE}* data.tar.gz && apk del gnupg 5
apk add --no-cache gnupg pwgen binutils numactl numactl-tools nodejs yarn && yarn global add foxx-cli && apk del yarn && gpg --batch --keyserver keys.openpgp.org --recv-keys CD8CB0F1E0AD5B52E93F41E7EA93F5E56E751E9B && mkdir /docker-entrypoint-initdb.d && cd /tmp                                && wget ${ARANGO_SIGNATURE_URL}           && wget ${ARANGO_PACKAGE_URL}             && gpg --verify ${ARANGO_PACKAGE}.asc     && ar x ${ARANGO_PACKAGE} data.tar.gz     && tar -C / -x -z -f data.tar.gz          && sed -ri -e 's!127\.0\.0\.1!0.0.0.0!g' -e 's!^(file\s*=\s*).*!\1 -!' -e 's!^\s*uid\s*=.*!!' /etc/arangodb3/arangod.conf        && chgrp -R 0 /var/lib/arangodb3 /var/lib/arangodb3-apps && chmod -R 775 /var/lib/arangodb3 /var/lib/arangodb3-apps && rm -f /usr/bin/foxx && rm -f ${ARANGO_PACKAGE}* data.tar.gz && apk del gnupg 5
mvn dependency:go-offline 5
a2enmod rewrite 5
apt update 5
yarn install 5
ln -snf /usr/share/zoneinfo/Europe/Moscow /etc/localtime && echo Europe/Moscow > /etc/timezone 5
test -e /etc/nsswitch.conf || echo 'hosts: files dns' > /etc/nsswitch.conf 5
set -ex; apt-get update; apt-get install -y --no-install-recommends apt-transport-https ca-certificates dirmngr gnupg ; rm -rf /var/lib/apt/lists/* 5
set -eux; apt-get update; apt-get install -y curl; export GNUPGHOME="$(mktemp -d)"; curl -fL -o keys.asc https://couchdb.apache.org/repo/keys.asc; gpg --batch --import keys.asc; gpg --batch --export "${GPG_COUCH_KEY}" > /usr/share/keyrings/couchdb-archive-keyring.gpg; command -v gpgconf && gpgconf --kill all || :; rm -rf "$GNUPGHOME"; apt-key list; apt purge -y --autoremove curl; rm -rf /var/lib/apt/lists/* 5
. /etc/os-release; echo "deb [signed-by=/usr/share/keyrings/couchdb-archive-keyring.gpg] https://apache.jfrog.io/artifactory/couchdb-deb/ ${VERSION_CODENAME} main" | tee /etc/apt/sources.list.d/couchdb.list >/dev/null 5
mkdir -p /app 5
apk add --no-cache --virtual .build-deps-yarn curl gnupg tar && for key in 6A010C5166006599AA17F08146C2130DFD2497F5 ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz && mkdir -p /opt && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz && apk del .build-deps-yarn && yarn --version 5
apt-get update && apt-get install -y --no-install-recommends libtcmalloc-minimal4 libarchive13 libyaml-dev libgmp10 libossp-uuid16 libssl1.1 ca-certificates libdb5.3 libpcre3 libedit2 libgeos-3.9.0 libspatialindex6 unixodbc odbc-postgresql tdsodbc libmariadbclient-dev-compat libsqlite3-0 libserd-0-0 libraptor2-0 && dpkgArch="$(dpkg --print-architecture)" && rm -rf /var/lib/apt/lists/* 5
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash 5
cp ~/.bashrc ~/.bashrc.bak && cat ~/.bashrc.bak | tail -3 > ~/.bashrc && cat ~/.bashrc.bak | head -n '-3' >> ~/.bashrc && rm ~/.bashrc.bak 5
bash -c '. ~/.bashrc; nvm install --lts=dubnium' && ln -s "/root/.nvm/versions/node/$(ls -p /root/.nvm/versions/node | sort -Vr | head -1)bin/node" /usr/local/bin/node 5
curl -LO https://github.com/Kitware/CMake/releases/download/v3.16.2/cmake-3.16.2.tar.gz && tar -xzf cmake-3.16.2.tar.gz && cd cmake-3.16.2 && ./bootstrap --prefix=/usr/local && make -j$(nproc) && make install && rm -rf cmake-3.16.2.tar.gz cmake-3.16.2 5
locale-gen en_US.UTF-8 5
echo 'hosts: files dns' >> /etc/nsswitch.conf 5
set -eux; groupadd --gid 999 --system mongodb; useradd --uid 999 --system --gid mongodb --home-dir /data/db mongodb; mkdir -p /data/db /data/configdb; chown -R mongodb:mongodb /data/db /data/configdb 5
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates jq numactl ; if ! command -v ps > /dev/null; then apt-get install -y --no-install-recommends procps; fi; rm -rf /var/lib/apt/lists/* 5
set -ex;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends wget ; if ! command -v gpg > /dev/null; then apt-get install -y --no-install-recommends gnupg dirmngr; savedAptMark="$savedAptMark gnupg dirmngr"; elif gpg --version | grep -q '^gpg (GnuPG) 1\.'; then apt-get install -y --no-install-recommends gnupg-curl; fi; rm -rf /var/lib/apt/lists/*;  dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; command -v gpgconf && gpgconf --kill all || :; rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true 5
set -x && export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y mongodb-org=$MONGO_VERSION mongodb-org-server=$MONGO_VERSION mongodb-org-shell=$MONGO_VERSION mongodb-org-mongos=$MONGO_VERSION mongodb-org-tools=$MONGO_VERSION && rm -rf /var/lib/apt/lists/* && rm -rf /var/lib/mongodb && mv /etc/mongod.conf /etc/mongod.conf.orig 5
apk add --no-cache libc6-compat 5
yarn install --frozen-lockfile 5
$GOPATH/bin/qtsetup prep 5
curl -fSL -o zs-init.tar.gz "http://repos.zend.com/zs-init/zs-init-docker-${ZS_INIT_VERSION}.tar.gz" && echo "${ZS_INIT_SHA256} *zs-init.tar.gz" | sha256sum -c - && mkdir /usr/local/zs-init && tar xzf zs-init.tar.gz --strip-components=1 -C /usr/local/zs-init && rm zs-init.tar.gz 5
curl -O -L https://github.com/facebook/zstd/releases/download/v1.3.7/zstd-1.3.7.tar.gz && tar xvfz zstd-1.3.7.tar.gz && cd zstd-1.3.7 && CFLAGS="-fPIC -O3" make -j8 && make install && rm -rf /zstd-1.3.7 /zstd-1.3.7.tar.gz 5
set -eux;  wget -O get-pip.py "$PYTHON_GET_PIP_URL"; echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum -c -;  export PYTHONDONTWRITEBYTECODE=1;  python get-pip.py --disable-pip-version-check --no-cache-dir --no-compile "pip==$PYTHON_PIP_VERSION" "setuptools==$PYTHON_SETUPTOOLS_VERSION" ; rm -f get-pip.py;  pip --version 5
groupadd -r -g 999 redis && useradd -r -g redis -u 999 redis 5
set -eux; apk add --no-cache bzip2 ca-certificates gmp-dev libffi-dev procps yaml-dev zlib-dev ; 5
sh /scripts/rustbuild-setup.sh 5
apt-get update -q && apt-get install -qy --no-install-recommends git ca-certificates python3 python3-pip python3-dev virtualenv gcc curl locales locales-all 5
go build -gcflags="${SKAFFOLD_GO_GCFLAGS}" -trimpath -o /app main.go 5
echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/motd' >> /etc/bash.bashrc; echo " ################################################################\n" "#\t\t\t\t\t\t\t\t#\n" "# Swift Nightly Docker Image\t\t\t\t\t#\n" "# Tag: $(cat .swift_tag)\t\t\t#\n" "#\t\t\t\t\t\t\t\t#\n"  "################################################################\n" > /etc/motd 5
pip3 install . 4
yarn 4
set -eux; apt-get update; apt-get install -y bzip2 curl gcc gnupg dirmngr make patch ; rm -rf /var/lib/apt/lists/* 4
set -eux; buildrootVersion='2022.05'; for file in system/device_table.txt system/skeleton/etc/group system/skeleton/etc/passwd system/skeleton/etc/shadow ; do dir="$(dirname "$file")"; mkdir -p "../buildroot/$dir"; curl -fL -o "../buildroot/$file" "https://git.busybox.net/buildroot/plain/$file?id=$buildrootVersion"; [ -s "../buildroot/$file" ]; done;  mkdir -p rootfs/etc; ln -vL ../buildroot/system/skeleton/etc/group ../buildroot/system/skeleton/etc/passwd ../buildroot/system/skeleton/etc/shadow rootfs/etc/ ; grep -E '^root::' rootfs/etc/shadow; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; grep -E '^root:[*]:' rootfs/etc/shadow; awk ' !/^#/ { if ($2 != "d" && $2 != "f") { printf "error: unknown type \"%s\" encountered in line %d: %s\n", $2, NR, $0 > "/dev/stderr"; exit 1; } sub(/^\/?/, "rootfs/", $1); if ($2 == "d") { printf "mkdir -p %s\n", $1; } printf "chmod %s %s\n", $3, $1; } ' ../buildroot/system/device_table.txt | sh -eux 4
mkdir -p $GOPATH/src/github.com/nxadm/tail/ 4
go get -v github.com/nxadm/tail 4
go test -v github.com/nxadm/tail 4
go install -v github.com/nxadm/tail 4
go install -v github.com/nxadm/tail/cmd/gotail 4
$GOPATH/bin/gotail -h || true 4
IMAGE_TARGETS="release" ./docker/build-common.sh 4
IMAGE_TARGETS="test" ./docker/build-common.sh 4
set -ex; fetchDeps=" gnupg "; apt-get update; apt-get install -y --no-install-recommends $fetchDeps;  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 08656443618E6567A39524083EE197EF3F9E4287;  curl -fsSL -o friendica-full-${FRIENDICA_VERSION}.tar.gz "https://files.friendi.ca/friendica-full-${FRIENDICA_VERSION}.tar.gz"; curl -fsSL -o friendica-full-${FRIENDICA_VERSION}.tar.gz.asc "https://files.friendi.ca/friendica-full-${FRIENDICA_VERSION}.tar.gz.asc"; gpg --batch --verify friendica-full-${FRIENDICA_VERSION}.tar.gz.asc friendica-full-${FRIENDICA_VERSION}.tar.gz; echo "${FRIENDICA_DOWNLOAD_SHA256} *friendica-full-${FRIENDICA_VERSION}.tar.gz" | sha256sum -c; tar -xzf friendica-full-${FRIENDICA_VERSION}.tar.gz -C /usr/src/; rm friendica-full-${FRIENDICA_VERSION}.tar.gz friendica-full-${FRIENDICA_VERSION}.tar.gz.asc; mv -f /usr/src/friendica-full-${FRIENDICA_VERSION}/ /usr/src/friendica; chmod 777 /usr/src/friendica/view/smarty3;  curl -fsSL -o friendica-addons-${FRIENDICA_ADDONS}.tar.gz "https://files.friendi.ca/friendica-addons-${FRIENDICA_ADDONS}.tar.gz"; curl -fsSL -o friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc "https://files.friendi.ca/friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc"; gpg --batch --verify friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc friendica-addons-${FRIENDICA_ADDONS}.tar.gz; echo "${FRIENDICA_DOWNLOAD_ADDONS_SHA256} *friendica-addons-${FRIENDICA_ADDONS}.tar.gz" | sha256sum -c; mkdir -p /usr/src/friendica/proxy; mkdir -p /usr/src/friendica/addon; tar -xzf friendica-addons-${FRIENDICA_ADDONS}.tar.gz -C /usr/src/friendica/addon --strip-components=1; rm friendica-addons-${FRIENDICA_ADDONS}.tar.gz friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc;  gpgconf --kill all; rm -rf "$GNUPGHOME";  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps; rm -rf /var/lib/apt/lists/* 4
echo '(defproject dummy "" :dependencies [[org.clojure/clojure "1.10.3"]])' > project.clj && lein deps && rm project.clj 4
boot 4
set -eux; if [ "$(dpkg-architecture --query DEB_BUILD_GNU_CPU)" = "aarch64" ]; then GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; mkdir -p /usr/local/share/keyrings/; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "6084F3CF814B57C1CF12EFD515CF4D18AF4F7421"; gpg --batch --armor --export "6084F3CF814B57C1CF12EFD515CF4D18AF4F7421" > /usr/local/share/keyrings/apt.llvm.org.gpg.asc; echo "deb [ signed-by=/usr/local/share/keyrings/apt.llvm.org.gpg.asc ] http://apt.llvm.org/buster/ llvm-toolchain-buster-12 main" > /etc/apt/sources.list.d/llvm.list; apt-get update; apt-get install -y --no-install-recommends llvm-12; gpgconf --kill all; rm -rf "$GNUPGHOME" /var/lib/apt/lists/*; fi 4
true 4
apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/* 4
groupadd --gid 1000 node && useradd --uid 1000 --gid node --shell /bin/bash --create-home node 4
set -ex; export GNUPGHOME="/tmp/gnupg_home"; mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"; echo "disable-ipv6" >> "$GNUPGHOME/dirmngr.conf"; for key in 9722F25F650057E26C803B60A6D064D833B3A969; do found=''; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ; do echo "  trying $server for $key"; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch $key from several disparate servers -- network issues?" && exit 1; done; exit 0 4
apt-get update && apt-get --no-install-recommends -y install curl libreoffice unzip procps && rm -rf /var/lib/apt/lists/* 4
ARCH="x64" && set -eux && apt-get update && apt-get install -y --no-install-recommends ca-certificates curl wget gnupg dirmngr xz-utils && rm -rf /var/lib/apt/lists/* && for key in 4ED778F539E3634C779C87C6D7062848A1AB005C 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 74F12602B6F1C4E913FAA37AD3A89613643B6201 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C DD8F2338BAE7501E3DD5AC78C273792F7D83545D A48C2BEE680E841632CD4E44F07496B3EB3C1762 108F52B48DB57BB0CC439B2997B01419BD92F80A B9E2F5981AA6E0CD28160D9FF13993A75599653C ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && grep " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt && apt-mark auto '.*' > /dev/null && find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false 4
apt-get update && apt-get install -y --no-install-recommends libgazebo11-dev=11.11.0-1* && rm -rf /var/lib/apt/lists/* 4
apt-get update && apt-get install -y --no-install-recommends gazebo11=11.11.0-1* && rm -rf /var/lib/apt/lists/* 4
npm prune --production 4
ls -la /usr/local/hadoop/etc/hadoop/*-env.sh 4
set -eux;  apk add --no-cache --virtual .build-deps coreutils freetype-dev libjpeg-turbo-dev libpng-dev libwebp-dev libzip-dev postgresql-dev ;  docker-php-ext-configure gd --with-freetype --with-jpeg=/usr/include --with-webp ;  docker-php-ext-install -j "$(nproc)" gd opcache pdo_mysql pdo_pgsql zip ;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .drupal-phpexts-rundeps $runDeps; apk del --no-network .build-deps 4
set -eux; export COMPOSER_HOME="$(mktemp -d)"; composer create-project --no-interaction "drupal/recommended-project:$DRUPAL_VERSION" ./; chown -R www-data:www-data web/sites web/modules web/themes; rmdir /var/www/html; ln -sf /opt/drupal/web /var/www/html; rm -rf "$COMPOSER_HOME" 4
adduser -S eggdrop 4
apk add --no-cache 'su-exec>=0.2' 4
curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.72.0/source/boost_1_72_0.tar.bz2 && tar -xjf boost_1_72_0.tar.bz2 && cd boost_1_72_0 && ./bootstrap.sh --with-toolset=clang --prefix=/usr/local && ./b2 toolset=clang cxxflags='-stdlib=libc++ -D__STRICT_ANSI__ -nostdinc++ -I/usr/local/include/c++/v1 -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fpie' linkflags='-stdlib=libc++ -pie' link=static threading=multi --with-iostreams --with-date_time --with-filesystem --with-system --with-program_options --with-chrono --with-test -q -j$(nproc) install && cd / && rm -rf boost_1_72_0.tar.bz2 /boost_1_72_0 4
rm /bin/sh && ln -s /bin/bash /bin/sh 4
pip3 install -r requirements.txt 4
groupadd -r fluent && useradd -r -g fluent fluent && mkdir -p /fluentd/log && mkdir -p /fluentd/etc /fluentd/plugins && chown -R fluent /fluentd && chgrp -R fluent /fluentd 4
bundle install 4
set -ex; for key in $GPG_KEYS; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done 4
set -ex; { echo '/usr/local/lib64'; echo '/usr/local/lib'; } > /etc/ld.so.conf.d/000-local-lib.conf; ldconfig -v 4
set -ex; dpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc; dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++; dpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran; update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999 4
set -eux;  apk add --no-cache --virtual .build-deps gcc libc-dev linux-headers lua5.3-dev make openssl openssl-dev pcre2-dev readline-dev tar ;  wget -O haproxy.tar.gz "$HAPROXY_URL"; echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c; mkdir -p /usr/src/haproxy; tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1; rm haproxy.tar.gz;  makeOpts=' TARGET=linux-musl USE_GETADDRINFO=1 USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 USE_OPENSSL=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_PROMEX=1  EXTRA_OBJS=" " ';  nproc="$(getconf _NPROCESSORS_ONLN)"; eval "make -C /usr/src/haproxy -j '$nproc' all $makeOpts"; eval "make -C /usr/src/haproxy install-bin $makeOpts";  mkdir -p /usr/local/etc/haproxy; cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors; rm -rf /usr/src/haproxy;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .haproxy-rundeps $runDeps; apk del --no-network .build-deps;  haproxy -v 4
mkdir -p /var/run/sshd 4
set -ex && mkdir ~/.gnupg; echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf; for key in 05CE15085FC09D18E99EFB22684A14CF2582E0C5 ; do gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys "$key" ; done 4
provision/jdk/java-16.sh 4
update-alternatives  --install /usr/bin/java java /opt/jdk/bin/java 1000 && update-alternatives  --install /usr/bin/javac javac /opt/jdk/bin/javac 1000 && update-alternatives  --install /usr/bin/javadoc javadoc /opt/jdk/bin/javadoc 1000 && update-alternatives  --install /usr/bin/javap javap /opt/jdk/bin/javap 1000 4
apk add --no-cache ca-certificates git 4
apk add build-base 4
apk add --no-cache ca-certificates curl tar xz openssl 4
set -eux; adduser -u 82 -D -S -G www-data www-data 4
set -eux;  apk add --no-cache --virtual .fetch-deps gnupg;  mkdir -p /usr/src; cd /usr/src;  curl -fsSL -o php.tar.xz "https://www.php.net/distributions/php-8.0.20.tar.xz";  if [ -n "973fec765336ee01f47536a5db1c2eee98df9d34a41522b7b6c760159bf0a77b" ]; then echo "973fec765336ee01f47536a5db1c2eee98df9d34a41522b7b6c760159bf0a77b *php.tar.xz" | sha256sum -c -; fi;  if [ -n "https://www.php.net/distributions/php-8.0.20.tar.xz.asc" ]; then curl -fsSL -o php.tar.xz.asc "https://www.php.net/distributions/php-8.0.20.tar.xz.asc"; export GNUPGHOME="$(mktemp -d)"; for key in $GPG_KEYS; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --verify php.tar.xz.asc php.tar.xz; gpgconf --kill all; rm -rf "$GNUPGHOME"; fi;  apk del --no-network .fetch-deps 4
apt-key adv --keyserver keyserver.ubuntu.com --recv-key 799058698E65316A2E7A4FF42EAE1437F7D2C623 4
useradd --system -m -d /plone -U -u 500 plone && mkdir -p /plone/instance/ /data/filestorage /data/blobstorage 4
buildDeps="default-libmysqlclient-dev dpkg-dev gcc libbz2-dev libc6-dev libffi-dev libjpeg62-turbo-dev libldap2-dev libopenjp2-7-dev libpcre3-dev libpq-dev libsasl2-dev libssl-dev libtiff5-dev libxml2-dev libxslt1-dev wget zlib1g-dev" && runDeps="default-libmysqlclient-dev git gosu libjpeg62 libopenjp2-7 libpq5 libtiff5 libxml2 libxslt1.1 lynx netcat poppler-utils rsync wv" && apt-get update && apt-get install -y --no-install-recommends $buildDeps && wget -O Plone.tgz https://launchpad.net/plone/$PLONE_MAJOR/$PLONE_VERSION/+download/$PLONE_VERSION_RELEASE.tgz && echo "$PLONE_MD5 Plone.tgz" | md5sum -c - && tar -xzf Plone.tgz && cp -rv ./$PLONE_VERSION_RELEASE/base_skeleton/* /plone/instance/ && cp -v ./$PLONE_VERSION_RELEASE/buildout_templates/buildout.cfg /plone/instance/buildout-base.cfg && pip install pip==21.0.1 setuptools==$SETUPTOOLS zc.buildout==$ZC_BUILDOUT wheel==$WHEEL && cd /plone/instance && buildout && ln -s /data/filestorage/ /plone/instance/var/filestorage && ln -s /data/blobstorage /plone/instance/var/blobstorage && find /data  -not -user plone -exec chown plone:plone {} \+ && find /plone -not -user plone -exec chown plone:plone {} \+ && rm -rf /Plone* && apt-get purge -y --auto-remove $buildDeps && apt-get install -y --no-install-recommends $runDeps && rm -rf /var/lib/apt/lists/* && rm -rf /plone/buildout-cache/downloads/* 4
set -eux; groupadd -r postgres --gid=999; useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; mkdir -p /var/lib/postgresql; chown -R postgres:postgres /var/lib/postgresql 4
set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates wget; rm -rf /var/lib/apt/lists/*; dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true 4
set -eux; if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; fi; apt-get update; apt-get install -y --no-install-recommends locales; rm -rf /var/lib/apt/lists/*; localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 4
set -eux; apt-get update; apt-get install -y --no-install-recommends libnss-wrapper xz-utils zstd ; rm -rf /var/lib/apt/lists/* 4
set -ex; key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; export GNUPGHOME="$(mktemp -d)"; mkdir -p /usr/local/share/keyrings/; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; gpg --batch --export --armor "$key" > /usr/local/share/keyrings/postgres.gpg.asc; command -v gpgconf > /dev/null && gpgconf --kill all; rm -rf "$GNUPGHOME" 4
set -ex;  export PYTHONDONTWRITEBYTECODE=1;  dpkgArch="$(dpkg --print-architecture)"; aptRepo="[ signed-by=/usr/local/share/keyrings/postgres.gpg.asc ] http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main $PG_MAJOR"; case "$dpkgArch" in amd64 | arm64 | ppc64el) echo "deb $aptRepo" > /etc/apt/sources.list.d/pgdg.list; apt-get update; ;; *) echo "deb-src $aptRepo" > /etc/apt/sources.list.d/pgdg.list;  savedAptMark="$(apt-mark showmanual)";  tempDir="$(mktemp -d)"; cd "$tempDir";  apt-get update; apt-get install -y --no-install-recommends dpkg-dev; echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list; _update_repo() { dpkg-scanpackages . > Packages; apt-get -o Acquire::GzipIndexes=false update; }; _update_repo;  nproc="$(nproc)"; export DEB_BUILD_OPTIONS="nocheck parallel=$nproc"; apt-get build-dep -y postgresql-common pgdg-keyring; apt-get source --compile postgresql-common pgdg-keyring; _update_repo; apt-get build-dep -y "postgresql-$PG_MAJOR=$PG_VERSION"; apt-get source --compile "postgresql-$PG_MAJOR=$PG_VERSION";   apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark;  ls -lAFh; _update_repo; grep '^Package: ' Packages; cd /; ;; esac;  apt-get install -y --no-install-recommends postgresql-common; sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf; apt-get install -y --no-install-recommends "postgresql-$PG_MAJOR=$PG_VERSION" ;  rm -rf /var/lib/apt/lists/*;  if [ -n "$tempDir" ]; then apt-get purge -y --auto-remove; rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; fi;  find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +;  postgres --version 4
set -eux; dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample"; cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/"; sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample; grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample 4
apt-get update && apt-get install -y autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget && apt-get clean && rm -rf /var/lib/apt/lists/* 4
python -m pip install --no-cache-dir --upgrade pip setuptools tox wheel 4
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates; rm -rf /var/lib/apt/lists/* 4
addgroup -S -g 1000 redis && adduser -S -G redis -u 999 redis 4
apk add --no-cache 'su-exec>=0.2' tzdata 4
set -eux; [ ! -d "$HOME" ]; mkdir -p "$HOME"; chown redmine:redmine "$HOME"; chmod 1777 "$HOME" 4
yum install -y rethinkdb-$RETHINKDB_PACKAGE_VERSION && yum clean all 4
sh /scripts/crosstool-ng-1.24.sh 4
./build-toolchains.sh 4
useradd -ms /bin/bash jenkinsa -u 1000 4
useradd -ms /bin/bash jenkinsb -u 1001 4
useradd -ms /bin/bash jenkinsc -u 1002 4
chmod +x /wait 4
npm install --prod 4
swift --version 4
python3 -m pip install --no-cache-dir jupyter matplotlib 4
jupyter serverextension enable --py jupyter_http_over_ws 4
mkdir /.local && chmod a+rwx /.local 4
python3 -m ipykernel.kernelspec 4
python3 -m pip --no-cache-dir install --upgrade pip setuptools 4
yes | dpkg -i /tmp/${pkg.name}.deb 4
rm /tmp/${pkg.name}.deb 4
systemctl --no-reload disable --now ${pkg.name}.service > /dev/null 2>&1 || : 4
chmod 555 ${pkg.installFolder}/bin/${pkg.name}.jar 4
yarn add typescript@/typescript.tgz 4
set -eux; a2enmod rewrite expires;  a2enmod remoteip; { echo 'RemoteIPHeader X-Forwarded-For'; echo 'RemoteIPTrustedProxy 10.0.0.0/8'; echo 'RemoteIPTrustedProxy 172.16.0.0/12'; echo 'RemoteIPTrustedProxy 192.168.0.0/16'; echo 'RemoteIPTrustedProxy 169.254.0.0/16'; echo 'RemoteIPTrustedProxy 127.0.0.0/8'; } > /etc/apache2/conf-available/remoteip.conf; a2enconf remoteip; find /etc/apache2 -type f -name '*.conf' -exec sed -ri 's/([[:space:]]*LogFormat[[:space:]]+"[^"]*)%h([^"]*")/\1%a\2/g' '{}' + 4
set -eux; groupadd -r zookeeper --gid=1000; useradd -r -g zookeeper --uid=1000 zookeeper; mkdir -p "$ZOO_DATA_LOG_DIR" "$ZOO_DATA_DIR" "/conf" "$ZOO_LOG_DIR"; chown zookeeper:zookeeper "$ZOO_DATA_LOG_DIR" "$ZOO_DATA_DIR" "/conf" "$ZOO_LOG_DIR" 4
apt-get update && apt-get upgrade -y 3
echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list 3
update-ca-certificates 3
echo "http://mirrors.aliyun.com/alpine/v3.8/main" > /etc/apk/repositories && echo "http://mirrors.aliyun.com/alpine/v3.8/community" >> /etc/apk/repositories && apk update upgrade && apk add --no-cache unzip 3
echo "http://mirrors.aliyun.com/alpine/v3.8/main" > /etc/apk/repositories && echo "http://mirrors.aliyun.com/alpine/v3.8/community" >> /etc/apk/repositories && apk update upgrade && apk add --no-cache procps curl bash tzdata && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo "Asia/Shanghai" > /etc/timezone 3
cat .dockerignore >> .gitignore 3
git status --porcelain | cut -c4- | xargs git update-index --skip-worktree 3
set -eux; groupadd -r cassandra --gid=999; useradd -r -g cassandra --uid=999 cassandra 3
mkdir -p /consul/data && mkdir -p /consul/config && chown -R consul:consul /consul 3
chmod +x /usr/local/bin/docker-entrypoint.sh 3
apk update && apk upgrade && apk add --no-cache ca-certificates && update-ca-certificates 2>/dev/null || true 3
wget -O /THIRD-PARTY-LICENSES-20200824.tar.gz https://corretto.aws/downloads/resources/licenses/alpine/THIRD-PARTY-LICENSES-20200824.tar.gz && echo "82f3e50e71b2aee21321b2b33de372feed5befad6ef2196ddec92311bc09becb  /THIRD-PARTY-LICENSES-20200824.tar.gz" | sha256sum -c - && tar x -ovzf THIRD-PARTY-LICENSES-20200824.tar.gz && rm -rf THIRD-PARTY-LICENSES-20200824.tar.gz && wget -O /etc/apk/keys/amazoncorretto.rsa.pub https://apk.corretto.aws/amazoncorretto.rsa.pub && SHA_SUM="6cfdf08be09f32ca298e2d5bd4a359ee2b275765c09b56d514624bf831eafb91" && echo "${SHA_SUM}  /etc/apk/keys/amazoncorretto.rsa.pub" | sha256sum -c - && echo "https://apk.corretto.aws" >> /etc/apk/repositories && apk add --no-cache amazon-corretto-11=11.0.15.9.1-r0 3
set -eux; apt-get update;  echo "couchdb couchdb/mode select none" | debconf-set-selections; DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades --allow-remove-essential --allow-change-held-packages couchdb="$COUCHDB_VERSION"~buster ; rmdir /var/lib/couchdb /var/log/couchdb; rm /opt/couchdb/data /opt/couchdb/var/log; mkdir -p /opt/couchdb/data /opt/couchdb/var/log; chown couchdb:couchdb /opt/couchdb/data /opt/couchdb/var/log; chmod 777 /opt/couchdb/data /opt/couchdb/var/log; rm /opt/couchdb/etc/default.d/10-filelog.ini; find /opt/couchdb \! \( -user couchdb -group couchdb \) -exec chown -f couchdb:couchdb '{}' +; find /opt/couchdb/etc -type d ! -perm 0755 -exec chmod -f 0755 '{}' +; find /opt/couchdb/etc -type f ! -perm 0644 -exec chmod -f 0644 '{}' +; chmod -f 0777 /opt/couchdb/etc/local.d; rm -rf /var/lib/apt/lists/*; 3
set -eux && groupadd -g ${MY_GID} -r ${MY_GROUP} && useradd -u ${MY_UID} -m -s /bin/bash -g ${MY_GROUP} phalcon 3
apt update -y && apt install -y apt-utils gettext git libgmp-dev libicu-dev libmagickwand-dev libmemcached-dev libpng-dev libpq-dev libyaml-dev libzip-dev locales nano  wget zip 3
pecl install -o -f redis && pecl install igbinary msgpack apcu yaml imagick memcached xdebug zephir_parser 3
sed -i -e 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen && sed -i -e 's/# el_GR.UTF-8 UTF-8/el_GR.UTF-8 UTF-8/' /etc/locale.gen && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && sed -i -e 's/# es_ES.UTF-8 UTF-8/es_ES.UTF-8 UTF-8/' /etc/locale.gen && sed -i -e 's/# ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/' /etc/locale.gen && dpkg-reconfigure --frontend=noninteractive locales && update-locale LANG=en_US.UTF-8 3
docker-php-ext-configure gd --with-freetype --with-jpeg=/usr/include/ --enable-gd 3
docker-php-ext-install gd gettext gmp intl pdo_mysql pdo_pgsql zip 3
apk add --no-cache git 3
doppler secrets download doppler.encrypted.json & npm ci --no-progress --ignore-scripts & doppler run --fallback=doppler.encrypted.json --command="npm run create:config" & doppler run --fallback=doppler.encrypted.json --command="npm run build:curriculum" & doppler run --fallback=doppler.encrypted.json --command="npm run build:server" 3
npm ci --production --workspace=api-server --no-progress --ignore-scripts 3
npm i -g pm2@4 3
doppler secrets download doppler.encrypted.json & npm ci --no-progress --ignore-scripts=false & doppler run --fallback=doppler.encrypted.json --command="npm run create:config" & doppler run --fallback=doppler.encrypted.json --command="npm run build:curriculum" & doppler run --fallback=doppler.encrypted.json --command="npm run build:client" 3
npm i -g serve@13 3
go get -d -v 3
go build -o app . 3
set -ex; apk add --no-cache rsync msmtp shadow tini; 3
set -eux;  apk add --no-cache --virtual .gosu-deps ca-certificates dpkg gnupg ;  dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; command -v gpgconf && gpgconf --kill all || :; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc;  apk del --no-network .gosu-deps;  chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true 3
set -ex;  apk add --no-cache --virtual .build-deps mariadb-client bash $PHPIZE_DEPS libpng-dev libjpeg-turbo-dev imagemagick-dev libtool libmemcached-dev cyrus-sasl-dev libjpeg-turbo-dev freetype-dev libwebp-dev librsvg pcre-dev libzip-dev icu-dev openldap-dev ;  docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp ;  docker-php-ext-install -j "$(nproc)" pdo_mysql exif gd zip opcache pcntl ldap ;  pecl install APCu-5.1.21; pecl install memcached-3.2.0RC2; pecl install redis-5.3.7; pecl install imagick-3.7.0;  docker-php-ext-enable apcu memcached redis imagick ;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .friendica-phpext-rundeps $runDeps; apk del --no-network .build-deps; 3
set -ex a2enmod rewrite remoteip   echo RemoteIPHeader X-Real-IP  echo RemoteIPTrustedProxy 10.0.0.0/8  echo RemoteIPTrustedProxy 172.16.0.0/12  echo RemoteIPTrustedProxy 192.168.0.0/16  } > /etc/apache2/conf-available/remoteip.conf a2enconf remoteip 3
set -xe && REBAR_DOWNLOAD_URL="https://github.com/rebar/rebar/archive/2.6.4.tar.gz" && REBAR_DOWNLOAD_SHA256="577246bafa2eb2b2c3f1d0c157408650446884555bf87901508ce71d5cc0bd07" && mkdir -p /usr/src/rebar-src && curl -fSL -o rebar-src.tar.gz "$REBAR_DOWNLOAD_URL" && echo "$REBAR_DOWNLOAD_SHA256 rebar-src.tar.gz" | sha256sum -c - && tar -xzf rebar-src.tar.gz -C /usr/src/rebar-src --strip-components=1 && rm rebar-src.tar.gz && cd /usr/src/rebar-src && ./bootstrap && install -v ./rebar /usr/local/bin/ && rm -rf /usr/src/rebar-src 3
set -xe && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && mkdir -p /usr/src/rebar3-src && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "$REBAR3_DOWNLOAD_SHA256 rebar3-src.tar.gz" | sha256sum -c - && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src 3
apt-get -y update && apt-get -y install curl && rm -rf /var/lib/apt/lists/* && mkdir -p /${DATA_DIR} && chown -R jetty:jetty ${DATA_DIR} && mkdir -p /var/lib/jetty/webapps/geonetwork && chown -R jetty:jetty /var/lib/jetty/webapps/geonetwork 3
curl -fSL -o $GN_FILE https://sourceforge.net/projects/geonetwork/files/GeoNetwork_opensource/v${GN_VERSION}/${GN_FILE}/download && echo "${GN_DOWNLOAD_MD5} *${GN_FILE}" | md5sum -c && mkdir -p geonetwork && unzip -e $GN_FILE -d geonetwork && rm $GN_FILE 3
apt-get update && apt-get install -y --no-install-recommends ca-certificates curl dpkg-dev git gcc gnupg g++ libc6-dev libffi-dev libgmp-dev libnuma-dev libtinfo-dev make netbase xz-utils zlib1g-dev && rm -rf /var/lib/apt/lists/* 3
apk add --no-cache bash 3
set -ex;  apk add --no-cache --virtual .build-deps $PHPIZE_DEPS autoconf bzip2-dev gmp-dev icu-dev libjpeg-turbo-dev libmemcached-dev libpng-dev libzip-dev openldap-dev pcre-dev postgresql-dev ;  docker-php-ext-configure gd --with-jpeg; docker-php-ext-configure ldap; docker-php-ext-install -j "$(nproc)" bz2 gd gmp intl ldap mysqli pdo_mysql pdo_pgsql pgsql zip ;  pecl install APCu-5.1.21; pecl install memcached-3.2.0; pecl install redis-5.3.7;  docker-php-ext-enable apcu memcached redis ; rm -r /tmp/pear;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --virtual .joomla-phpext-rundeps $runDeps; apk del .build-deps 3
apk add --no-cache curl tar bash procps 3
ARCH= && dpkgArch="$(dpkg --print-architecture)" && case "${dpkgArch##*-}" in amd64) ARCH='x64';; ppc64el) ARCH='ppc64le';; s390x) ARCH='s390x';; arm64) ARCH='arm64';; armhf) ARCH='armv7l';; i386) ARCH='x86';; *) echo "unsupported architecture"; exit 1 ;; esac && set -ex && for key in 4ED778F539E3634C779C87C6D7062848A1AB005C 141F07595B7B3FFE74309A937405533BE57C7D57 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 74F12602B6F1C4E913FAA37AD3A89613643B6201 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 61FC681DFB92A079F1685E77973F295594EC4689 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C DD8F2338BAE7501E3DD5AC78C273792F7D83545D A48C2BEE680E841632CD4E44F07496B3EB3C1762 108F52B48DB57BB0CC439B2997B01419BD92F80A B9E2F5981AA6E0CD28160D9FF13993A75599653C ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && grep " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt && ln -s /usr/local/bin/node /usr/local/bin/nodejs && node --version && npm --version 3
set -ex && for key in 6A010C5166006599AA17F08146C2130DFD2497F5 ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz && mkdir -p /opt && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz && yarn --version 3
apk add --no-cache ca-certificates gcc 3
rm -rf /usr/local/tomcat/webapps/* && mkdir -p /usr/local/tomcat/temp && mkdir -p /usr/local/xwiki/data && curl -fSL "${XWIKI_URL_PREFIX}/xwiki-platform-distribution-war-14.4.1.war" -o xwiki.war && echo "$XWIKI_DOWNLOAD_SHA256 xwiki.war" | sha256sum -c - && unzip -d /usr/local/tomcat/webapps/ROOT xwiki.war && rm -f xwiki.war 3
rm -rf /usr/local/tomcat/webapps/* && mkdir -p /usr/local/tomcat/temp && mkdir -p /usr/local/xwiki/data && curl -fSL "${XWIKI_URL_PREFIX}/xwiki-platform-distribution-war-13.10.6.war" -o xwiki.war && echo "$XWIKI_DOWNLOAD_SHA256 xwiki.war" | sha256sum -c - && unzip -d /usr/local/tomcat/webapps/ROOT xwiki.war && rm -f xwiki.war 3
sed -i -e 's,main *$,main contrib non-free,g' /etc/apt/sources.list.d/neurodebian.sources.list; grep -q 'deb .* multiverse$' /etc/apt/sources.list || sed -i -e 's,universe *$,universe multiverse,g' /etc/apt/sources.list 3
echo 'Etc/UTC' > /etc/timezone && ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && apt-get update && apt-get install -q -y --no-install-recommends tzdata && rm -rf /var/lib/apt/lists/* 3
chown root:root /etc/bootstrap.sh 3
chmod 700 /etc/bootstrap.sh 3
git clone --single-branch --branch llvmorg-10.0.0 https://github.com/llvm/llvm-project clang10 && mkdir /clang10/build && cd /clang10/build && cmake -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX='/usr/local' -DLLVM_ENABLE_PROJECTS='lld;polly;clang;clang-tools-extra;libcxx;libcxxabi;libunwind;compiler-rt' -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_INCLUDE_DOCS=OFF -DLLVM_TARGETS_TO_BUILD=host -DCMAKE_BUILD_TYPE=Release ../llvm && make -j $(nproc) && make install && cd / && rm -rf /clang10 3
curl -L https://github.com/jtv/libpqxx/archive/7.2.1.tar.gz | tar zxvf - && cd  libpqxx-7.2.1  && cmake -DCMAKE_TOOLCHAIN_FILE=/tmp/clang.cmake -DSKIP_BUILD_TEST=ON -DPostgreSQL_TYPE_INCLUDE_DIR=/usr/include/postgresql -DCMAKE_BUILD_TYPE=Release -S . -B build && cmake --build build && cmake --install build && cd .. && rm -rf libpqxx-7.2.1 3
curl -sL https://deb.nodesource.com/setup_13.x |  -E bash - 3
rm -rf ${GOROOT} && curl -s ${GO_DOWNLOAD_URL}/go${GO_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local/ -xz && mkdir -p ${GOPATH}/src ${GOPATH}/bin && go version && go get -v -u github.com/mattn/goreman 3
wget http://curl.haxx.se/download/curl-7.45.0.tar.gz 3
apt-get -y update 3
DEBIAN_FRONTEND=noninteractive apt-get -y upgrade 3
apt-get update && apt-get install -y --no-install-recommends ca-certificates && buildDeps=" make gcc g++ libc-dev wget bzip2 gnupg dirmngr " && apt-get install -y --no-install-recommends $buildDeps && echo 'gem: --no-document' >> /etc/gemrc && gem install oj -v 3.10.18 && gem install json -v 2.4.1 && gem install async-http -v 0.54.0 && gem install ext_monitor -v 0.1.2 && gem install fluentd -v 1.14.6 && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" && wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/v0.18.0/tini-$dpkgArch" && wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/v0.18.0/tini-$dpkgArch.asc" && export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini && rm -r /usr/local/bin/tini.asc && chmod +x /usr/local/bin/tini && tini -h && wget -O /tmp/jemalloc-4.5.0.tar.bz2 https://github.com/jemalloc/jemalloc/releases/download/4.5.0/jemalloc-4.5.0.tar.bz2 && cd /tmp && tar -xjf jemalloc-4.5.0.tar.bz2 && cd jemalloc-4.5.0/ && ./configure && make && mv lib/libjemalloc.so.2 /usr/lib && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem /usr/lib/ruby/gems/2.*/gems/fluentd-*/test 3
apk add curl --no-cache 3
[ cross-build-start ] 3
[ cross-build-end ] 3
bundle config --global frozen 1 3
pip install --upgrade pip 3
/work/ubuntu_adduser.sh 3
set -xe ; mkdir -p $TMPDIR ; export GNUPGHOME=/jetty-keys ; mkdir -p "$GNUPGHOME" ; for key in $JETTY_GPG_KEYS; do gpg --batch --keyserver "hkps://keyserver.ubuntu.com" --recv-keys "$key"; done ; mkdir -p "$JETTY_HOME" ; cd $JETTY_HOME ; curl -SL "$JETTY_TGZ_URL" -o jetty.tar.gz ; curl -SL "$JETTY_TGZ_URL.asc" -o jetty.tar.gz.asc ; gpg --batch --verify jetty.tar.gz.asc jetty.tar.gz ; tar -xvf jetty.tar.gz --strip-components=1 ; sed -i '/jetty-logging/d' etc/jetty.conf ; mkdir -p "$JETTY_BASE" ; cd $JETTY_BASE ; java -jar "$JETTY_HOME/start.jar" --create-startd --add-to-start="server,http,deploy,jsp,jstl,ext,resources,websocket" ; groupadd -r jetty && useradd -r -g jetty jetty ; chown -R jetty:jetty "$JETTY_HOME" "$JETTY_BASE" "$TMPDIR" ; usermod -d $JETTY_BASE jetty ; rm -rf /tmp/hsperfdata_root ; rm -fr $JETTY_HOME/jetty.tar.gz* ; rm -fr /jetty-keys $GNUPGHOME ; rm -rf /tmp/hsperfdata_root ; java -jar "$JETTY_HOME/start.jar" --list-config ; 3
set -xe ; mkdir -p $TMPDIR ; apk add --no-cache gnupg curl ; export GNUPGHOME=/jetty-keys ; mkdir -p "$GNUPGHOME" ; for key in $JETTY_GPG_KEYS; do gpg --batch --keyserver "hkps://keyserver.ubuntu.com" --recv-keys "$key"; done ; mkdir -p "$JETTY_HOME" ; cd $JETTY_HOME ; curl -SL "$JETTY_TGZ_URL" -o jetty.tar.gz ; curl -SL "$JETTY_TGZ_URL.asc" -o jetty.tar.gz.asc ; gpg --batch --verify jetty.tar.gz.asc jetty.tar.gz ; tar -xvf jetty.tar.gz --strip-components=1 ; sed -i '/jetty-logging/d' etc/jetty.conf ; mkdir -p "$JETTY_BASE" ; cd $JETTY_BASE ; java -jar "$JETTY_HOME/start.jar" --create-startd --add-to-start="server,http,deploy,jsp,jstl,ext,resources,websocket" ; addgroup -S jetty && adduser -h $JETTY_BASE -S jetty -G jetty; chown -R jetty:jetty "$JETTY_HOME" "$JETTY_BASE" "$TMPDIR" ; rm -rf /tmp/hsperfdata_root ; rm -fr $JETTY_HOME/jetty.tar.gz* ; rm -fr /jetty-keys $GNUPGHOME ; rm -rf /tmp/hsperfdata_root ; java -jar "$JETTY_HOME/start.jar" --list-config ; 3
set -xe ; export savedAptMark="$(apt-mark showmanual)" ; mkdir -p $TMPDIR ; apt-get update ; apt-get install -y --no-install-recommends ca-certificates p11-kit gnupg curl ; export GNUPGHOME=/jetty-keys ; mkdir -p "$GNUPGHOME" ; for key in $JETTY_GPG_KEYS; do gpg --batch --keyserver "hkps://keyserver.ubuntu.com" --recv-keys "$key"; done ; mkdir -p "$JETTY_HOME" ; cd $JETTY_HOME ; curl -SL "$JETTY_TGZ_URL" -o jetty.tar.gz ; curl -SL "$JETTY_TGZ_URL.asc" -o jetty.tar.gz.asc ; gpg --batch --verify jetty.tar.gz.asc jetty.tar.gz ; tar -xvf jetty.tar.gz --strip-components=1 ; sed -i '/jetty-logging/d' etc/jetty.conf ; mkdir -p "$JETTY_BASE" ; cd $JETTY_BASE ; java -jar "$JETTY_HOME/start.jar" --create-startd --add-to-start="server,http,deploy,jsp,jstl,ext,resources,websocket" ; groupadd -r jetty && useradd -r -g jetty jetty ; chown -R jetty:jetty "$JETTY_HOME" "$JETTY_BASE" "$TMPDIR" ; usermod -d $JETTY_BASE jetty ; apt-mark auto '.*' > /dev/null ; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; rm -rf /var/lib/apt/lists/* ; rm -rf /tmp/hsperfdata_root ; rm -fr $JETTY_HOME/jetty.tar.gz* ; rm -fr /jetty-keys $GNUPGHOME ; rm -rf /tmp/hsperfdata_root ; java -jar "$JETTY_HOME/start.jar" --list-config ; 3
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates curl ; rm -rf /var/lib/apt/lists/* 3
python3 setup.py bdist_wheel 3
mkdir -p /out/usr/local/bin/ 3
apk add --no-cache --quiet make curl git jq unzip tree && go get -u golang.org/x/lint/golint && curl -sSL --retry 3 --retry-connrefused https://github.com/gotestyourself/gotestsum/releases/download/v0.3.2/gotestsum_0.3.2_linux_amd64.tar.gz | tar -xz -C /usr/local/bin gotestsum 3
go mod download && go mod vendor && cd internal/cmd/generate && go mod download && go mod vendor 3
apk add --update --no-cache ca-certificates 3
addgroup --system --gid 1001 nodejs 3
adduser --system --uid 1001 nextjs 3
addgroup -g 1001 -S nodejs 3
adduser -S nextjs -u 1001 3
mkdir /orientdb && wget  $ORIENTDB_DOWNLOAD_URL && echo "$ORIENTDB_DOWNLOAD_MD5 *orientdb-tp3-$ORIENTDB_VERSION.tar.gz" | md5sum -c - && echo "$ORIENTDB_DOWNLOAD_SHA1 *orientdb-tp3-$ORIENTDB_VERSION.tar.gz" | sha1sum -c - && tar -xvzf orientdb-tp3-$ORIENTDB_VERSION.tar.gz -C /orientdb --strip-components=1 && rm orientdb-tp3-$ORIENTDB_VERSION.tar.gz && rm -rf /orientdb/databases/* 3
$GOPATH/bin/qtsetup check windows 3
$GOPATH/bin/qtsetup generate windows 3
$GOPATH/bin/qtsetup install windows 3
cd $GOPATH/src/github.com/peterq/pan-light/qt/internal/examples/widgets/line_edits && $GOPATH/bin/qtdeploy build windows && rm -rf ./deploy 3
npm cache clean --force 3
set -eux; cd /usr/local/etc; if [ -d php-fpm.d ]; then sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; cp php-fpm.d/www.conf.default php-fpm.d/www.conf; else mkdir php-fpm.d; cp php-fpm.conf.default php-fpm.d/www.conf; { echo '[global]'; echo 'include=etc/php-fpm.d/*.conf'; } | tee php-fpm.conf; fi; { echo '[global]'; echo 'error_log = /proc/self/fd/2'; echo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; echo; echo '[www]'; echo '; if we send this to /proc/self/fd/1, it never appears'; echo 'access.log = /proc/self/fd/2'; echo; echo 'clear_env = no'; echo; echo '; Ensure worker stdout and stderr are sent to the main error log.'; echo 'catch_workers_output = yes'; echo 'decorate_workers_output = no'; } | tee php-fpm.d/docker.conf; { echo '[global]'; echo 'daemonize = no'; echo; echo '[www]'; echo 'listen = 9000'; } | tee php-fpm.d/zz-docker.conf 3
if ! getent group "${DOCKER_GROUP_ID}" > /dev/null; then addgroup -S -g "${DOCKER_GROUP_ID}" devs; fi && if ! getent passwd "${DOCKER_USER_ID}" > /dev/null; then adduser -S -u "${DOCKER_USER_ID}" -G "$(getent group "${DOCKER_GROUP_ID}" | awk -F: '{printf $1}')" dev; fi && curl --location --output /usr/local/bin/install-php-extensions https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions && chmod +x /usr/local/bin/install-php-extensions && sync && install-php-extensions xdebug-3.1.2 && curl --output composer-setup.php https://getcomposer.org/installer && php composer-setup.php --install-dir=/usr/local/bin --filename=composer && rm composer-setup.php && curl --location --output /usr/local/bin/xdebug https://github.com/julienfalque/xdebug/releases/download/v2.0.0/xdebug && chmod +x /usr/local/bin/xdebug 3
rm /var/www/html/index.html 3
addgroup -g 500 plone && adduser -S -D -G plone -u 500 plone && mkdir -p /plone/instance /data/filestorage /data/blobstorage 3
apk add --no-cache --virtual .build-deps build-base libc-dev zlib-dev libjpeg-turbo-dev libpng-dev libxml2-dev libxslt-dev mariadb-dev openldap-dev pcre-dev postgresql-dev libffi-dev && wget -O Plone.tgz https://launchpad.net/plone/$PLONE_MAJOR/$PLONE_VERSION/+download/$PLONE_VERSION_RELEASE.tgz && echo "$PLONE_MD5  Plone.tgz" | md5sum -c - && tar -zxvf Plone.tgz && cp -rv ./$PLONE_VERSION_RELEASE/base_skeleton/* /plone/instance/ && cp -v ./$PLONE_VERSION_RELEASE/buildout_templates/buildout.cfg /plone/instance/buildout-base.cfg && pip install pip==21.0.1 setuptools==$SETUPTOOLS zc.buildout==$ZC_BUILDOUT wheel==$WHEEL && cd /plone/instance && buildout && ln -s /data/filestorage/ /plone/instance/var/filestorage && ln -s /data/blobstorage /plone/instance//var/blobstorage && find /data  -not -user plone -exec chown plone:plone {} \+ && find /plone -not -user plone -exec chown plone:plone {} \+ && rm -rf /Plone* && apk del .build-deps && apk add --no-cache --virtual .run-deps su-exec bash git rsync libxml2 libxslt libjpeg-turbo mariadb-connector-c postgresql-client && rm -rf /plone/buildout-cache/downloads/* 3
set -eux;  wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"; echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -; mkdir -p /usr/src/postgresql; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2;  apk add --no-cache --virtual .build-deps bison coreutils dpkg-dev dpkg flex gcc krb5-dev libc-dev libedit-dev libxml2-dev libxslt-dev linux-headers llvm-dev clang g++ make openldap-dev openssl-dev perl-dev perl-ipc-run perl-utils python3-dev tcl-dev util-linux-dev zlib-dev icu-dev ;  cd /usr/src/postgresql; awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'; wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'; ./configure --build="$gnuArch" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu --with-llvm ; make -j "$(nproc)" world; make install-world; make -C contrib install;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' | grep -v -e perl -e python -e tcl )"; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash su-exec tzdata zstd icu-data-full ; apk del --no-network .build-deps; cd /; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ;  postgres --version 3
adduser --shell /bin/zsh --gecos 'fred' --disabled-password fred 3
locale-gen "en_US.UTF-8" 3
touch .zshrc 3
set -ex; apt-get update; apt-get install -y --no-install-recommends wget; rm -rf /var/lib/apt/lists/*;  wget -O get-pip.py "$PYTHON_GET_PIP_URL"; echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -;  pipVersion="$(pypy3 -c 'import ensurepip; print(ensurepip._PIP_VERSION)')"; setuptoolsVersion="$(pypy3 -c 'import ensurepip; print(ensurepip._SETUPTOOLS_VERSION)')";  pypy3 get-pip.py --disable-pip-version-check --no-cache-dir "pip == $pipVersion" "setuptools == $setuptoolsVersion" ; apt-get purge -y --auto-remove wget; pip --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' +; rm -f get-pip.py 3
set -eux; apt-get update; apt-get install -y --no-install-recommends tcl tk ; rm -rf /var/lib/apt/lists/* 3
set -eux; apt-get update; apt-get install -y --no-install-recommends libbluetooth-dev tk-dev uuid-dev ; rm -rf /var/lib/apt/lists/* 3
set -eux;  wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"; wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"; GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$GPG_KEY"; gpg --batch --verify python.tar.xz.asc python.tar.xz; command -v gpgconf > /dev/null && gpgconf --kill all || :; rm -rf "$GNUPGHOME" python.tar.xz.asc; mkdir -p /usr/src/python; tar --extract --directory /usr/src/python --strip-components=1 --file python.tar.xz; rm python.tar.xz;  cd /usr/src/python; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --enable-loadable-sqlite-extensions --enable-optimizations --enable-option-checking=fatal --enable-shared --with-lto --with-system-expat --without-ensurepip ; nproc="$(nproc)"; make -j "$nproc" ; make install;  bin="$(readlink -ve /usr/local/bin/python3)"; dir="$(dirname "$bin")"; mkdir -p "/usr/share/gdb/auto-load/$dir"; cp -vL Tools/gdb/libpython.py "/usr/share/gdb/auto-load/$bin-gdb.py";  cd /; rm -rf /usr/src/python;  find /usr/local -depth \( \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \) \) \) -exec rm -rf '{}' + ;  ldconfig;  python3 --version 3
set -eux; apt-get update; apt-get install -y --no-install-recommends gosu ; rm -rf /var/lib/apt/lists/*; gosu nobody true 3
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install --yes --no-install-recommends autoconf ca-certificates dpkg-dev gcc g++ gnupg libncurses5-dev make wget ; rm -rf /var/lib/apt/lists/*;  OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"; OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION"; OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;  wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc"; wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL"; export GNUPGHOME="$(mktemp -d)"; for key in 0x8657ABB260F056B1E5190839D9C4D26D0E604491; do gpg --batch --keyserver "keyserver.ubuntu.com" --recv-keys "$key"; done; gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz"; gpgconf --kill all; rm -rf "$GNUPGHOME"; echo "9384a2b0570dd80358841464677115df785edb941c71211f75076d72fe6b438f *$OPENSSL_PATH.tar.gz" | sha256sum --check --strict -; mkdir -p "$OPENSSL_PATH"; tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;  cd "$OPENSSL_PATH"; debMultiarch="$(dpkg-architecture --query DEB_HOST_MULTIARCH)"; MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)" RELEASE="4.x.y-z" SYSTEM='Linux' BUILD='???' ./config --openssldir="$OPENSSL_CONFIG_DIR" --libdir="lib/$debMultiarch" -Wl,-rpath=/usr/local/lib ; make -j "$(getconf _NPROCESSORS_ONLN)"; make install_sw install_ssldirs; cd ..; rm -rf "$OPENSSL_PATH"*; ldconfig; rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private"; ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR"; openssl version;  OTP_SOURCE_URL="https://github.com/erlang/otp/releases/download/OTP-$OTP_VERSION/otp_src_$OTP_VERSION.tar.gz"; OTP_PATH="/usr/local/src/otp-$OTP_VERSION";  mkdir -p "$OTP_PATH"; wget --progress dot:giga --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL"; echo "f5c502dfab713a83f73eabf79fb6d83ac85d53386a571f55c2297e165a8145de *$OTP_PATH.tar.gz" | sha256sum --check --strict -; tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;  cd "$OTP_PATH"; export ERL_TOP="$OTP_PATH"; ./otp_build autoconf; CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS; export CFLAGS="$CFLAGS -Wl,-rpath=/usr/local/lib"; hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)"; buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}"; jitFlag=; case "$dpkgArch" in amd64) jitFlag='--enable-jit' ;; esac; ./configure --host="$hostArch" --build="$buildArch" --disable-dynamic-ssl-lib --disable-hipe --disable-sctp --disable-silent-rules --enable-clock-gettime --enable-hybrid-heap --enable-kernel-poll --enable-shared-zlib --enable-smp-support --enable-threads --with-microstate-accounting=extra --without-common_test --without-debugger --without-dialyzer --without-diameter --without-edoc --without-erl_docgen --without-et --without-eunit --without-ftp --without-hipe --without-jinterface --without-megaco --without-observer --without-odbc --without-reltool --without-ssh --without-tftp --without-wx $jitFlag ; make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing"; make install; cd ..; rm -rf "$OTP_PATH"* /usr/local/lib/erlang/lib/*/examples /usr/local/lib/erlang/lib/*/src ;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  openssl version; erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().' 3
set -eux; groupadd --gid 999 --system rabbitmq; useradd --uid 999 --system --home-dir "/var/lib/rabbitmq" --gid rabbitmq rabbitmq; mkdir -p "/var/lib/rabbitmq" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; chown -fR rabbitmq:rabbitmq "/var/lib/rabbitmq" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; chmod 777 "/var/lib/rabbitmq" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; ln -sf "/var/lib/rabbitmq/.erlang.cookie" /root/.erlang.cookie 3
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install --yes --no-install-recommends ca-certificates gnupg wget xz-utils ; rm -rf /var/lib/apt/lists/*;  RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-latest-toolchain-$RABBITMQ_VERSION.tar.xz"; RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";  wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc"; wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"; gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz"; gpgconf --kill all; rm -rf "$GNUPGHOME";  mkdir -p "/opt/rabbitmq"; tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "/opt/rabbitmq" --strip-components 1; rm -rf "$RABBITMQ_PATH"*; grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "/opt/rabbitmq/sbin/rabbitmq-defaults"; sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "/opt/rabbitmq/sbin/rabbitmq-defaults"; grep -qE '^SYS_PREFIX=$' "/opt/rabbitmq/sbin/rabbitmq-defaults"; chown -R rabbitmq:rabbitmq "/opt/rabbitmq";  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  [ ! -e "/var/lib/rabbitmq/.erlang.cookie" ]; gosu rabbitmq rabbitmqctl help; gosu rabbitmq rabbitmqctl list_ciphers; gosu rabbitmq rabbitmq-plugins list; rm "/var/lib/rabbitmq/.erlang.cookie" 3
set -eux; gosu rabbitmq rabbitmq-plugins enable --offline rabbitmq_prometheus; echo 'management_agent.disable_metrics_collector = true' > /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf; chown rabbitmq:rabbitmq /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf 3
apk add --no-cache 'su-exec>=0.2' bash procps 3
set -eux;  apk add --no-cache --virtual .build-deps autoconf dpkg-dev dpkg g++ gcc gnupg libc-dev linux-headers make ncurses-dev ;  OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"; OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION"; OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;  mkdir /usr/local/src;  wget --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc"; wget --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL"; export GNUPGHOME="$(mktemp -d)"; for key in 0x8657ABB260F056B1E5190839D9C4D26D0E604491; do gpg --batch --keyserver "keyserver.ubuntu.com" --recv-keys "$key"; done; gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz"; gpgconf --kill all; rm -rf "$GNUPGHOME"; echo "9384a2b0570dd80358841464677115df785edb941c71211f75076d72fe6b438f *$OPENSSL_PATH.tar.gz" | sha256sum -c -; mkdir -p "$OPENSSL_PATH"; tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;  cd "$OPENSSL_PATH"; MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)" RELEASE="4.x.y-z" SYSTEM='Linux' BUILD='???' ./config --openssldir="$OPENSSL_CONFIG_DIR" -Wl,-rpath=/usr/local/lib ; make -j "$(getconf _NPROCESSORS_ONLN)"; make install_sw install_ssldirs; cd ..; rm -rf "$OPENSSL_PATH"*; rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private"; ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR"; openssl version;  OTP_SOURCE_URL="https://github.com/erlang/otp/releases/download/OTP-$OTP_VERSION/otp_src_$OTP_VERSION.tar.gz"; OTP_PATH="/usr/local/src/otp-$OTP_VERSION";  mkdir -p "$OTP_PATH"; wget --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL"; echo "f5c502dfab713a83f73eabf79fb6d83ac85d53386a571f55c2297e165a8145de *$OTP_PATH.tar.gz" | sha256sum -c -; tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;  cd "$OTP_PATH"; export ERL_TOP="$OTP_PATH"; ./otp_build autoconf; export CFLAGS='-g -O2'; export CFLAGS="$CFLAGS -Wl,-rpath=/usr/local/lib"; hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)"; buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}"; jitFlag=; case "$dpkgArch" in amd64) jitFlag='--enable-jit' ;; esac; ./configure --host="$hostArch" --build="$buildArch" --disable-dynamic-ssl-lib --disable-hipe --disable-sctp --disable-silent-rules --enable-clock-gettime --enable-hybrid-heap --enable-kernel-poll --enable-shared-zlib --enable-smp-support --enable-threads --with-microstate-accounting=extra --without-common_test --without-debugger --without-dialyzer --without-diameter --without-edoc --without-erl_docgen --without-et --without-eunit --without-ftp --without-hipe --without-jinterface --without-megaco --without-observer --without-odbc --without-reltool --without-ssh --without-tftp --without-wx $jitFlag ; make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing"; make install; cd ..; rm -rf "$OTP_PATH"* /usr/local/lib/erlang/lib/*/examples /usr/local/lib/erlang/lib/*/src ;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-cache --virtual .otp-run-deps $runDeps; apk del --no-network .build-deps;  openssl version; erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().' 3
set -eux; addgroup -g 101 -S rabbitmq; adduser -u 100 -S -h "/var/lib/rabbitmq" -G rabbitmq rabbitmq; mkdir -p "/var/lib/rabbitmq" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; chown -fR rabbitmq:rabbitmq "/var/lib/rabbitmq" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; chmod 777 "/var/lib/rabbitmq" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; ln -sf "/var/lib/rabbitmq/.erlang.cookie" /root/.erlang.cookie 3
set -eux;  apk add --no-cache --virtual .build-deps gnupg xz ;  RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-latest-toolchain-$RABBITMQ_VERSION.tar.xz"; RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";  wget --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc"; wget --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"; gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz"; gpgconf --kill all; rm -rf "$GNUPGHOME";  mkdir -p "/opt/rabbitmq"; tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "/opt/rabbitmq" --strip-components 1; rm -rf "$RABBITMQ_PATH"*; grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "/opt/rabbitmq/sbin/rabbitmq-defaults"; sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "/opt/rabbitmq/sbin/rabbitmq-defaults"; grep -qE '^SYS_PREFIX=$' "/opt/rabbitmq/sbin/rabbitmq-defaults"; chown -R rabbitmq:rabbitmq "/opt/rabbitmq";  apk del .build-deps;  [ ! -e "/var/lib/rabbitmq/.erlang.cookie" ]; su-exec rabbitmq rabbitmqctl help; su-exec rabbitmq rabbitmqctl list_ciphers; su-exec rabbitmq rabbitmq-plugins list; rm "/var/lib/rabbitmq/.erlang.cookie" 3
set -eux; su-exec rabbitmq rabbitmq-plugins enable --offline rabbitmq_prometheus; echo 'management_agent.disable_metrics_collector = true' > /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf; chown rabbitmq:rabbitmq /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf 3
set -eux;  apk add --no-cache --virtual .build-deps coreutils dpkg-dev dpkg gcc linux-headers make musl-dev openssl-dev wget ;  wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -; mkdir -p /usr/src/redis; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; rm redis.tar.gz;  grep -E '^ *createBoolConfig[(]"protected-mode",.*, *1 *,.*[)],$' /usr/src/redis/src/config.c; sed -ri 's!^( *createBoolConfig[(]"protected-mode",.*, *)1( *,.*[)],)$!\10\2!' /usr/src/redis/src/config.c; grep -E '^ *createBoolConfig[(]"protected-mode",.*, *0 *,.*[)],$' /usr/src/redis/src/config.c;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; extraJemallocConfigureFlags="--build=$gnuArch"; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64 | i386 | x32) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=12" ;; *) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=16" ;; esac; extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-hugepage=21"; grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; sed -ri 's!cd jemalloc && ./configure !&'"$extraJemallocConfigureFlags"' !' /usr/src/redis/deps/Makefile; grep -F "cd jemalloc && ./configure $extraJemallocConfigureFlags " /usr/src/redis/deps/Makefile;  export BUILD_TLS=yes; make -C /usr/src/redis -j "$(nproc)" all; make -C /usr/src/redis install;  serverMd5="$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)"; export serverMd5; find /usr/local/bin/redis* -maxdepth 0 -type f -not -name redis-server -exec sh -eux -c ' md5="$(md5sum "$1" | cut -d" " -f1)"; test "$md5" = "$serverMd5"; ' -- '{}' ';' -exec ln -svfT 'redis-server' '{}' ';' ;  rm -r /usr/src/redis;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .redis-rundeps $runDeps; apk del --no-network .build-deps;  redis-cli --version; redis-server --version 3
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates wget  dpkg-dev gcc libc6-dev libssl-dev make ; rm -rf /var/lib/apt/lists/*;  wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -; mkdir -p /usr/src/redis; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; rm redis.tar.gz;  grep -E '^ *createBoolConfig[(]"protected-mode",.*, *1 *,.*[)],$' /usr/src/redis/src/config.c; sed -ri 's!^( *createBoolConfig[(]"protected-mode",.*, *)1( *,.*[)],)$!\10\2!' /usr/src/redis/src/config.c; grep -E '^ *createBoolConfig[(]"protected-mode",.*, *0 *,.*[)],$' /usr/src/redis/src/config.c;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; extraJemallocConfigureFlags="--build=$gnuArch"; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64 | i386 | x32) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=12" ;; *) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=16" ;; esac; extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-hugepage=21"; grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; sed -ri 's!cd jemalloc && ./configure !&'"$extraJemallocConfigureFlags"' !' /usr/src/redis/deps/Makefile; grep -F "cd jemalloc && ./configure $extraJemallocConfigureFlags " /usr/src/redis/deps/Makefile;  export BUILD_TLS=yes; make -C /usr/src/redis -j "$(nproc)" all; make -C /usr/src/redis install;  serverMd5="$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)"; export serverMd5; find /usr/local/bin/redis* -maxdepth 0 -type f -not -name redis-server -exec sh -eux -c ' md5="$(md5sum "$1" | cut -d" " -f1)"; test "$md5" = "$serverMd5"; ' -- '{}' ';' -exec ln -svfT 'redis-server' '{}' ';' ;  rm -r /usr/src/redis;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  redis-cli --version; redis-server --version 3
set -eux;  apk add --no-cache --virtual .ruby-builddeps autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg g++ gcc gdbm-dev glib-dev libc-dev libffi-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev openssl openssl-dev patch procps readline-dev ruby tar xz yaml-dev zlib-dev ;  wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"; echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum --check --strict;  mkdir -p /usr/src/ruby; tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1; rm ruby.tar.xz;  cd /usr/src/ruby;  wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch'; echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum --check --strict; patch -p1 -i thread-stack-fix.patch; rm thread-stack-fix.patch;  export ac_cv_func_isnan=yes ac_cv_func_isinf=yes;  { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } > file.c.new; mv file.c.new file.c;  autoconf; apkArch="$(apk --print-arch)"; case "$apkArch" in s390x | armhf | armv7) apk add --no-cache libucontext-dev; export LIBS='-lucontext'; ;; esac; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --disable-install-doc --enable-shared ; make -j "$(nproc)"; make install;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .ruby-rundeps $runDeps; apk del --no-network .ruby-builddeps;  cd /; rm -r /usr/src/ruby; if apk --no-network list --installed | grep -v '^[.]ruby-rundeps' | grep -i ruby ; then exit 1; fi; [ "$(command -v ruby)" = '/usr/local/bin/ruby' ]; ruby --version; gem --version; bundle --version 3
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends bison dpkg-dev libgdbm-dev ruby ; rm -rf /var/lib/apt/lists/*;  wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"; echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum --check --strict;  mkdir -p /usr/src/ruby; tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1; rm ruby.tar.xz;  cd /usr/src/ruby;  { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } > file.c.new; mv file.c.new file.c;  autoconf; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --disable-install-doc --enable-shared ; make -j "$(nproc)"; make install;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark > /dev/null; find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | grep -vE '^/usr/local/lib/' | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  cd /; rm -r /usr/src/ruby; if dpkg -l | grep -i ruby; then exit 1; fi; [ "$(command -v ruby)" = '/usr/local/bin/ruby' ]; ruby --version; gem --version; bundle --version 3
apt-get update && apt-get install -qq -y --no-install-recommends autoconf ca-certificates cpio curl file git libasound2-dev libcups2-dev libelf-dev libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev libxtst-dev make python3 python3-pip unzip wget zip 3
apt-get update && apt-get install -y --no-install-recommends ca-certificates gnupg2 && rm -rf /var/lib/apt/lists/* 3
echo "https://download.swift.org/swift-5.7-branch/latest-build.yml" 3
yum update -y && yum install -y curl freetype-devel gcc gcc-c++ git hdf5-devel java-1.8.0-openjdk java-1.8.0-openjdk-devel java-1.8.0-openjdk-headless libcurl-devel make pkg-config rsync  unzip zeromq-devel zip zlib-devel && yum clean all 3
test "0" -eq 1 && git clone https://github.com/tensorflow/tensorflow.git --branch "master" --single-branch /tensorflow_src || true 3
yum update -y && yum install -y python3 python3-pip which && yum clean all 3
ln -sf $(which python3) /usr/local/bin/python && ln -sf $(which python3) /usr/local/bin/python3 && ln -sf $(which python3) /usr/bin/python 3
mkdir /bazel && curl -fSsL -o /bazel/installer.sh "https://github.com/bazelbuild/bazel/releases/download/3.7.2/bazel-3.7.2-installer-linux-x86_64.sh" && curl -fSsL -o /bazel/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE" && bash /bazel/installer.sh && rm -f /bazel/installer.sh 3
python3 -m pip install --no-cache-dir jupyter_http_over_ws ipykernel==5.1.1 nbformat==4.4.0 3
mkdir -p /tf/ && chmod -R a+rwx /tf/ 3
npm i -g npm@7.20.0 3
npm --prefix plugins install 3
npm --prefix plugins run build 3
npm --prefix plugins prune --production 3
apk --no-cache add ca-certificates tzdata 3
apt update && apt install -y bash build-essential git curl ca-certificates python3 python3-pip && rm -rf /var/lib/apt/lists 3
cd transformers/ && python3 -m pip install --no-cache-dir . 3
apk add bash 3
adduser -D -s /bin/sh jhipster 3
chmod 755 entrypoint.sh && chown jhipster:jhipster entrypoint.sh 3
mkdir /typescript 3
tar -xzvf /typescript.tgz -C /typescript 3
bash install.sh local /opt/uptime-kuma 3000 0.0.0.0 3
set -eux; apk add --no-cache bash ghostscript imagemagick ; 3
set -ex;  apk add --no-cache --virtual .build-deps $PHPIZE_DEPS freetype-dev icu-dev imagemagick-dev libjpeg-turbo-dev libpng-dev libwebp-dev libzip-dev ;  docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp ; docker-php-ext-install -j "$(nproc)" bcmath exif gd intl mysqli zip ; pecl install imagick-3.6.0; docker-php-ext-enable imagick; rm -r /tmp/pear;  out="$(php -r 'exit(0);')"; [ -z "$out" ]; err="$(php -r 'exit(0);' 3>&1 1>&2 2>&3)"; [ -z "$err" ];  extDir="$(php -r 'echo ini_get("extension_dir");')"; [ -d "$extDir" ]; runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive "$extDir" | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .wordpress-phpexts-rundeps $runDeps; apk del --no-network .build-deps;  ! { ldd "$extDir"/*.so | grep 'not found'; }; err="$(php --version 3>&1 1>&2 2>&3)"; [ -z "$err" ] 3
set -eux; apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates dirmngr gosu gnupg netcat wget; rm -rf /var/lib/apt/lists/*; gosu nobody true 3
sed -i "s|{{\preview.localhost}}|preview.localhost|g" /etc/dnsmasq.conf 2
apt-get update && apt-get install -y git 2
mvn install 2
jar -xf ../*.jar 2
mvn --batch-mode clean compile assembly:single 2
mkdir -p $APPDIR 2
cat /etc/nginx/conf.d/default.conf 2
apt-get update && apt-get install -y libzip-dev libonig-dev libpng-dev libjpeg-dev libpq-dev && rm -rf /var/lib/apt/lists/* && docker-php-ext-configure gd --with-jpeg=/usr && docker-php-ext-install gd mbstring pdo pdo_mysql pdo_pgsql zip 2
curl -fSL "https://github.com/backdrop/backdrop/archive/${BACKDROP_VERSION}.tar.gz" -o backdrop.tar.gz && echo "${BACKDROP_MD5} *backdrop.tar.gz" | md5sum -c - && tar -xz --strip-components=1 -f backdrop.tar.gz && rm backdrop.tar.gz && chown -R www-data:www-data sites 2
apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev python3 build-essential && rm -rf /var/lib/apt/lists/* && yarn config set python /usr/bin/python3 2
tar xzf skeleton.tar.gz && rm skeleton.tar.gz 2
yarn install --frozen-lockfile --production --network-timeout 300000 && rm -rf "$(yarn cache dir)" 2
tar xzf bundle.tar.gz && rm bundle.tar.gz 2
gem install --no-ri --no-rdoc fpm 2
npm i -g pkg@4.4.6 2
git config --global user.email 'stats@localhost' 2
git config --global user.name 'next stats' 2
apt install apache2-utils -y 2
apt-get install unzip libaio1 2
/bin/bash -e scripts/integrations/oracle/instantclient/linux/x86-64/install.sh 2
yarn global add pm2 2
set -eux;  setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 ';  unsetConfs=' CONFIG_FEATURE_SYNC_FANCY ';  make defconfig;  for conf in $unsetConfs; do sed -i -e "s!^$conf=.*\$!# $conf is not set!" .config; done;  for confV in $setConfs; do conf="${confV%=*}"; sed -i -e "s!^$conf=.*\$!$confV!" -e "s!^# $conf is not set\$!$confV!" .config; if ! grep -q "^$confV\$" .config; then echo "$confV" >> .config; fi; done;  make oldconfig;  for conf in $unsetConfs; do ! grep -q "^$conf=" .config; done; for confV in $setConfs; do grep -q "^$confV\$" .config; done 2
set -eux; nproc="$(nproc)"; make -j "$nproc" busybox; ./busybox --help; mkdir -p rootfs/bin; ln -vL busybox rootfs/bin/;  getconf="$(which getconf)"; ln -vL "$getconf" rootfs/bin/getconf;  mkdir -p rootfs/etc; cp /etc/nsswitch.conf rootfs/etc/; mkdir -p rootfs/lib; ln -sT lib rootfs/lib64; gccMultiarch="$(gcc -print-multiarch)"; set -- rootfs/bin/busybox rootfs/bin/getconf /lib/"$gccMultiarch"/libnss*.so.* /lib/"$gccMultiarch"/libpthread*.so.* ; while [ "$#" -gt 0 ]; do f="$1"; shift; fn="$(basename "$f")"; if [ -e "rootfs/lib/$fn" ]; then continue; fi; if [ "${f#rootfs/}" = "$f" ]; then if [ "${fn#ld-}" = "$fn" ]; then ln -vL "$f" "rootfs/lib/$fn"; else cp -v "$f" "rootfs/lib/$fn"; fi; fi; ldd="$(ldd "$f" | awk ' $1 ~ /^\// { print $1; next } $2 == "=>" && $3 ~ /^\// { print $3; next } ')"; set -- "$@" $ldd; done; chroot rootfs /bin/getconf _NPROCESSORS_ONLN;  chroot rootfs /bin/busybox --install /bin 2
set -eux; apk add --no-cache bzip2 coreutils curl gcc gnupg linux-headers make musl-dev patch tzdata ; 2
set -eux;  setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 CONFIG_STATIC=y ';  unsetConfs=' CONFIG_FEATURE_SYNC_FANCY  CONFIG_FEATURE_HAVE_RPC CONFIG_FEATURE_INETD_RPC CONFIG_FEATURE_UTMP CONFIG_FEATURE_WTMP ';  make defconfig;  for conf in $unsetConfs; do sed -i -e "s!^$conf=.*\$!# $conf is not set!" .config; done;  for confV in $setConfs; do conf="${confV%=*}"; sed -i -e "s!^$conf=.*\$!$confV!" -e "s!^# $conf is not set\$!$confV!" .config; if ! grep -q "^$confV\$" .config; then echo "$confV" >> .config; fi; done;  make oldconfig;  for conf in $unsetConfs; do ! grep -q "^$conf=" .config; done; for confV in $setConfs; do grep -q "^$confV\$" .config; done 2
set -eux; nproc="$(nproc)"; make -j "$nproc" busybox; ./busybox --help; mkdir -p rootfs/bin; ln -vL busybox rootfs/bin/;  aportsVersion="v$(cat /etc/alpine-release)"; curl -fsSL "https://github.com/alpinelinux/aports/raw/$aportsVersion/main/musl/getconf.c" -o /usr/src/getconf.c ; gcc -o rootfs/bin/getconf -static -Os /usr/src/getconf.c; chroot rootfs /bin/getconf _NPROCESSORS_ONLN;  chroot rootfs /bin/busybox --install /bin 2
set -eux; apt-get update; apt-get install -y bc cpio dpkg-dev file g++ perl python3 rsync unzip wget ; rm -rf /var/lib/apt/lists/* 2
gpg --batch --keyserver keyserver.ubuntu.com --recv-keys AB07D806D2CE741FB886EE50B025BA8B59C36319 2
set -eux; tarball="buildroot-${BUILDROOT_VERSION}.tar.xz"; curl -fL -o buildroot.tar.xz "https://buildroot.org/downloads/$tarball"; curl -fL -o buildroot.tar.xz.sign "https://buildroot.org/downloads/$tarball.sign"; gpg --batch --decrypt --output buildroot.tar.xz.txt buildroot.tar.xz.sign; awk '$1 == "SHA1:" && $2 ~ /^[0-9a-f]+$/ && $3 == "'"$tarball"'" { print $2, "*buildroot.tar.xz" }' buildroot.tar.xz.txt > buildroot.tar.xz.sha1; test -s buildroot.tar.xz.sha1; sha1sum -c buildroot.tar.xz.sha1; mkdir -p /usr/src/buildroot; tar -xf buildroot.tar.xz -C /usr/src/buildroot --strip-components 1; rm buildroot.tar.xz* 2
set -eux;  cd /usr/src/buildroot;  setConfs=' BR2_STATIC_LIBS=y BR2_TOOLCHAIN_BUILDROOT_UCLIBC=y BR2_TOOLCHAIN_BUILDROOT_WCHAR=y ';  unsetConfs=' BR2_SHARED_LIBS ';  dpkgArch="$(dpkg --print-architecture)"; case "$dpkgArch" in amd64) setConfs="$setConfs BR2_x86_64=y "; ;;  arm64) setConfs="$setConfs BR2_aarch64=y "; ;;  armel) setConfs="$setConfs BR2_arm=y BR2_arm926t=y BR2_ARM_EABI=y BR2_ARM_INSTRUCTIONS_THUMB=y BR2_ARM_SOFT_FLOAT=y "; ;;  armhf) setConfs="$setConfs BR2_arm=y BR2_cortex_a9=y BR2_ARM_EABIHF=y BR2_ARM_ENABLE_VFP=y BR2_ARM_FPU_VFPV3D16=y BR2_ARM_INSTRUCTIONS_THUMB2=y "; unsetConfs="$unsetConfs BR2_ARM_SOFT_FLOAT"; ;;  i386) setConfs="$setConfs BR2_i386=y "; ;;  mips64el) setConfs="$setConfs BR2_mips64el=y BR2_mips_64r2=y BR2_MIPS_NABI64=y "; unsetConfs="$unsetConfs BR2_MIPS_SOFT_FLOAT "; ;;   riscv64) setConfs="$setConfs BR2_riscv=y BR2_RISCV_64=y "; ;;   *) echo >&2 "error: unsupported architecture '$dpkgArch'!"; exit 1; ;; esac; if [ "$dpkgArch" != 'i386' ]; then unsetConfs="$unsetConfs BR2_i386"; fi;  make defconfig;  for conf in $unsetConfs; do sed -i -e "s!^$conf=.*\$!# $conf is not set!" .config; done;  for confV in $setConfs; do conf="${confV%=*}"; sed -i -e "s!^$conf=.*\$!$confV!" -e "s!^# $conf is not set\$!$confV!" .config; if ! grep -q "^$confV\$" .config; then echo "$confV" >> .config; fi; done;  make oldconfig;  for conf in $unsetConfs; do ! grep -q "^$conf=" .config; done; for confV in $setConfs; do grep -q "^$confV\$" .config; done; 2
set -eux; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; make -C /usr/src/buildroot HOST_GMP_CONF_OPTS="--build='"$gnuArch"'" FORCE_UNSAFE_CONFIGURE=1 -j "$(nproc)" toolchain 2
set -eux;  setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 CONFIG_STATIC=y ';  unsetConfs=' CONFIG_FEATURE_SYNC_FANCY ';  make defconfig;  for conf in $unsetConfs; do sed -i -e "s!^$conf=.*\$!# $conf is not set!" .config; done;  for confV in $setConfs; do conf="${confV%=*}"; sed -i -e "s!^$conf=.*\$!$confV!" -e "s!^# $conf is not set\$!$confV!" .config; if ! grep -q "^$confV\$" .config; then echo "$confV" >> .config; fi; done;  make oldconfig;  for conf in $unsetConfs; do ! grep -q "^$conf=" .config; done; for confV in $setConfs; do grep -q "^$confV\$" .config; done 2
set -eux; nproc="$(nproc)"; CROSS_COMPILE="$(basename /usr/src/buildroot/output/host/usr/*-buildroot-linux-uclibc*)"; export CROSS_COMPILE="$CROSS_COMPILE-"; make -j "$nproc" busybox; ./busybox --help; mkdir -p rootfs/bin; ln -vL busybox rootfs/bin/;  ln -vL ../buildroot/output/target/usr/bin/getconf rootfs/bin/; chroot rootfs /bin/getconf _NPROCESSORS_ONLN;  chroot rootfs /bin/busybox --install /bin 2
set -eux; mkdir -p rootfs/etc; ln -vL ../buildroot/system/skeleton/etc/group ../buildroot/system/skeleton/etc/passwd ../buildroot/system/skeleton/etc/shadow rootfs/etc/ ; grep -E '^root::' rootfs/etc/shadow; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; grep -E '^root:[*]:' rootfs/etc/shadow; awk ' !/^#/ { if ($2 != "d" && $2 != "f") { printf "error: unknown type \"%s\" encountered in line %d: %s\n", $2, NR, $0 > "/dev/stderr"; exit 1; } sub(/^\/?/, "rootfs/", $1); if ($2 == "d") { printf "mkdir -p %s\n", $1; } printf "chmod %s %s\n", $3, $1; } ' ../buildroot/system/device_table.txt | sh -eux 2
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf 2
apt-get update && apt-get install -y --no-install-recommends build-essential cmake git wget libatlas-base-dev libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler python-dev python-numpy python-pip python-setuptools python-scipy && rm -rf /var/lib/apt/lists/* 2
echo "/opt/caffe/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig 2
set -eux; apt-get update; apt-get install -y --no-install-recommends libjemalloc2 procps python iproute2 numactl ; rm -rf /var/lib/apt/lists/*; libjemalloc="$(readlink -e /usr/lib/*/libjemalloc.so.2)"; ln -sT "$libjemalloc" /usr/local/lib/libjemalloc.so; ldconfig 2
curl -sL https://deb.nodesource.com/setup_14.x | bash - 2
pip3 install --upgrade setuptools 2
composer install 2
if [[ "${RANKMIRRORS}" ]]; then { pacman -Sy wget --noconfirm || pacman -Syu wget --noconfirm ; } ; wget -O ./rankmirrors "https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/rankmirrors" ; wget -O- "https://www.archlinux.org/mirrorlist/?country=${MIRROR_COUNTRY:-US}&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | head -n "$((${MIRROR_COUNT:-10}+1))" | bash ./rankmirrors --verbose --max-time 5 - > /etc/pacman.d/mirrorlist && tee -a /etc/pacman.d/mirrorlist <<< 'Server = http://mirrors.evowise.com/archlinux/$repo/os/$arch' && tee -a /etc/pacman.d/mirrorlist <<< 'Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch' && tee -a /etc/pacman.d/mirrorlist <<< 'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch' && cat /etc/pacman.d/mirrorlist ; fi 2
yes |  pacman -Syyuu --noconfirm && yes |  pacman -S tigervnc xterm xorg-xhost xdotool ufw --noconfirm && mkdir -p ${HOME}/.vnc && touch ~/.vnc/config && tee -a ~/.vnc/config <<< 'geometry=1920x1080' && tee -a ~/.vnc/config <<< 'localhost' && tee -a ~/.vnc/config <<< 'alwaysshared' 2
printf '\n%s\n' ' rm -f /tmp/.X99-lock' 'export DISPLAY=:99' '/usr/bin/Xvnc -geometry 1920x1080 -rfbauth "${HOME}/.vnc/passwd" :99 &' > vnc.sh 2
cat vnc.sh Launch.sh > Launch_custom.sh 2
chmod +x Launch_custom.sh 2
tee vncpasswd_file <<< "${VNC_PASSWORD:="$(tr -dc '[:graph:]' </dev/urandom | head -c8)"}" 2
vncpasswd -f < vncpasswd_file > ${HOME}/.vnc/passwd 2
chmod 600 ~/.vnc/passwd 2
printf '\n\n\n\n%s\n%s\n\n\n\n' '===========VNC_PASSWORD========== ' "$(<vncpasswd_file)" 2
apk add --no-cache ca-certificates tzdata 2
pip3 install numpy scipy pandas Jinja2 2
mkdir -p /tmp/clickhouse-odbc-tmp && wget -nv -O - https://github.com/ClickHouse/clickhouse-odbc/releases/download/v1.1.4.20200302/clickhouse-odbc-1.1.4-Linux.tar.gz | tar --strip-components=1 -xz -C /tmp/clickhouse-odbc-tmp && cp /tmp/clickhouse-odbc-tmp/lib64/*.so /usr/local/lib/ && odbcinst -i -d -f /tmp/clickhouse-odbc-tmp/share/doc/clickhouse-odbc/config/odbcinst.ini.sample && odbcinst -i -s -l -f /tmp/clickhouse-odbc-tmp/share/doc/clickhouse-odbc/config/odbc.ini.sample && rm -rf /tmp/clickhouse-odbc-tmp 2
apt-get update && apt-get install bash fakeroot ccache curl software-properties-common --yes --no-install-recommends 2
arch=${TARGETARCH:-amd64} && curl -Lo /usr/bin/dpkg-deb https://github.com/ClickHouse-Extras/dpkg/releases/download/1.21.1-clickhouse/dpkg-deb-${arch} 2
ln -s /usr/bin/lld-14 /usr/bin/ld.lld 2
make test 2
apt-get install -y nodejs 2
addgroup consul && adduser -S -G consul consul 2
mkdir -p /consul/data && mkdir -p /consul/config && chown -R consul /consul && chgrp -R 0 /consul && chmod -R g+rwX /consul 2
mkdir -p "$CATALINA_HOME" 2
apt-get update -y && apt-get install -y --no-install-recommends ca-certificates curl dirmngr gnupg  unzip && rm -rf /var/lib/apt/lists/* 2
export GNUPGHOME="$(mktemp -d)" && ( gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GOSU_GPG_KEYS" || gpg --batch --keyserver pgp.mit.edu --recv-keys "$GOSU_GPG_KEYS" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$GOSU_GPG_KEYS" || gpg --batch --keyserver keyserver.pgp.com --recv-keys "$GOSU_GPG_KEYS" ) && curl -o /usr/local/bin/gosu -fSL "https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$(dpkg --print-architecture | awk -F- '{ print $NF }')" && curl -o /usr/local/bin/gosu.asc -fSL "https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$(dpkg --print-architecture | awk -F- '{ print $NF }').asc" && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && rm /usr/local/bin/gosu.asc && chmod +x /usr/local/bin/gosu && ( gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$TINI_GPG_KEYS" || gpg --batch --keyserver pgp.mit.edu --recv-keys "$TINI_GPG_KEYS" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$TINI_GPG_KEYS" || gpg --batch --keyserver keyserver.pgp.com --recv-keys "$TINI_GPG_KEYS" ) && curl -o /usr/local/bin/tini -fSL "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$(dpkg --print-architecture | awk -F- '{ print $NF }')" && curl -o /usr/local/bin/tini.asc -fSL "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$(dpkg --print-architecture | awk -F- '{ print $NF }').asc" && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini && rm /usr/local/bin/tini.asc && chmod +x /usr/local/bin/tini && rm -rf /tmp/* 2
useradd -s /bin/false -m convertigo && mkdir -p /workspace/lib /workspace/classes && chown -R convertigo:convertigo /workspace && echo "convertigo ALL=(ALL) NOPASSWD: ALL" > /etc/ers.d/convertigo && chmod 0440 /etc/ers.d/convertigo 2
sed -i.bak -e '/protocol="AJP/d' -e '/AprLifecycleListener/d' -e '/JasperListener/d' -e 's/port="8080"/port="28080" maxThreads="64000" relaxedQueryChars="{}[]|"/' -e 's,</Host>,  <Valve className="org.apache.catalina.valves.RemoteIpValve" />\n      </Host>,' conf/server.xml && sed -i.bak -e 's,<Context>,<Context sessionCookiePath="/">,' -e 's,</Context>,<Manager pathname="" /><CookieProcessor sameSiteCookies="unset" /></Context>,' conf/context.xml && rm -rf webapps/* bin/*.bat conf/server.xml.bak /tmp/* && mkdir webapps/ROOT && chown -R convertigo:convertigo conf temp work logs && chmod -w conf/* 2
export GNUPGHOME="$(mktemp -d)" && ( gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$CONVERTIGO_GPG_KEYS" || gpg --batch --keyserver pgp.mit.edu --recv-keys "$CONVERTIGO_GPG_KEYS" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$CONVERTIGO_GPG_KEYS" || gpg --batch --keyserver keyserver.pgp.com --recv-keys "$CONVERTIGO_GPG_KEYS" ) && curl -fSL -o /tmp/convertigo.war $CONVERTIGO_WAR_URL && curl -fSL -o /tmp/convertigo.war.asc $CONVERTIGO_WAR_URL.asc && gpg --batch --verify /tmp/convertigo.war.asc /tmp/convertigo.war && mkdir -p webapps/ROOT webapps/convertigo && (cd webapps/convertigo && unzip -q /tmp/convertigo.war && (chmod -f a+x WEB-INF/xvnc/* || true) && (test "$(dpkg --print-architecture)" != "i386" && rm -rf WEB-INF/xulrunner WEB-INF/xvnc WEB-INF/lib/swt_* || true) && rm -rf /tmp/*) 2
set -eux; apt-get update;  echo "couchdb couchdb/mode select none" | debconf-set-selections; DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades --allow-remove-essential --allow-change-held-packages couchdb="$COUCHDB_VERSION"~bullseye ; rmdir /var/lib/couchdb /var/log/couchdb; rm /opt/couchdb/data /opt/couchdb/var/log; mkdir -p /opt/couchdb/data /opt/couchdb/var/log; chown couchdb:couchdb /opt/couchdb/data /opt/couchdb/var/log; chmod 777 /opt/couchdb/data /opt/couchdb/var/log; rm /opt/couchdb/etc/default.d/10-filelog.ini; find /opt/couchdb \! \( -user couchdb -group couchdb \) -exec chown -f couchdb:couchdb '{}' +; find /opt/couchdb/etc -type d ! -perm 0755 -exec chmod -f 0755 '{}' +; find /opt/couchdb/etc -type f ! -perm 0644 -exec chmod -f 0644 '{}' +; chmod -f 0777 /opt/couchdb/etc/local.d; rm -rf /var/lib/apt/lists/*; 2
set -xe; microdnf update -y && rm -rf /var/cache/yum && microdnf install -y unzip wget && wget https://github.com/cloudant-labs/clouseau/releases/download/2.17.0/clouseau-2.17.0-dist.zip && unzip clouseau-2.17.0-dist.zip && microdnf clean all; rm -rf /var/cache/yum 2
set -ex; microdnf update -y && rm -rf /var/cache/yum; microdnf install -y java-1.8.0-openjdk-headless ca-certificates gnupg findutils shadow-utils; useradd -u 5984 -d /opt/couchdb -g root couchdb; groupadd -g 5984 couchdb; microdnf update --disableplugin=subscription-manager -y && rm -rf /var/cache/yum; microdnf install --enablerepo=imeyer_runit -y runit; microdnf clean all; rm -rf /var/cache/yum 2
install -d -m 0755 -o couchdb -g 0 -p /opt/couchdb-search/etc /opt/couchdb-search/lib /opt/couchdb/data/search_indexes && find -L /opt/couchdb-search \! \( -user couchdb -group 0 \) -exec chown -f couchdb:0 '{}' +; find -L /opt/couchdb-search -type d ! -perm 0755 -exec chmod -f 0755 '{}' +; find -L /opt/couchdb-search -type f ! -perm 0644 -exec chmod -f 0644 '{}' +; 2
chmod -R 777 /etc/service/couchdb; chmod -R 777 /etc/service/couchdb-search; chmod 777 /usr/local/bin/docker-entrypoint.sh; ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh 2
set -ex; microdnf update --disableplugin=subscription-manager -y && rm -rf /var/cache/yum; microdnf install -y ca-certificates gnupg findutils shadow-utils; useradd -u 5984 -d /opt/couchdb -g root couchdb; groupadd -g 5984 couchdb; microdnf update --disableplugin=subscription-manager -y && rm -rf /var/cache/yum; microdnf install --enablerepo=imeyer_runit -y runit; microdnf clean all; rm -rf /var/cache/yum 2
set -xe; microdnf update --disableplugin=subscription-manager -y && rm -rf /var/cache/yum; microdnf install --enablerepo=couchdb -y couchdb-${COUCHDB_VERSION}; microdnf clean all; rm -rf /var/cache/yum; rm /opt/couchdb/etc/default.d/10-filelog.ini; find /opt/couchdb \! \( -user couchdb -group 0 \) -exec chown -f couchdb:0 '{}' +; find /opt/couchdb/etc -type d ! -perm 0775 -exec chmod -f 0775 '{}' +; find /opt/couchdb/etc -type f ! -perm 0664 -exec chmod -f 0664 '{}' +; chmod 777 /opt/couchdb/data 2
chmod -R 777 /etc/service/couchdb; chmod 777 /usr/local/bin/docker-entrypoint.sh; ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh 2
docker-php-ext-enable gettext redis igbinary msgpack apcu imagick yaml memcached xdebug zephir_parser 2
update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 100 2
update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 100 2
make build 2
apk --no-cache add ca-certificates 2
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates curl dnsutils git openssh-client unzip ; rm -rf /var/lib/apt/lists/* 2
set -eux; case "$(dpkg --print-architecture)" in amd64) TRIPLET="x86_64-linux-gnu" ; FILES="/lib64/ld-linux-x86-64.so.2" ;; armhf) TRIPLET="arm-linux-gnueabihf" ; FILES="/lib/ld-linux-armhf.so.3 /lib/arm-linux-gnueabihf/ld-linux-armhf.so.3";; arm64) TRIPLET="aarch64-linux-gnu" ; FILES="/lib/ld-linux-aarch64.so.1 /lib/aarch64-linux-gnu/ld-linux-aarch64.so.1" ;; *) echo "Unsupported architecture" ; exit 5;; esac; FILES="$FILES /etc/nsswitch.conf /etc/ssl/certs /usr/share/ca-certificates /lib/$TRIPLET/libc.so.6 /lib/$TRIPLET/libdl.so.2 /lib/$TRIPLET/libm.so.6 /lib/$TRIPLET/libnss_dns.so.2 /lib/$TRIPLET/libpthread.so.0 /lib/$TRIPLET/libresolv.so.2 /lib/$TRIPLET/librt.so.1"; for f in $FILES; do dir=$(dirname "$f"); mkdir -p "/runtime$dir"; cp --archive --link --dereference --no-target-directory "$f" "/runtime$f"; done 2
chmod +x /build.sh 2
mkdir -p /diem/move 2
mkdir -p /opt/diem/bin /opt/diem/etc 2
mkdir /diem 2
apt-get update && apt-get install -y libssl1.1 openssh-client wget && apt-get clean && rm -r /var/lib/apt/lists/* 2
apt-get update && apt-get install -y libssl1.1 && apt-get clean && rm -r /var/lib/apt/lists/* 2
addgroup --system --gid 6180 diem && adduser --system --ingroup diem --no-create-home --uid 6180 diem 2
set -ex; apk add --no-cache --virtual .fetch-deps gnupg ;  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 08656443618E6567A39524083EE197EF3F9E4287;  curl -fsSL -o friendica-full-${FRIENDICA_VERSION}.tar.gz "https://files.friendi.ca/friendica-full-${FRIENDICA_VERSION}.tar.gz"; curl -fsSL -o friendica-full-${FRIENDICA_VERSION}.tar.gz.asc "https://files.friendi.ca/friendica-full-${FRIENDICA_VERSION}.tar.gz.asc"; gpg --batch --verify friendica-full-${FRIENDICA_VERSION}.tar.gz.asc friendica-full-${FRIENDICA_VERSION}.tar.gz; echo "${FRIENDICA_DOWNLOAD_SHA256} *friendica-full-${FRIENDICA_VERSION}.tar.gz" | sha256sum -c; tar -xzf friendica-full-${FRIENDICA_VERSION}.tar.gz -C /usr/src/; rm friendica-full-${FRIENDICA_VERSION}.tar.gz friendica-full-${FRIENDICA_VERSION}.tar.gz.asc; mv -f /usr/src/friendica-full-${FRIENDICA_VERSION}/ /usr/src/friendica; chmod 777 /usr/src/friendica/view/smarty3;  curl -fsSL -o friendica-addons-${FRIENDICA_ADDONS}.tar.gz "https://files.friendi.ca/friendica-addons-${FRIENDICA_ADDONS}.tar.gz"; curl -fsSL -o friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc "https://files.friendi.ca/friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc"; gpg --batch --verify friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc friendica-addons-${FRIENDICA_ADDONS}.tar.gz; echo "${FRIENDICA_DOWNLOAD_ADDONS_SHA256} *friendica-addons-${FRIENDICA_ADDONS}.tar.gz" | sha256sum -c; mkdir -p /usr/src/friendica/proxy; mkdir -p /usr/src/friendica/addon; tar -xzf friendica-addons-${FRIENDICA_ADDONS}.tar.gz -C /usr/src/friendica/addon --strip-components=1; rm friendica-addons-${FRIENDICA_ADDONS}.tar.gz friendica-addons-${FRIENDICA_ADDONS}.tar.gz.asc;  gpgconf --kill all; rm -rf "$GNUPGHOME";  apk del .fetch-deps 2
set -ex; fetchDeps=" gnupg "; apt-get update; apt-get install -y --no-install-recommends $fetchDeps; 2
echo "upload_max_filesize = 128M" >> /usr/local/etc/php/conf.d/0-upload_large_dumps.ini && echo "post_max_size = 128M" >> /usr/local/etc/php/conf.d/0-upload_large_dumps.ini && echo "memory_limit = 1G" >> /usr/local/etc/php/conf.d/0-upload_large_dumps.ini && echo "max_execution_time = 600" >> /usr/local/etc/php/conf.d/0-upload_large_dumps.ini && echo "max_input_vars = 5000" >> /usr/local/etc/php/conf.d/0-upload_large_dumps.ini 2
addgroup -S adminer && adduser -S -G adminer adminer && mkdir -p /var/www/html && mkdir /var/www/html/plugins-enabled && chown -R adminer:adminer /var/www/html 2
set -x && apk add --no-cache --virtual .build-deps postgresql-dev sqlite-dev unixodbc-dev freetds-dev && docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr && docker-php-ext-install mysqli pdo_pgsql pdo_sqlite pdo_odbc pdo_dblib && runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )" && apk add --virtual .phpexts-rundeps $runDeps && apk del --no-network .build-deps 2
set -x && apk add --no-cache --virtual .build-deps git && curl -fsSL "https://github.com/vrana/adminer/releases/download/v$ADMINER_VERSION/adminer-$ADMINER_VERSION.php" -o adminer.php && echo "$ADMINER_DOWNLOAD_SHA256  adminer.php" |sha256sum -c - && git clone --recurse-submodules=designs --depth 1 --shallow-submodules --branch "v$ADMINER_VERSION" https://github.com/vrana/adminer.git /tmp/adminer && commit="$(git -C /tmp/adminer/ rev-parse HEAD)" && [ "$commit" = "$ADMINER_COMMIT" ] && cp -r /tmp/adminer/designs/ /tmp/adminer/plugins/ . && rm -rf /tmp/adminer/ && apk del --no-network  .build-deps 2
apk add --no-cache curl bash make git && wget https://download.clojure.org/install/linux-install-1.11.1.1113.sh && sha256sum linux-install-1.11.1.1113.sh && echo "7677bb1179ebb15ebf954a87bd1078f1c547673d946dadafd23ece8cd61f5a9f *linux-install-1.11.1.1113.sh" | sha256sum -c - && chmod +x linux-install-1.11.1.1113.sh && ./linux-install-1.11.1.1113.sh && rm linux-install-1.11.1.1113.sh && clojure -e "(clojure-version)" && apk del curl 2
set -eux; apk add --no-cache ca-certificates bash tar openssl gnupg && mkdir -p /usr/local/bin/ && wget -q https://raw.githubusercontent.com/technomancy/leiningen/2.9.8/bin/lein-pkg && echo "Comparing lein-pkg checksum ..." && sha256sum lein-pkg && echo "9952cba539cc6454c3b7385ebce57577087bf2b9001c3ab5c55d668d0aeff6e9 *lein-pkg" | sha256sum -c - && mv lein-pkg /usr/local/bin//lein && chmod 0755 /usr/local/bin//lein && export GNUPGHOME="$(mktemp -d)" && export FILENAME_EXT=jar && if printf '%s\n%s\n' "2.9.7" "2.9.8" | sort -cV; then gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys 6A2D483DB59437EBB97D09B1040193357D0606ED; else gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys 20242BACBBE95ADA22D0AFD7808A33D379C806C3; FILENAME_EXT=zip; fi && wget -q https://github.com/technomancy/leiningen/releases/download/2.9.8/leiningen-2.9.8-standalone.$FILENAME_EXT && wget -q https://github.com/technomancy/leiningen/releases/download/2.9.8/leiningen-2.9.8-standalone.$FILENAME_EXT.asc && echo "Verifying file PGP signature..." && gpg --batch --verify leiningen-2.9.8-standalone.$FILENAME_EXT.asc leiningen-2.9.8-standalone.$FILENAME_EXT && gpgconf --kill all && rm -rf "$GNUPGHOME" leiningen-2.9.8-standalone.$FILENAME_EXT.asc && mkdir -p /usr/share/java && mv leiningen-2.9.8-standalone.$FILENAME_EXT /usr/share/java/leiningen-2.9.8-standalone.jar && apk del ca-certificates tar openssl gnupg 2
apk add --no-cache bash openssl && mkdir -p /usr/local/bin/ && wget -q https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh && echo "Comparing installer checksum..." && sha256sum boot.sh && echo "0ccd697f2027e7e1cd3be3d62721057cbc841585740d0aaa9fbb485d7b1f17c3 *boot.sh" | sha256sum -c - && mv boot.sh /usr/local/bin//boot && chmod 0755 /usr/local/bin//boot && apk del openssl 2
set -eux; apt-get update && apt-get install -y make gnupg wget && rm -rf /var/lib/apt/lists/* && mkdir -p /usr/local/bin/ && wget -q https://raw.githubusercontent.com/technomancy/leiningen/2.9.8/bin/lein-pkg && echo "Comparing lein-pkg checksum ..." && sha256sum lein-pkg && echo "9952cba539cc6454c3b7385ebce57577087bf2b9001c3ab5c55d668d0aeff6e9 *lein-pkg" | sha256sum -c - && mv lein-pkg /usr/local/bin//lein && chmod 0755 /usr/local/bin//lein && export GNUPGHOME="$(mktemp -d)" && export FILENAME_EXT=jar && if printf '%s\n%s\n' "2.9.7" "2.9.8" | sort -cV; then gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys 6A2D483DB59437EBB97D09B1040193357D0606ED; else gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys 20242BACBBE95ADA22D0AFD7808A33D379C806C3; FILENAME_EXT=zip; fi && wget -q https://github.com/technomancy/leiningen/releases/download/2.9.8/leiningen-2.9.8-standalone.$FILENAME_EXT && wget -q https://github.com/technomancy/leiningen/releases/download/2.9.8/leiningen-2.9.8-standalone.$FILENAME_EXT.asc && echo "Verifying file PGP signature..." && gpg --batch --verify leiningen-2.9.8-standalone.$FILENAME_EXT.asc leiningen-2.9.8-standalone.$FILENAME_EXT && gpgconf --kill all && rm -rf "$GNUPGHOME" leiningen-2.9.8-standalone.$FILENAME_EXT.asc && mkdir -p /usr/share/java && mv leiningen-2.9.8-standalone.$FILENAME_EXT /usr/share/java/leiningen-2.9.8-standalone.jar && apt-get purge -y --auto-remove gnupg wget 2
apt-get update && apt-get install -y wget && rm -rf /var/lib/apt/lists/* && mkdir -p /usr/local/bin/ && wget -q https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh && echo "Comparing installer checksum..." && sha256sum boot.sh && echo "0ccd697f2027e7e1cd3be3d62721057cbc841585740d0aaa9fbb485d7b1f17c3 *boot.sh" | sha256sum -c - && mv boot.sh /usr/local/bin//boot && chmod 0755 /usr/local/bin//boot && apt-get purge -y --auto-remove wget 2
apt-get update && apt-get install -y make git rlwrap wget && rm -rf /var/lib/apt/lists/* && wget https://download.clojure.org/install/linux-install-1.11.1.1113.sh && sha256sum linux-install-1.11.1.1113.sh && echo "7677bb1179ebb15ebf954a87bd1078f1c547673d946dadafd23ece8cd61f5a9f *linux-install-1.11.1.1113.sh" | sha256sum -c - && chmod +x linux-install-1.11.1.1113.sh && ./linux-install-1.11.1.1113.sh && rm linux-install-1.11.1.1113.sh && clojure -e "(clojure-version)" && apt-get purge -y --auto-remove wget 2
cd /var/lib/jetty/webapps/geonetwork/ && curl -fSL -o geonetwork.war https://sourceforge.net/projects/geonetwork/files/GeoNetwork_opensource/v${GN_VERSION}/${GN_FILE}/download && echo "${GN_DOWNLOAD_MD5} *geonetwork.war" | md5sum -c && unzip -q geonetwork.war && rm geonetwork.war 2
set -o errexit -o nounset && echo "Adding gradle user and group" && addgroup --system --gid 1000 gradle && adduser --system --ingroup gradle --uid 1000 --shell /bin/ash gradle && mkdir /home/gradle/.gradle && chown -R gradle:gradle /home/gradle  && echo "Symlinking root Gradle cache to gradle Gradle cache" && ln -s /home/gradle/.gradle /root/.gradle 2
set -o errexit -o nounset && echo "Installing VCSes" && apk add --no-cache git git-lfs mercurial subversion  && echo "Testing VCSes" && which git && which git-lfs && which hg && which svn 2
set -o errexit -o nounset && echo "Downloading Gradle" && wget --no-verbose --output-document=gradle.zip "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"  && echo "Checking download hash" && echo "29e49b10984e585d8118b7d0bc452f944e386458df27371b49b4ac1dec4b7fda *gradle.zip" | sha256sum -c -  && echo "Installing Gradle" && unzip gradle.zip && rm gradle.zip && mv "gradle-${GRADLE_VERSION}" "${GRADLE_HOME}/" && ln -s "${GRADLE_HOME}/bin/gradle" /usr/bin/gradle  && echo "Testing Gradle installation" && gradle --version 2
apt-get update && apt-get install -y --no-install-recommends libtinfo-dev && rm -rf /var/lib/apt/lists/* 2
addgroup --system neo4j && adduser --system --no-create-home --home "${NEO4J_HOME}" --ingroup neo4j neo4j 2
addgroup -g 1000 node && adduser -u 1000 -G node -s /bin/sh -D node && apk add --no-cache libstdc++ && apk add --no-cache --virtual .build-deps curl && ARCH= && alpineArch="$(apk --print-arch)" && case "${alpineArch##*-}" in x86_64) ARCH='x64' CHECKSUM="3acef00c21ca044a74710a56492c40d715ea5a707ce8629d6df2415f3cf89fec" ;; *) ;; esac && if [ -n "${CHECKSUM}" ]; then set -eu; curl -fsSLO --compressed "https://unofficial-builds.nodejs.org/download/release/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz"; echo "$CHECKSUM  node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" | sha256sum -c - && tar -xJf "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" -C /usr/local --strip-components=1 --no-same-owner && ln -s /usr/local/bin/node /usr/local/bin/nodejs; else echo "Building from source" && apk add --no-cache --virtual .build-deps-full binutils-gold g++ gcc gnupg libgcc linux-headers make python3 && for key in 4ED778F539E3634C779C87C6D7062848A1AB005C 141F07595B7B3FFE74309A937405533BE57C7D57 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 74F12602B6F1C4E913FAA37AD3A89613643B6201 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 61FC681DFB92A079F1685E77973F295594EC4689 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C DD8F2338BAE7501E3DD5AC78C273792F7D83545D A48C2BEE680E841632CD4E44F07496B3EB3C1762 108F52B48DB57BB0CC439B2997B01419BD92F80A B9E2F5981AA6E0CD28160D9FF13993A75599653C ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz" && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && grep " node-v$NODE_VERSION.tar.xz\$" SHASUMS256.txt | sha256sum -c - && tar -xf "node-v$NODE_VERSION.tar.xz" && cd "node-v$NODE_VERSION" && ./configure && make -j$(getconf _NPROCESSORS_ONLN) V= && make install && apk del .build-deps-full && cd .. && rm -Rf "node-v$NODE_VERSION" && rm "node-v$NODE_VERSION.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt; fi && rm -f "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" && apk del .build-deps && node --version && npm --version 2
addgroup -g 1000 node && adduser -u 1000 -G node -s /bin/sh -D node && apk add --no-cache libstdc++ && apk add --no-cache --virtual .build-deps curl && ARCH= && alpineArch="$(apk --print-arch)" && case "${alpineArch##*-}" in x86_64) ARCH='x64' CHECKSUM="db21043c8b2fe3e6dbca31de8b9e9fe42de2813a630f47ecf69922eadba40648" ;; *) ;; esac && if [ -n "${CHECKSUM}" ]; then set -eu; curl -fsSLO --compressed "https://unofficial-builds.nodejs.org/download/release/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz"; echo "$CHECKSUM  node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" | sha256sum -c - && tar -xJf "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" -C /usr/local --strip-components=1 --no-same-owner && ln -s /usr/local/bin/node /usr/local/bin/nodejs; else echo "Building from source" && apk add --no-cache --virtual .build-deps-full binutils-gold g++ gcc gnupg libgcc linux-headers make python3 && for key in 4ED778F539E3634C779C87C6D7062848A1AB005C 141F07595B7B3FFE74309A937405533BE57C7D57 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 74F12602B6F1C4E913FAA37AD3A89613643B6201 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 61FC681DFB92A079F1685E77973F295594EC4689 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C DD8F2338BAE7501E3DD5AC78C273792F7D83545D A48C2BEE680E841632CD4E44F07496B3EB3C1762 108F52B48DB57BB0CC439B2997B01419BD92F80A B9E2F5981AA6E0CD28160D9FF13993A75599653C ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz" && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && grep " node-v$NODE_VERSION.tar.xz\$" SHASUMS256.txt | sha256sum -c - && tar -xf "node-v$NODE_VERSION.tar.xz" && cd "node-v$NODE_VERSION" && ./configure && make -j$(getconf _NPROCESSORS_ONLN) V= && make install && apk del .build-deps-full && cd .. && rm -Rf "node-v$NODE_VERSION" && rm "node-v$NODE_VERSION.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt; fi && rm -f "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" && apk del .build-deps && node --version && npm --version 2
true && curl -SL https://www.cpan.org/src/5.0/perl-5.32.1.tar.xz -o perl-5.32.1.tar.xz && echo '57cc47c735c8300a8ce2fa0643507b44c4ae59012bfdad0121313db639e02309 *perl-5.32.1.tar.xz' | sha256sum -c - && tar --strip-components=1 -xaf perl-5.32.1.tar.xz -C /usr/src/perl && rm perl-5.32.1.tar.xz && cat *.patch | patch -p1 && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" && ./Configure -Darchname="$gnuArch" "$archFlag" -Dusethreads -Duseshrplib -Dvendorprefix=/usr/local  -des && make -j$(nproc) && TEST_JOBS=$(nproc) make test_harness && make install && cd /usr/src && curl -LO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz && echo '3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862 *App-cpanminus-1.7046.tar.gz' | sha256sum -c - && tar -xzf App-cpanminus-1.7046.tar.gz && cd App-cpanminus-1.7046 && perl bin/cpanm . && cd /root && cpanm IO::Socket::SSL && cd /usr/local/bin && curl -LO https://raw.githubusercontent.com/skaji/cpm/0.997011/cpm && chmod +x cpm && true && rm -fr ./cpanm /root/.cpanm /usr/src/perl /usr/src/App-cpanminus-1.7046* /tmp/* 2
apt-get update && apt-get install -y --no-install-recommends bzip2 ca-certificates curl dpkg-dev gcc libc6-dev make netbase patch zlib1g-dev xz-utils libssl-dev && curl -SL https://www.cpan.org/src/5.0/perl-5.32.1.tar.xz -o perl-5.32.1.tar.xz && echo '57cc47c735c8300a8ce2fa0643507b44c4ae59012bfdad0121313db639e02309 *perl-5.32.1.tar.xz' | sha256sum -c - && tar --strip-components=1 -xaf perl-5.32.1.tar.xz -C /usr/src/perl && rm perl-5.32.1.tar.xz && cat *.patch | patch -p1 && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" && ./Configure -Darchname="$gnuArch" "$archFlag" -Duseshrplib -Dvendorprefix=/usr/local  -des && make -j$(nproc) && TEST_JOBS=$(nproc) make test_harness && make install && cd /usr/src && curl -LO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz && echo '3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862 *App-cpanminus-1.7046.tar.gz' | sha256sum -c - && tar -xzf App-cpanminus-1.7046.tar.gz && cd App-cpanminus-1.7046 && perl bin/cpanm . && cd /root && cpanm IO::Socket::SSL && cd /usr/local/bin && curl -LO https://raw.githubusercontent.com/skaji/cpm/0.997011/cpm && chmod +x cpm && savedPackages="ca-certificates make netbase zlib1g-dev libssl-dev" && apt-mark auto '.*' > /dev/null && apt-mark manual $savedPackages && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && rm -fr /var/cache/apt/* /var/lib/apt/lists/* && rm -fr ./cpanm /root/.cpanm /usr/src/perl /usr/src/App-cpanminus-1.7046* /tmp/* 2
true && curl -SL https://www.cpan.org/src/5.0/perl-5.32.1.tar.xz -o perl-5.32.1.tar.xz && echo '57cc47c735c8300a8ce2fa0643507b44c4ae59012bfdad0121313db639e02309 *perl-5.32.1.tar.xz' | sha256sum -c - && tar --strip-components=1 -xaf perl-5.32.1.tar.xz -C /usr/src/perl && rm perl-5.32.1.tar.xz && cat *.patch | patch -p1 && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" && ./Configure -Darchname="$gnuArch" "$archFlag" -Duseshrplib -Dvendorprefix=/usr/local  -des && make -j$(nproc) && TEST_JOBS=$(nproc) make test_harness && make install && cd /usr/src && curl -LO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz && echo '3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862 *App-cpanminus-1.7046.tar.gz' | sha256sum -c - && tar -xzf App-cpanminus-1.7046.tar.gz && cd App-cpanminus-1.7046 && perl bin/cpanm . && cd /root && cpanm IO::Socket::SSL && cd /usr/local/bin && curl -LO https://raw.githubusercontent.com/skaji/cpm/0.997011/cpm && chmod +x cpm && true && rm -fr ./cpanm /root/.cpanm /usr/src/perl /usr/src/App-cpanminus-1.7046* /tmp/* 2
set -eux; apkArch="$(apk --print-arch)"; case "$apkArch" in x86_64) rustArch='x86_64-unknown-linux-musl'; rustupSha256='bdf022eb7cba403d0285bb62cbc47211f610caec24589a72af70e1e900663be9' ;; aarch64) rustArch='aarch64-unknown-linux-musl'; rustupSha256='89ce657fe41e83186f5a6cdca4e0fd40edab4fd41b0f9161ac6241d49fbdbbbe' ;; *) echo >&2 "unsupported architecture: $apkArch"; exit 1 ;; esac; url="https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init"; wget "$url"; echo "${rustupSha256} *rustup-init" | sha256sum -c -; chmod +x rustup-init; ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; rm rustup-init; chmod -R a+w /usr/local/rustup $CARGO_HOME; rustup --version; cargo --version; rustc --version; 2
set -eux; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='3dc5ef50861ee18657f9db2eeb7392f9c2a6c95c90ab41e45ab4ca71476b4338' ;; armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='67777ac3bc17277102f2ed73fd5f14c51f4ca5963adadf7f174adf4ebc38747b' ;; arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='32a1532f7cef072a667bac53f1a5542c99666c4071af0c9549795bbdb2069ec1' ;; i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='e50d1deb99048bc5782a0200aa33e4eea70747d49dffdc9d06812fd22a372515' ;; *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; esac; url="https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init"; wget "$url"; echo "${rustupSha256} *rustup-init" | sha256sum -c -; chmod +x rustup-init; ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; rm rustup-init; chmod -R a+w /usr/local/rustup $CARGO_HOME; rustup --version; cargo --version; rustc --version; 2
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates gcc libc6-dev wget ; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='3dc5ef50861ee18657f9db2eeb7392f9c2a6c95c90ab41e45ab4ca71476b4338' ;; armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='67777ac3bc17277102f2ed73fd5f14c51f4ca5963adadf7f174adf4ebc38747b' ;; arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='32a1532f7cef072a667bac53f1a5542c99666c4071af0c9549795bbdb2069ec1' ;; i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='e50d1deb99048bc5782a0200aa33e4eea70747d49dffdc9d06812fd22a372515' ;; *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; esac; url="https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init"; wget "$url"; echo "${rustupSha256} *rustup-init" | sha256sum -c -; chmod +x rustup-init; ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; rm rustup-init; chmod -R a+w /usr/local/rustup $CARGO_HOME; rustup --version; cargo --version; rustc --version; apt-get remove -y --auto-remove wget ; rm -rf /var/lib/apt/lists/*; 2
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates gcc libc6-dev wget ; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='ed7773edaf1d289656bdec2aacad12413b38ad0193fff54b2231f5140a4b07c5' ;; armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='7a7b9d246ad63358705d8d4a7d5c2ef1adfec24525d1d5c44a7739e1b867e84d' ;; arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='f80a0a792b3ab905ab4919474daf4d3f60e574fc6987e69bfba2fd877241a8de' ;; i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='4473c18286aa1831683a772706d9a5c98b87a61cc014d38063e00a63a480afef' ;; *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; esac; url="https://static.rust-lang.org/rustup/archive/1.23.1/${rustArch}/rustup-init"; wget "$url"; echo "${rustupSha256} *rustup-init" | sha256sum -c -; chmod +x rustup-init; ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; rm rustup-init; chmod -R a+w /usr/local/rustup $CARGO_HOME; rustup --version; cargo --version; rustc --version; apt-get remove -y --auto-remove wget ; rm -rf /var/lib/apt/lists/*; 2
set -ex; export GNUPGHOME="/tmp/gnupg_home"; mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"; echo "disable-ipv6" >> "$GNUPGHOME/dirmngr.conf"; for key in 2CECBFBA181601547B654B9FFA81AC8A490F538E; do found=''; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ; do echo "  trying $server for $key"; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch $key from several disparate servers -- network issues?" && exit 1; done; exit 0 2
set -ex; export GNUPGHOME="/tmp/gnupg_home"; MAX_REDIRECTS=1; if [ -n "$SOLR_DOWNLOAD_URL" ]; then MAX_REDIRECTS=4; SKIP_GPG_CHECK=true; elif [ -n "$SOLR_DOWNLOAD_SERVER" ]; then SOLR_DOWNLOAD_URL="$SOLR_DOWNLOAD_SERVER/8.11.1/solr-8.11.1.tgz"; fi; for url in $SOLR_DOWNLOAD_URL $SOLR_CLOSER_URL $SOLR_DIST_URL $SOLR_ARCHIVE_URL; do if [ -f "/opt/solr-8.11.1.tgz" ]; then break; fi; echo "downloading $url"; if wget -t 10 --max-redirect $MAX_REDIRECTS --retry-connrefused -nv "$url" -O "/opt/solr-8.11.1.tgz"; then break; else rm -f "/opt/solr-8.11.1.tgz"; fi; done; if [ ! -f "/opt/solr-8.11.1.tgz" ]; then echo "failed all download attempts for solr-8.11.1.tgz"; exit 1; fi; if [ -z "$SKIP_GPG_CHECK" ]; then echo "downloading $SOLR_ARCHIVE_URL.asc"; wget -nv "$SOLR_ARCHIVE_URL.asc" -O "/opt/solr-8.11.1.tgz.asc"; echo "4893f836aec84b03d7bfe574e59e305c03b5ede4a48020034fbe81440b8feee79e55fd9ead230e5b89b3f25124e9b56c1ddc4bb5c7f631cf4e846b9cab5f9a45 */opt/solr-8.11.1.tgz" | sha512sum -c -; (>&2 ls -l "/opt/solr-8.11.1.tgz" "/opt/solr-8.11.1.tgz.asc"); gpg --batch --verify "/opt/solr-8.11.1.tgz.asc" "/opt/solr-8.11.1.tgz"; else echo "Skipping GPG validation due to non-Apache build"; fi; tar -C /opt --extract --file "/opt/solr-8.11.1.tgz"; (cd /opt; ln -s "solr-8.11.1" solr); rm "/opt/solr-8.11.1.tgz"*; rm -Rf /opt/solr/docs/ /opt/solr/dist/{solr-core-8.11.1.jar,solr-solrj-8.11.1.jar,solrj-lib,solr-test-framework-8.11.1.jar,test-framework}; mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d /opt/docker-solr; chown -R 0:0 "/opt/solr-8.11.1"; find "/opt/solr-8.11.1" -type d -print0 | xargs -0 chmod 0755; find "/opt/solr-8.11.1" -type f -print0 | xargs -0 chmod 0644; chmod -R 0755 "/opt/solr-8.11.1/bin" "/opt/solr-8.11.1/contrib/prometheus-exporter/bin/solr-exporter" /opt/solr-8.11.1/server/scripts/cloud-scripts; cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; chown root:0 /etc/default/solr.in.sh; chmod 0664 /etc/default/solr.in.sh; mkdir -p /var/solr/data /var/solr/logs; (cd /opt/solr/server/solr; cp solr.xml zoo.cfg /var/solr/data/); cp /opt/solr/server/resources/log4j2.xml /var/solr/log4j2.xml; find /var/solr -type d -print0 | xargs -0 chmod 0770; find /var/solr -type f -print0 | xargs -0 chmod 0660; sed -i -e "s/\"\$(whoami)\" == \"root\"/\$(id -u) == 0/" /opt/solr/bin/solr; sed -i -e 's/lsof -PniTCP:/lsof -t -PniTCP:/' /opt/solr/bin/solr; chown -R "0:0" /opt/solr-8.11.1 /docker-entrypoint-initdb.d /opt/docker-solr; chown -R "solr:0" /var/solr; { command -v gpgconf; gpgconf --kill all || :; }; rm -r "$GNUPGHOME" 2
set -ex; export GNUPGHOME="/tmp/gnupg_home"; MAX_REDIRECTS=1; if [ -n "$SOLR_DOWNLOAD_URL" ]; then MAX_REDIRECTS=4; SKIP_GPG_CHECK=true; elif [ -n "$SOLR_DOWNLOAD_SERVER" ]; then SOLR_DOWNLOAD_URL="$SOLR_DOWNLOAD_SERVER/8.10.1/solr-8.10.1.tgz"; fi; for url in $SOLR_DOWNLOAD_URL $SOLR_CLOSER_URL $SOLR_DIST_URL $SOLR_ARCHIVE_URL; do if [ -f "/opt/solr-8.10.1.tgz" ]; then break; fi; echo "downloading $url"; if wget -t 10 --max-redirect $MAX_REDIRECTS --retry-connrefused -nv "$url" -O "/opt/solr-8.10.1.tgz"; then break; else rm -f "/opt/solr-8.10.1.tgz"; fi; done; if [ ! -f "/opt/solr-8.10.1.tgz" ]; then echo "failed all download attempts for solr-8.10.1.tgz"; exit 1; fi; if [ -z "$SKIP_GPG_CHECK" ]; then echo "downloading $SOLR_ARCHIVE_URL.asc"; wget -nv "$SOLR_ARCHIVE_URL.asc" -O "/opt/solr-8.10.1.tgz.asc"; echo "1e8593b4a9b196aa3a12edc1928c83fc108f1cae2dd17f17a10b76d2b1a441341db6a165f74bca0f78bfc7fd0d63b30f525221d5725529961212886a50ee6aa7 */opt/solr-8.10.1.tgz" | sha512sum -c -; (>&2 ls -l "/opt/solr-8.10.1.tgz" "/opt/solr-8.10.1.tgz.asc"); gpg --batch --verify "/opt/solr-8.10.1.tgz.asc" "/opt/solr-8.10.1.tgz"; else echo "Skipping GPG validation due to non-Apache build"; fi; tar -C /opt --extract --file "/opt/solr-8.10.1.tgz"; (cd /opt; ln -s "solr-8.10.1" solr); rm "/opt/solr-8.10.1.tgz"*; rm -Rf /opt/solr/docs/ /opt/solr/dist/{solr-core-8.10.1.jar,solr-solrj-8.10.1.jar,solrj-lib,solr-test-framework-8.10.1.jar,test-framework}; mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d /opt/docker-solr; chown -R 0:0 "/opt/solr-8.10.1"; find "/opt/solr-8.10.1" -type d -print0 | xargs -0 chmod 0755; find "/opt/solr-8.10.1" -type f -print0 | xargs -0 chmod 0644; chmod -R 0755 "/opt/solr-8.10.1/bin" "/opt/solr-8.10.1/contrib/prometheus-exporter/bin/solr-exporter" /opt/solr-8.10.1/server/scripts/cloud-scripts; cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; chown root:0 /etc/default/solr.in.sh; chmod 0664 /etc/default/solr.in.sh; mkdir -p /var/solr/data /var/solr/logs; (cd /opt/solr/server/solr; cp solr.xml zoo.cfg /var/solr/data/); cp /opt/solr/server/resources/log4j2.xml /var/solr/log4j2.xml; find /var/solr -type d -print0 | xargs -0 chmod 0770; find /var/solr -type f -print0 | xargs -0 chmod 0660; sed -i -e "s/\"\$(whoami)\" == \"root\"/\$(id -u) == 0/" /opt/solr/bin/solr; sed -i -e 's/lsof -PniTCP:/lsof -t -PniTCP:/' /opt/solr/bin/solr; chown -R "0:0" /opt/solr-8.10.1 /docker-entrypoint-initdb.d /opt/docker-solr; chown -R "solr:0" /var/solr; { command -v gpgconf; gpgconf --kill all || :; }; rm -r "$GNUPGHOME" 2
set -ex; export GNUPGHOME="/tmp/gnupg_home"; MAX_REDIRECTS=1; if [ -n "$SOLR_DOWNLOAD_URL" ]; then MAX_REDIRECTS=4; SKIP_GPG_CHECK=true; elif [ -n "$SOLR_DOWNLOAD_SERVER" ]; then SOLR_DOWNLOAD_URL="$SOLR_DOWNLOAD_SERVER/8.9.0/solr-8.9.0.tgz"; fi; for url in $SOLR_DOWNLOAD_URL $SOLR_CLOSER_URL $SOLR_DIST_URL $SOLR_ARCHIVE_URL; do if [ -f "/opt/solr-8.9.0.tgz" ]; then break; fi; echo "downloading $url"; if wget -t 10 --max-redirect $MAX_REDIRECTS --retry-connrefused -nv "$url" -O "/opt/solr-8.9.0.tgz"; then break; else rm -f "/opt/solr-8.9.0.tgz"; fi; done; if [ ! -f "/opt/solr-8.9.0.tgz" ]; then echo "failed all download attempts for solr-8.9.0.tgz"; exit 1; fi; if [ -z "$SKIP_GPG_CHECK" ]; then echo "downloading $SOLR_ARCHIVE_URL.asc"; wget -nv "$SOLR_ARCHIVE_URL.asc" -O "/opt/solr-8.9.0.tgz.asc"; echo "15150b7f191fd9e8d2c1bd8bb619dd4b3f27af2e0e94b7609031f7e745a2e263391c30f68865c208afb97ccaa9bde6d16050200e9bfccef65f762c2ed743c242 */opt/solr-8.9.0.tgz" | sha512sum -c -; (>&2 ls -l "/opt/solr-8.9.0.tgz" "/opt/solr-8.9.0.tgz.asc"); gpg --batch --verify "/opt/solr-8.9.0.tgz.asc" "/opt/solr-8.9.0.tgz"; else echo "Skipping GPG validation due to non-Apache build"; fi; tar -C /opt --extract --file "/opt/solr-8.9.0.tgz"; (cd /opt; ln -s "solr-8.9.0" solr); rm "/opt/solr-8.9.0.tgz"*; rm -Rf /opt/solr/docs/ /opt/solr/dist/{solr-core-8.9.0.jar,solr-solrj-8.9.0.jar,solrj-lib,solr-test-framework-8.9.0.jar,test-framework}; mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d /opt/docker-solr; chown -R 0:0 "/opt/solr-8.9.0"; find "/opt/solr-8.9.0" -type d -print0 | xargs -0 chmod 0755; find "/opt/solr-8.9.0" -type f -print0 | xargs -0 chmod 0644; chmod -R 0755 "/opt/solr-8.9.0/bin" "/opt/solr-8.9.0/contrib/prometheus-exporter/bin/solr-exporter" /opt/solr-8.9.0/server/scripts/cloud-scripts; cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; chown root:0 /etc/default/solr.in.sh; chmod 0664 /etc/default/solr.in.sh; mkdir -p /var/solr/data /var/solr/logs; (cd /opt/solr/server/solr; cp solr.xml zoo.cfg /var/solr/data/); cp /opt/solr/server/resources/log4j2.xml /var/solr/log4j2.xml; find /var/solr -type d -print0 | xargs -0 chmod 0770; find /var/solr -type f -print0 | xargs -0 chmod 0660; sed -i -e "s/\"\$(whoami)\" == \"root\"/\$(id -u) == 0/" /opt/solr/bin/solr; sed -i -e 's/lsof -PniTCP:/lsof -t -PniTCP:/' /opt/solr/bin/solr; chown -R "0:0" /opt/solr-8.9.0 /docker-entrypoint-initdb.d /opt/docker-solr; chown -R "solr:0" /var/solr; { command -v gpgconf; gpgconf --kill all || :; }; rm -r "$GNUPGHOME" 2
set -ex; export GNUPGHOME="/tmp/gnupg_home"; mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"; echo "disable-ipv6" >> "$GNUPGHOME/dirmngr.conf"; for key in 86EDB9C33B8517228E88A8F93E48C0C6EF362B9E; do found=''; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ; do echo "  trying $server for $key"; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch $key from several disparate servers -- network issues?" && exit 1; done; exit 0 2
set -ex; export GNUPGHOME="/tmp/gnupg_home"; MAX_REDIRECTS=1; if [ -n "$SOLR_DOWNLOAD_URL" ]; then MAX_REDIRECTS=4; SKIP_GPG_CHECK=true; elif [ -n "$SOLR_DOWNLOAD_SERVER" ]; then SOLR_DOWNLOAD_URL="$SOLR_DOWNLOAD_SERVER/8.8.2/solr-8.8.2.tgz"; fi; for url in $SOLR_DOWNLOAD_URL $SOLR_CLOSER_URL $SOLR_DIST_URL $SOLR_ARCHIVE_URL; do if [ -f "/opt/solr-8.8.2.tgz" ]; then break; fi; echo "downloading $url"; if wget -t 10 --max-redirect $MAX_REDIRECTS --retry-connrefused -nv "$url" -O "/opt/solr-8.8.2.tgz"; then break; else rm -f "/opt/solr-8.8.2.tgz"; fi; done; if [ ! -f "/opt/solr-8.8.2.tgz" ]; then echo "failed all download attempts for solr-8.8.2.tgz"; exit 1; fi; if [ -z "$SKIP_GPG_CHECK" ]; then echo "downloading $SOLR_ARCHIVE_URL.asc"; wget -nv "$SOLR_ARCHIVE_URL.asc" -O "/opt/solr-8.8.2.tgz.asc"; echo "2f0affa8ac1e913ec83c2c4b8dffd6b262140478d5aa33203ac01fd5efb695eb9b1661138ce0c549b050fa0aadeb0912b5838b94703e1cca74ecfacbb57bbaee */opt/solr-8.8.2.tgz" | sha512sum -c -; (>&2 ls -l "/opt/solr-8.8.2.tgz" "/opt/solr-8.8.2.tgz.asc"); gpg --batch --verify "/opt/solr-8.8.2.tgz.asc" "/opt/solr-8.8.2.tgz"; else echo "Skipping GPG validation due to non-Apache build"; fi; tar -C /opt --extract --file "/opt/solr-8.8.2.tgz"; (cd /opt; ln -s "solr-8.8.2" solr); rm "/opt/solr-8.8.2.tgz"*; rm -Rf /opt/solr/docs/ /opt/solr/dist/{solr-core-8.8.2.jar,solr-solrj-8.8.2.jar,solrj-lib,solr-test-framework-8.8.2.jar,test-framework}; mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d /opt/docker-solr; chown -R 0:0 "/opt/solr-8.8.2"; find "/opt/solr-8.8.2" -type d -print0 | xargs -0 chmod 0755; find "/opt/solr-8.8.2" -type f -print0 | xargs -0 chmod 0644; chmod -R 0755 "/opt/solr-8.8.2/bin" "/opt/solr-8.8.2/contrib/prometheus-exporter/bin/solr-exporter" /opt/solr-8.8.2/server/scripts/cloud-scripts; cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; chown root:0 /etc/default/solr.in.sh; chmod 0664 /etc/default/solr.in.sh; mkdir -p /var/solr/data /var/solr/logs; (cd /opt/solr/server/solr; cp solr.xml zoo.cfg /var/solr/data/); cp /opt/solr/server/resources/log4j2.xml /var/solr/log4j2.xml; find /var/solr -type d -print0 | xargs -0 chmod 0770; find /var/solr -type f -print0 | xargs -0 chmod 0660; sed -i -e "s/\"\$(whoami)\" == \"root\"/\$(id -u) == 0/" /opt/solr/bin/solr; sed -i -e 's/lsof -PniTCP:/lsof -t -PniTCP:/' /opt/solr/bin/solr; chown -R "0:0" /opt/solr-8.8.2 /docker-entrypoint-initdb.d /opt/docker-solr; chown -R "solr:0" /var/solr; { command -v gpgconf; gpgconf --kill all || :; }; rm -r "$GNUPGHOME" 2
set -eux; addgroup -S -g 1000 sonarqube; adduser -S -D -u 1000 -G sonarqube sonarqube; apk add --no-cache --virtual build-dependencies gnupg unzip curl; apk add --no-cache bash su-exec ttf-dejavu openjdk11-jre; echo "networkaddress.cache.ttl=5" >> "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; sed --in-place --expression="s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g" "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; for server in $(shuf -e hkps://keys.openpgp.org hkps://keyserver.ubuntu.com) ; do gpg --batch --keyserver "${server}" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A && break || : ; done; mkdir --parents /opt  cd /opt; curl --fail --location --output sonarqube.zip --silent --show-error "https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-9.5.0.56709.zip"; curl --fail --location --output sonarqube.zip.asc --silent --show-error "https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-9.5.0.56709.zip.asc"; gpg --batch --verify sonarqube.zip.asc sonarqube.zip; unzip -q sonarqube.zip; mv "sonarqube-9.5.0.56709" sonarqube; rm sonarqube.zip*; rm -rf ${SONARQUBE_HOME}/bin/*; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 "${SQ_DATA_DIR}" "${SQ_EXTENSIONS_DIR}" "${SQ_LOGS_DIR}" "${SQ_TEMP_DIR}" ; apk del --purge build-dependencies; 2
apk add --no-cache gpg gpg-agent dirmngr curl && rm -rf /var/cache/apk/* 2
set -x && curl -fSL https://dist.apache.org/repos/dist/release/tomee/tomee-${TOMEE_VER}/apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz.asc -o tomee.tar.gz.asc && curl -fSL https://dist.apache.org/repos/dist/release/tomee/tomee-${TOMEE_VER}/apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz.sha512 -o tomee.tar.gz.sha512 && curl -fSL https://dist.apache.org/repos/dist/release/tomee/tomee-${TOMEE_VER}/apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz -o apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && gpg --batch --verify tomee.tar.gz.asc apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && echo "`cat tomee.tar.gz.sha512`  apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz" | sha512sum -c && tar -zxf apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && mv apache-tomee-${TOMEE_BUILD}-${TOMEE_VER}/* /usr/local/tomee && rm apache-tomee-${TOMEE_VER}-${TOMEE_BUILD}.tar.gz && rm -Rf apache-tomee-${TOMEE_BUILD}-${TOMEE_VER} && rm bin/*.bat && rm bin/*.exe && rm bin/*.tar.gz* && rm tomee.tar.gz.asc && rm tomee.tar.gz* 2
addgroup vault && adduser -S -G vault vault 2
mkdir -p /vault/logs && mkdir -p /vault/file && mkdir -p /vault/config && chown -R vault:vault /vault 2
apt-get update && apt-get --no-install-recommends -y install curl libreoffice unzip procps libpostgresql-jdbc-java && rm -rf /var/lib/apt/lists/* 2
cp /usr/share/java/postgresql-jdbc4.jar /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/ 2
curl -fSL "https://repo1.maven.org/maven2/org/mariadb/jdbc/mariadb-java-client/3.0.5/mariadb-java-client-3.0.5.jar" -o /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mariadb-java-client-3.0.5.jar && echo "e9532d9bca07c1263c32b00b495bd3ec7f2b79320513cabd762bf39ea09e68d9 /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mariadb-java-client-3.0.5.jar" | sha256sum -c - 2
curl -fSL "https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.29/mysql-connector-java-8.0.29.jar" -o /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mysql-connector-java-8.0.29.jar && echo "d4e32d2a6026b5acc00300b73a86c28fb92681ae9629b21048ee67014c911db6 /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mysql-connector-java-8.0.29.jar" | sha256sum -c - 2
groupadd -r rocketchat && useradd -r -g rocketchat rocketchat && mkdir -p /app/uploads && chown rocketchat:rocketchat /app/uploads 2
set -eux && apt-get update && apt-get install -y --no-install-recommends fontconfig && aptMark="$(apt-mark showmanual)" && apt-get install -y --no-install-recommends g++ make python ca-certificates curl gnupg && rm -rf /var/lib/apt/lists/* && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 0E163286C20D07B9787EBE9FD7F9D0414FD08104 && curl -fSL "https://releases.rocket.chat/${RC_VERSION}/download" -o rocket.chat.tgz && curl -fSL "https://releases.rocket.chat/${RC_VERSION}/asc" -o rocket.chat.tgz.asc && gpg --batch --verify rocket.chat.tgz.asc rocket.chat.tgz && tar zxf rocket.chat.tgz && rm rocket.chat.tgz rocket.chat.tgz.asc && cd bundle/programs/server && npm install && apt-mark auto '.*' > /dev/null && apt-mark manual $aptMark > /dev/null && find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && npm cache clear --force && chown -R rocketchat:rocketchat /app 2
groupadd -r rocketchat &&  useradd -r -g rocketchat rocketchat &&  mkdir -p /app/uploads &&  chown rocketchat:rocketchat /app/uploads 2
set -eux &&  apt-get update &&  apt-get install -y --no-install-recommends fontconfig &&  aptMark="$(apt-mark showmanual)" &&  apt-get install -y --no-install-recommends g++ make python ca-certificates curl gnupg && rm -rf /var/lib/apt/lists/* &&  gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 0E163286C20D07B9787EBE9FD7F9D0414FD08104 &&  curl -fSL "https://releases.rocket.chat/${RC_VERSION}/download" -o rocket.chat.tgz &&  curl -fSL "https://releases.rocket.chat/${RC_VERSION}/asc" -o rocket.chat.tgz.asc &&  gpg --batch --verify rocket.chat.tgz.asc rocket.chat.tgz &&  tar zxf rocket.chat.tgz &&  rm rocket.chat.tgz rocket.chat.tgz.asc &&  cd bundle/programs/server &&  npm install &&  apt-mark auto '.*' > /dev/null &&  apt-mark manual $aptMark > /dev/null &&  find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual &&  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false &&  npm cache clear --force &&  chown -R rocketchat:rocketchat /app 2
{ echo 'deb http://neuro.debian.net/debian buster main'; echo 'deb http://neuro.debian.net/debian data main'; echo '#deb-src http://neuro.debian.net/debian-devel buster main'; } > /etc/apt/sources.list.d/neurodebian.sources.list 2
{ echo 'deb http://neuro.debian.net/debian focal main'; echo 'deb http://neuro.debian.net/debian data main'; echo '#deb-src http://neuro.debian.net/debian-devel focal main'; } > /etc/apt/sources.list.d/neurodebian.sources.list 2
apt-get update && apt-get install -q -y --no-install-recommends build-essential cmake imagemagick libboost-all-dev libgts-dev libjansson-dev libtinyxml-dev mercurial nodejs nodejs-legacy npm pkg-config psmisc xvfb && rm -rf /var/lib/apt/lists/* 2
hg clone https://bitbucket.org/osrf/gzweb $GZWEB_WS 2
hg up default && xvfb-run -s "-screen 0 1280x1024x24" ./deploy.sh -m -t 2
apt-get update && apt-get install -q -y --no-install-recommends binutils mesa-utils module-init-tools x-window-system && rm -rf /var/lib/apt/lists/* 2
apt-get update && apt-get install -q -y --no-install-recommends dirmngr gnupg2 lsb-release && rm -rf /var/lib/apt/lists/* 2
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D2486D2DD83DB69272AFE98867170598AF249743 2
. /etc/os-release && echo "deb http://packages.osrfoundation.org/gazebo/$ID-stable `lsb_release -sc` main" > /etc/apt/sources.list.d/gazebo-latest.list 2
apk --no-cache add git 2
mkdir /code 2
apt-get update && bash /tmp/library-scripts/github-debian.sh 2
yum clean all && rpm --rebuilddb && yum install -y curl which tar  openssh-server openssh-clients rsync yum-plugin-ov && yum clean all && yum update -y libselinux && yum update -y nss && yum clean all 2
ssh-keygen -q -N "" -t dsa -f /etc/ssh/ssh_host_dsa_key 2
ssh-keygen -q -N "" -t rsa -f /etc/ssh/ssh_host_rsa_key 2
ssh-keygen -q -N "" -t rsa -f /root/.ssh/id_rsa 2
cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys 2
rpm --import http://repos.azulsystems.com/RPM-GPG-KEY-azulsystems && curl -sLO https://cdn.azul.com/zulu/bin/zulu-repo-1.0.0-1.noarch.rpm && rpm -ivh zulu-repo-1.0.0-1.noarch.rpm && yum -q -y update && yum -q -y upgrade && yum -q -y install zulu8-jdk && yum clean all && rm -rf /var/cache/yum zulu-repo_1.0.0-1.noarch.rpm 2
sed s/HOSTNAME/localhost/ /usr/local/hadoop/etc/hadoop/core-site.xml.template > /usr/local/hadoop/etc/hadoop/core-site.xml 2
chmod 600 /root/.ssh/config 2
chown root:root /root/.ssh/config 2
chmod +x /usr/local/hadoop/etc/hadoop/*-env.sh 2
cp /usr/local/hadoop/share/hadoop/tools/lib/*.jar /usr/local/hadoop/share/hadoop/common/lib/ 2
sed  -i "/^[^#]*UsePAM/ s/.*/#&/"  /etc/ssh/sshd_config 2
echo "UsePAM no" >> /etc/ssh/sshd_config 2
echo "Port 2122" >> /etc/ssh/sshd_config 2
echo -e '#!/bin/bash\n/usr/sbin/sshd\ntimeout 10 bash -c "until printf \"\" 2>>/dev/null >>/dev/tcp/127.0.0.1/2122; do sleep 0.5; done"' > /usr/local/bin/start_sshd && chmod a+x /usr/local/bin/start_sshd 2
start_sshd && $HADOOP_HOME/etc/hadoop/hadoop-env.sh && $HADOOP_HOME/sbin/start-dfs.sh 2
apk add --no-cache tcl bash openssl 2
mkdir -p /home/node/.devcontainer-cache && chown node /home/node/.devcontainer-cache /repo-source-tmp && su node -c  cd /repo-source-tmp && .devcontainer/cache/before-cache.sh . /home/node/.devcontainer-cache && .devcontainer/prepare.sh . /home/node/.devcontainer-cache && .devcontainer/cache/cache-diff.sh . /home/node/.devcontainer-cache" 2
mkdir -p "/home/node/.devcontainer-cache" && chown "node:node" "/home/node/.devcontainer-cache" && su node -c "git config --global codespaces-theme.hide-status 1" 2
npm i -g pnpm@7.1.6 2
chmod go+r /etc/envoy.yaml 2
dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm && dnf -qy module disable postgresql && dnf install -y postgresql13-devel postgresql13-server && dnf clean all && rm -rf /var/cache/yum 2
yum install -y nodejs && yum clean all && rm -rf /var/cache/yum 2
localedef -c -f UTF-8 -i en_US en_US.UTF-8 && su - postgres -c "/usr/pgsql-13/bin/initdb" 2
git clone --depth 1 --single-branch --branch llvmorg-10.0.0 https://github.com/llvm/llvm-project llvm && cd llvm/llvm && mkdir build && cd build && cmake -G 'Unix Makefiles' -DLLVM_TARGETS_TO_BUILD=host -DLLVM_BUILD_TOOLS=false -DLLVM_ENABLE_RTTI=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_TOOLCHAIN_FILE='/tmp/clang.cmake' -DCMAKE_EXE_LINKER_FLAGS=-pthread -DCMAKE_SHARED_LINKER_FLAGS=-pthread -DLLVM_ENABLE_PIC=NO -DLLVM_ENABLE_TERMINFO=OFF .. && make -j$(nproc) && make install && cd / && rm -rf /llvm 2
ln -snf /usr/share/zoneinfo/America/Chicago /etc/localtime && echo America/Chicago > /etc/timezone && echo "deb http://apt.postgresql.org/pub/repos/apt bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && apt-get update && apt-get -y install libpq-dev postgresql-13 && apt-get clean && rm -rf /var/lib/apt/lists/* 2
apt-get update && apt-get install -y nodejs && apt-get clean && rm -rf /var/lib/apt/lists/* 2
ln -snf /usr/share/zoneinfo/America/Chicago /etc/localtime && echo America/Chicago > /etc/timezone && echo "deb http://apt.postgresql.org/pub/repos/apt focal-pgdg main" > /etc/apt/sources.list.d/pgdg.list && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && apt-get update && apt-get -y install libpq-dev postgresql-13 && apt-get clean && rm -rf /var/lib/apt/lists/* 2
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && . /etc/lsb-release && echo "deb https://deb.nodesource.com/node_12.x $DISTRIB_CODENAME main" | tee /etc/apt/sources.list.d/nodesource.list && echo "deb-src https://deb.nodesource.com/node_12.x $DISTRIB_CODENAME main" | tee -a /etc/apt/sources.list.d/nodesource.list && apt-get update && apt-get install -y nodejs && apt-get clean && rm -rf /var/lib/apt/lists/* 2
curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.71.0/source/boost_1_71_0.tar.bz2 && tar -xjf boost_1_71_0.tar.bz2 && cd boost_1_71_0 && ./bootstrap.sh --prefix=/usr/local && ./b2 --with-iostreams --with-date_time --with-filesystem --with-system --with-program_options --with-chrono --with-test -j$(nproc) install && cd / && rm -rf boost_1_71_0.tar.bz2 /boost_1_71_0 2
curl -L https://github.com/jtv/libpqxx/archive/7.2.1.tar.gz | tar zxvf - && cd  libpqxx-7.2.1  && cmake -DSKIP_BUILD_TEST=ON -DPostgreSQL_TYPE_INCLUDE_DIR=/usr/include/postgresql -DCMAKE_BUILD_TYPE=Release -S . -B build && cmake --build build && cmake --install build && cd .. && rm -rf libpqxx-7.2.1 2
apt-get -y update && apt-get -y install build-essential gcc apt-utils pkg-config software-properties-common apt-transport-https libssl-dev  bash curl tar git netcat bind9 dnsutils && apt-get -y update && apt-get -y upgrade && apt-get -y autoremove && apt-get -y autoclean 2
mkdir -p /var/bind /etc/bind 2
chown root:bind /var/bind /etc/bind 2
chown root:bind /etc/bind/named.conf /etc/bind/etcd.zone /etc/bind/rdns.zone 2
mkdir ./db && chown -R 1000 ./db 2
pip install httpx PyGithub "pydantic==1.5.1" "pyyaml>=5.3.1,<6.0.0" 2
pip3 install pexpect 2
groupadd -g 1000 fishuser && useradd  -p $(openssl passwd -1 fish) -d /home/fishuser -m -u 1000 -g 1000 fishuser -G wheel && mkdir -p /home/fishuser/fish-build && mkdir /fish-source && chown -R fishuser:fishuser /home/fishuser /fish-source 2
apt-get update && apt-get -y install build-essential cmake clang-9 gettext git libncurses5-dev locales ninja-build python3 python3-pexpect  && locale-gen en_US.UTF-8 2
apt-get update && apt-get -y install build-essential cmake gettext git libncurses5-dev locales ninja-build python3 python3-pexpect  && locale-gen en_US.UTF-8 2
set -ex; wget -nv -O flink.tgz "https://www.apache.org/dyn/closer.cgi?action";  if [ "$CHECK_GPG" = "true" ]; then wget -nv -O flink.tgz.asc "$FLINK_ASC_URL"; export GNUPGHOME="$(mktemp -d)"; for server in ha.pool.sks-keyservers.net $(shuf -e hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu) ; do gpg --batch --keyserver "$server" --recv-keys "$GPG_KEY" && break || : ; done && gpg --batch --verify flink.tgz.asc flink.tgz; gpgconf --kill all; rm -rf "$GNUPGHOME" flink.tgz.asc; fi;  tar -xf flink.tgz --strip-components=1; rm flink.tgz;  chown -R flink:flink .; sed -i 's/rest.address: localhost/rest.address: 0.0.0.0/g' /opt/flink/conf/flink-conf.yaml; sed -i 's/rest.bind-address: localhost/rest.bind-address: 0.0.0.0/g' /opt/flink/conf/flink-conf.yaml; sed -i 's/jobmanager.bind-host: localhost/jobmanager.bind-host: 0.0.0.0/g' /opt/flink/conf/flink-conf.yaml; sed -i 's/taskmanager.bind-host: localhost/taskmanager.bind-host: 0.0.0.0/g' /opt/flink/conf/flink-conf.yaml; sed -i '/taskmanager.host: localhost/d' /opt/flink/conf/flink-conf.yaml; 2
git config --global user.email "docker@example.com" 2
git config --global user.name "Docker" 2
curl -sL -o qemu-3.0.0+resin-arm.tar.gz https://github.com/balena-io/qemu/releases/download/v3.0.0%2Bresin/qemu-3.0.0+resin-arm.tar.gz && echo "$QEMU_DOWNLOAD_SHA256 *qemu-3.0.0+resin-arm.tar.gz" | sha256sum -c - | tar zxvf qemu-3.0.0+resin-arm.tar.gz -C . && mv qemu-3.0.0+resin-arm/qemu-arm-static . 2
yes | sdkmanager --licenses 2
set -ex;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends dpkg-dev flex ; rm -r /var/lib/apt/lists/*;  _fetch() { local fetch="$1"; shift; local file="$1"; shift; for mirror in $GCC_MIRRORS; do if curl -fL "$mirror/$fetch" -o "$file"; then return 0; fi; done; echo >&2 "error: failed to download '$fetch' from several mirrors"; return 1; };  _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig" 'gcc.tar.xz.sig'; _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz'; gpg --batch --verify gcc.tar.xz.sig gcc.tar.xz; mkdir -p /usr/src/gcc; tar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1; rm gcc.tar.xz*;  cd /usr/src/gcc;  ./contrib/download_prerequisites; { rm *.tar.* || true; };  for f in config.guess config.sub; do wget -O "$f" "https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb"; find -mindepth 2 -name "$f" -exec cp -v "$f" '{}' ';'; done;  dir="$(mktemp -d)"; cd "$dir";  extraConfigureArgs=''; dpkgArch="$(dpkg --print-architecture)"; case "$dpkgArch" in armel) extraConfigureArgs="$extraConfigureArgs --with-arch=armv5te --with-float=soft" ;; armhf) extraConfigureArgs="$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb" ;;  i386) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i686"; ;; esac;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; /usr/src/gcc/configure --build="$gnuArch" --disable-multilib --enable-languages=c,c++,fortran,go $extraConfigureArgs ; make -j "$(nproc)"; make install-strip;  cd ..;  rm -rf "$dir" /usr/src/gcc;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false 2
set -ex;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends dpkg-dev flex ; rm -r /var/lib/apt/lists/*;  _fetch() { local fetch="$1"; shift; local file="$1"; shift; for mirror in $GCC_MIRRORS; do if curl -fL "$mirror/$fetch" -o "$file"; then return 0; fi; done; echo >&2 "error: failed to download '$fetch' from several mirrors"; return 1; };  _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig" 'gcc.tar.xz.sig'; _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz'; gpg --batch --verify gcc.tar.xz.sig gcc.tar.xz; mkdir -p /usr/src/gcc; tar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1; rm gcc.tar.xz*;  cd /usr/src/gcc;  ./contrib/download_prerequisites; { rm *.tar.* || true; };  for f in config.guess config.sub; do wget -O "$f" "https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb"; find -mindepth 2 -name "$f" -exec cp -v "$f" '{}' ';'; done;  dir="$(mktemp -d)"; cd "$dir";  extraConfigureArgs=''; dpkgArch="$(dpkg --print-architecture)"; case "$dpkgArch" in armel) extraConfigureArgs="$extraConfigureArgs --with-arch=armv5te --with-float=soft" ;; armhf) extraConfigureArgs="$extraConfigureArgs --with-arch=armv7-a+fp --with-float=hard --with-mode=thumb" ;;  i386) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i686"; ;; esac;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; /usr/src/gcc/configure --build="$gnuArch" --disable-multilib --enable-languages=c,c++,fortran,go $extraConfigureArgs ; make -j "$(nproc)"; make install-strip;  cd ..;  rm -rf "$dir" /usr/src/gcc;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false 2
pip3 install --no-cache-dir --user -r requirements.txt 2
pip3 install --no-cache-dir --user glances[all] 2
CASS_DRIVER_NO_CYTHON=1 pip3 install --no-cache-dir --user -r optional-requirements.txt 2
apk add --no-cache gcc musl-dev linux-headers git 2
cd /go-ethereum && go run build/ci.go install ./cmd/geth 2
if [ ! $(getent group "0") ]; then addgroup -S -g 0 grafana; fi 2
export GF_GID_NAME=$(getent group 0 | cut -d':' -f1) && mkdir -p "$GF_PATHS_HOME/.aws" && adduser -S -u 472 -G "0_NAME" grafana && mkdir -p "$GF_PATHS_PROVISIONING/datasources" "$GF_PATHS_PROVISIONING/dashboards" "$GF_PATHS_PROVISIONING/notifiers" "$GF_PATHS_PROVISIONING/plugins" "$GF_PATHS_PROVISIONING/access-control" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_DATA" && cp "$GF_PATHS_HOME/conf/sample.ini" "$GF_PATHS_CONFIG" && cp "$GF_PATHS_HOME/conf/ldap.toml" /etc/grafana/ldap.toml && chown -R "grafana:0_NAME" "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING" && chmod -R 777 "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING" 2
mkdir /work 2
set -xe && composer init --name=guzzlehttp/test --description="Simple project for testing Guzzle scripts" --author="M��rk S��gi-Kaz��r <mark.sagikazar@gmail.com>" --no-interaction && composer require guzzlehttp/guzzle 2
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - 2
apt-get update && apt-get install -y openssl 2
set -eux; groupadd --gid 99 --system haproxy; useradd --gid haproxy --home-dir /var/lib/haproxy --no-create-home --system --uid 99 haproxy ; mkdir /var/lib/haproxy; chown haproxy:haproxy /var/lib/haproxy 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update && apt-get install -y --no-install-recommends ca-certificates gcc libc6-dev liblua5.3-dev libpcre2-dev libssl-dev make wget ; rm -rf /var/lib/apt/lists/*;  wget -O haproxy.tar.gz "$HAPROXY_URL"; echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c; mkdir -p /usr/src/haproxy; tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1; rm haproxy.tar.gz;  makeOpts=' TARGET=linux-glibc USE_GETADDRINFO=1 USE_LUA=1 LUA_INC=/usr/include/lua5.3 USE_OPENSSL=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_PROMEX=1  EXTRA_OBJS=" " '; dpkgArch="$(dpkg --print-architecture)"; case "$dpkgArch" in armel) makeOpts="$makeOpts ADDLIB=-latomic" ;; esac;  nproc="$(nproc)"; eval "make -C /usr/src/haproxy -j '$nproc' all $makeOpts"; eval "make -C /usr/src/haproxy install-bin $makeOpts";  mkdir -p /usr/local/etc/haproxy; cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors; rm -rf /usr/src/haproxy;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  haproxy -v 2
set -eux;  apk add --no-cache --virtual .build-deps gcc libc-dev linux-headers lua5.3-dev make openssl openssl-dev pcre2-dev readline-dev tar zlib-dev ;  wget -O haproxy.tar.gz "$HAPROXY_URL"; echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c; mkdir -p /usr/src/haproxy; tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1; rm haproxy.tar.gz;  makeOpts=' TARGET=linux-musl USE_GETADDRINFO=1 USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 USE_OPENSSL=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_ZLIB=1  EXTRA_OBJS=" contrib/prometheus-exporter/service-prometheus.o " ';  nproc="$(getconf _NPROCESSORS_ONLN)"; eval "make -C /usr/src/haproxy -j '$nproc' all $makeOpts"; eval "make -C /usr/src/haproxy install-bin $makeOpts";  mkdir -p /usr/local/etc/haproxy; cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors; rm -rf /usr/src/haproxy;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .haproxy-rundeps $runDeps; apk del --no-network .build-deps;  haproxy -v 2
npm install -g pnpm 2
cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config 2
mkdir -p "$HTTPD_PREFIX" && chown www-data:www-data "$HTTPD_PREFIX" 2
add-apt-repository ppa:deadsnakes/ppa 2
/scripts/prepare 2
umask 002 && git init && export LC_ALL=en_US.UTF-8 RAILS_ENV=production APP_SECRET_TOKEN=secret DATABASE_ADAPTER=mysql2 ON_HEROKU=true && bundle config set --local path vendor/bundle && bundle config set --local without 'test development' && bundle install -j 4 2
umask 002 && LC_ALL=en_US.UTF-8 RAILS_ENV=production APP_SECRET_TOKEN=secret DATABASE_ADAPTER=mysql2 ON_HEROKU=true bundle exec rake assets:clean assets:precompile && chmod g=u /app/.env.example /app/Gemfile.lock /app/config/ /app/tmp/ 2
cd /usr/local/src && git clone --recursive https://github.com/ccache/ccache.git && cd ccache && git checkout v3.7.9 && ./autogen.sh && ./configure --disable-man && make -j$(nproc) && make install && cd /usr/local/src && rm -rf ccache 2
/work/docker_filepermissions.sh 2
opam init --reinit --bare --disable-sandboxing --yes --auto-setup 2
cd / && git clone --depth 1 https://github.com/facebook/infer/ 2
cd /infer && make install-with-libs BUILD_MODE=opt PATCHELF=patchelf DESTDIR="/infer-release" libdir_relative_to_bindir="../lib" 2
apt-get update && apt-get install --yes --no-install-recommends sqlite3 2
if test -d /infer-host; then cp -av /infer/. /infer-host; fi 2
mkdir /docker-entrypoint-initdb.d && mkdir -p /var/lib/influxdb2 && chown -R influxdb:influxdb /var/lib/influxdb2 && mkdir -p /etc/influxdb2 && chown -R influxdb:influxdb /etc/influxdb2 2
apk add --no-cache iputils ca-certificates net-snmp-tools procps lm_sensors tzdata su-exec libcap && update-ca-certificates 2
set -ex && mkdir ~/.gnupg; echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf; apk add --no-cache --virtual .build-deps wget gnupg tar && for key in 05CE15085FC09D18E99EFB22684A14CF2582E0C5 ; do gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys "$key" ; done && wget --no-verbose https://dl.influxdata.com/telegraf/releases/telegraf-${TELEGRAF_VERSION}_static_linux_amd64.tar.gz.asc && wget --no-verbose https://dl.influxdata.com/telegraf/releases/telegraf-${TELEGRAF_VERSION}_static_linux_amd64.tar.gz && gpg --batch --verify telegraf-${TELEGRAF_VERSION}_static_linux_amd64.tar.gz.asc telegraf-${TELEGRAF_VERSION}_static_linux_amd64.tar.gz && mkdir -p /usr/src /etc/telegraf && tar -C /usr/src -xzf telegraf-${TELEGRAF_VERSION}_static_linux_amd64.tar.gz && mv /usr/src/telegraf*/etc/telegraf/telegraf.conf /etc/telegraf/ && mkdir /etc/telegraf/telegraf.d && cp -a /usr/src/telegraf*/usr/bin/telegraf /usr/bin/ && gpgconf --kill all && rm -rf *.tar.gz* /usr/src /root/.gnupg && apk del .build-deps && addgroup -S telegraf && adduser -S telegraf -G telegraf && chown -R telegraf:telegraf /etc/telegraf 2
DEBIAN_FRONTEND=noninteractive apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends iputils-ping snmp procps lm-sensors libcap2-bin && rm -rf /var/lib/apt/lists/* 2
ARCH= && dpkgArch="$(dpkg --print-architecture)" && case "${dpkgArch##*-}" in amd64) ARCH='amd64';; arm64) ARCH='arm64';; armhf) ARCH='armhf';; armel) ARCH='armel';; *)     echo "Unsupported architecture: ${dpkgArch}"; exit 1;; esac && wget --no-verbose https://dl.influxdata.com/telegraf/releases/telegraf_${TELEGRAF_VERSION}-1_${ARCH}.deb.asc && wget --no-verbose https://dl.influxdata.com/telegraf/releases/telegraf_${TELEGRAF_VERSION}-1_${ARCH}.deb && gpg --batch --verify telegraf_${TELEGRAF_VERSION}-1_${ARCH}.deb.asc telegraf_${TELEGRAF_VERSION}-1_${ARCH}.deb && dpkg -i telegraf_${TELEGRAF_VERSION}-1_${ARCH}.deb && rm -f telegraf_${TELEGRAF_VERSION}-1_${ARCH}.deb* 2
apk add --no-cache tzdata bash ca-certificates && update-ca-certificates 2
apk add git 2
set -eux;  apk add --no-cache --virtual .fetch-deps gnupg;  arch="$(apk --print-arch)"; case "$arch" in 'x86_64') url='https://julialang-s3.julialang.org/bin/musl/x64/1.8/julia-1.8.0-rc1-musl-x86_64.tar.gz'; sha256='fb78d1547fd3a82881ccc8d3d5bb24310c59feb08473e0a05d5d44314f23b195'; ;; *) echo >&2 "error: current architecture ($arch) does not have a corresponding Julia binary release"; exit 1; ;; esac;  wget -O julia.tar.gz.asc "$url.asc"; wget -O julia.tar.gz "$url";  echo "$sha256 *julia.tar.gz" | sha256sum -w -c -;  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$JULIA_GPG"; gpg --batch --verify julia.tar.gz.asc julia.tar.gz; command -v gpgconf > /dev/null && gpgconf --kill all; rm -rf "$GNUPGHOME" julia.tar.gz.asc;  mkdir "$JULIA_PATH"; tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1; rm julia.tar.gz;  apk del --no-network .fetch-deps;  julia --version 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; if ! command -v gpg > /dev/null; then apt-get update; apt-get install -y --no-install-recommends gnupg dirmngr ; rm -rf /var/lib/apt/lists/*; fi;  arch="$(dpkg --print-architecture)"; case "$arch" in 'amd64') url='https://julialang-s3.julialang.org/bin/linux/x64/1.8/julia-1.8.0-rc1-linux-x86_64.tar.gz'; sha256='a47efddaaccb424dad6499f870ab7f792c50827d23cc64cb9873280318337966'; ;; 'arm64') url='https://julialang-s3.julialang.org/bin/linux/aarch64/1.8/julia-1.8.0-rc1-linux-aarch64.tar.gz'; sha256='15dd553754aa15e514f28ed00ed4cfdb1f8cf883f3398b803ef5cf05e767a2fb'; ;; 'i386') url='https://julialang-s3.julialang.org/bin/linux/x86/1.8/julia-1.8.0-rc1-linux-i686.tar.gz'; sha256='bed81bb5e2cd60abb824b40cbb1ed2f27c9f974dfd7fbc43ce1684e5462bae2b'; ;; *) echo >&2 "error: current architecture ($arch) does not have a corresponding Julia binary release"; exit 1; ;; esac;  curl -fL -o julia.tar.gz.asc "$url.asc"; curl -fL -o julia.tar.gz "$url";  echo "$sha256 *julia.tar.gz" | sha256sum --strict --check -;  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$JULIA_GPG"; gpg --batch --verify julia.tar.gz.asc julia.tar.gz; command -v gpgconf > /dev/null && gpgconf --kill all; rm -rf "$GNUPGHOME" julia.tar.gz.asc;  mkdir "$JULIA_PATH"; tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1; rm julia.tar.gz;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  julia --version 2
set -eux;  apk add --no-cache --virtual .fetch-deps gnupg;  arch="$(apk --print-arch)"; case "$arch" in 'x86_64') url='https://julialang-s3.julialang.org/bin/musl/x64/1.7/julia-1.7.3-musl-x86_64.tar.gz'; sha256='e8c7d8e94228c775661a3c5a5744c12b46b5cbda177c6ba0def9ed33705e6786'; ;; *) echo >&2 "error: current architecture ($arch) does not have a corresponding Julia binary release"; exit 1; ;; esac;  wget -O julia.tar.gz.asc "$url.asc"; wget -O julia.tar.gz "$url";  echo "$sha256 *julia.tar.gz" | sha256sum -w -c -;  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$JULIA_GPG"; gpg --batch --verify julia.tar.gz.asc julia.tar.gz; command -v gpgconf > /dev/null && gpgconf --kill all; rm -rf "$GNUPGHOME" julia.tar.gz.asc;  mkdir "$JULIA_PATH"; tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1; rm julia.tar.gz;  apk del --no-network .fetch-deps;  julia --version 2
ln -s /usr/bin/python3 /usr/bin/python 2
ln -s /usr/bin/python2.7 /usr/bin/python 2
npm run build -- --output-path=./dist/default --configuration=production 2
npm run build -- --output-path=./dist/rok --configuration=rok-prod 2
mkdir -p /out/var/helm-charts 2
tar xvzf /tmp/helm-v3.5.2-${TARGETOS}-${TARGETARCH}.tar.gz -C /tmp 2
mv /tmp/${TARGETOS}-${TARGETARCH}/helm /out/usr/local/bin/ 2
if [ false = true ]; then sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories ;fi 2
usermod -aG docker jenkins 2
dpkg --add-architecture i386 2
echo "deb http://deb.debian.org/debian bullseye-backports main" >> /etc/apt/sources.list 2
apk --no-cache add make gcc libc-dev 2
mkdir /pkg && cd /src && make && make DESTDIR=/pkg install 2
mkdir -p /usr/local/share/licenses/zstd 2
pip3 install wheel 2
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat 2
apk add --update --no-cache python3 make g++ 2
npm install --only=production 2
chmod +x gradlew 2
chmod +x /tini 2
if [ "none" != "none" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install none 2>&1"; fi 2
apt-get update && apt-get install -y gcc libc6-dev --no-install-recommends 2
echo "deb [ signed-by=/etc/apt/keyrings/mongodb.gpg ] http://repo.mongodb.org/apt/ubuntu bionic/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list" 2
echo "deb [ signed-by=/etc/apt/keyrings/mongodb.gpg ] http://repo.mongodb.org/apt/ubuntu focal/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list" 2
if [ -z "$N8N_VERSION" ] ; then echo "The N8N_VERSION argument is missing!" ; exit 1; fi 2
apk add --no-cache git make musl-dev gcc 2
git clone https://github.com/benbjohnson/litestream.git litestream 2
cd litestream ; go install ./cmd/litestream 2
cp $GOPATH/bin/litestream /usr/src/lt 2
adduser -D -H -g "" notary 2
bundle config set path lib 2
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates p11-kit ; rm -rf /var/lib/apt/lists/* 2
set -eux;  arch="$(dpkg --print-architecture)"; case "$arch" in 'amd64') downloadUrl='https://download.java.net/java/early_access/jdk19/26/GPL/openjdk-19-ea+26_linux-x64_bin.tar.gz'; downloadSha256='130143ba9c969760aa4aecba9cd2296887facde306841d69404dd1d1235b3d90'; ;; 'arm64') downloadUrl='https://download.java.net/java/early_access/jdk19/26/GPL/openjdk-19-ea+26_linux-aarch64_bin.tar.gz'; downloadSha256='cedaf6ebfab9a1a716acf5a65e0bfe298e0c965c70100bc91cc414a9fcf0b4b7'; ;; *) echo >&2 "error: unsupported architecture: '$arch'"; exit 1 ;; esac;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends wget ; rm -rf /var/lib/apt/lists/*;  wget --progress=dot:giga -O openjdk.tgz "$downloadUrl"; echo "$downloadSha256 *openjdk.tgz" | sha256sum --strict --check -;  mkdir -p "$JAVA_HOME"; tar --extract --file openjdk.tgz --directory "$JAVA_HOME" --strip-components 1 --no-same-owner ; rm openjdk.tgz*;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  { echo '#!/usr/bin/env bash'; echo 'set -Eeuo pipefail'; echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$JAVA_HOME/lib/security/cacerts"'; } > /etc/ca-certificates/update.d/docker-openjdk; chmod +x /etc/ca-certificates/update.d/docker-openjdk; /etc/ca-certificates/update.d/docker-openjdk;  find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; ldconfig;  java -Xshare:dump;  fileEncoding="$(echo 'System.out.println(System.getProperty("file.encoding"))' | jshell -s -)"; [ "$fileEncoding" = 'UTF-8' ]; rm -rf ~/.java; javac --version; java --version 2
set -eux; apt-get update; apt-get install -y --no-install-recommends bzip2 unzip xz-utils  binutils  fontconfig libfreetype6  ca-certificates p11-kit ; rm -rf /var/lib/apt/lists/* 2
set -eux;  arch="$(dpkg --print-architecture)"; case "$arch" in 'amd64') downloadUrl='https://download.java.net/java/early_access/jdk19/26/GPL/openjdk-19-ea+26_linux-x64_bin.tar.gz'; downloadSha256='130143ba9c969760aa4aecba9cd2296887facde306841d69404dd1d1235b3d90'; ;; 'arm64') downloadUrl='https://download.java.net/java/early_access/jdk19/26/GPL/openjdk-19-ea+26_linux-aarch64_bin.tar.gz'; downloadSha256='cedaf6ebfab9a1a716acf5a65e0bfe298e0c965c70100bc91cc414a9fcf0b4b7'; ;; *) echo >&2 "error: unsupported architecture: '$arch'"; exit 1 ;; esac;  wget --progress=dot:giga -O openjdk.tgz "$downloadUrl"; echo "$downloadSha256 *openjdk.tgz" | sha256sum --strict --check -;  mkdir -p "$JAVA_HOME"; tar --extract --file openjdk.tgz --directory "$JAVA_HOME" --strip-components 1 --no-same-owner ; rm openjdk.tgz*;  { echo '#!/usr/bin/env bash'; echo 'set -Eeuo pipefail'; echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$JAVA_HOME/lib/security/cacerts"'; } > /etc/ca-certificates/update.d/docker-openjdk; chmod +x /etc/ca-certificates/update.d/docker-openjdk; /etc/ca-certificates/update.d/docker-openjdk;  find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; ldconfig;  java -Xshare:dump;  fileEncoding="$(echo 'System.out.println(System.getProperty("file.encoding"))' | jshell -s -)"; [ "$fileEncoding" = 'UTF-8' ]; rm -rf ~/.java; javac --version; java --version 2
rm -rf /var/lib/apt/lists/* 2
apk update; apk add git; 2
go build 2
groupadd -g 1001 mysql; useradd -u 1001 -r -g 1001 -s /sbin/nologin -c "Default Application User" mysql 2
export GO111MODULE=off && go get k8s.io/apimachinery/pkg/util/sets && curl -Lf -o /go/src/github.com/percona/percona-xtradb-cluster-operator/src/peer-list.go https://raw.githubusercontent.com/percona/percona-xtradb-cluster-operator/main/cmd/peer-list/main.go && go build peer-list.go 2
groupadd -g 1001 mysql 2
useradd -u 1001 -r -g 1001 -s /sbin/nologin -c "Default Application User" mysql 2
make all install DESTDIR=/opt/photoprism 2
set -eux; apk add --no-cache --virtual .build-deps $PHPIZE_DEPS argon2-dev coreutils curl-dev gnu-libiconv-dev libsodium-dev libxml2-dev linux-headers oniguruma-dev openssl-dev readline-dev sqlite-dev ;  rm -vf /usr/include/iconv.h;  export CFLAGS="-fstack-protector-strong" CPPFLAGS="-fstack-protector-strong" LDFLAGS="-Wl,-O1" ; docker-php-source extract; cd /usr/src/php; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --with-config-file-path="$PHP_INI_DIR" --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"  --enable-option-checking=fatal  --with-mhash  --with-pic  --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-pdo-sqlite=/usr --with-sqlite3=/usr  --with-curl --with-iconv=/usr --with-openssl --with-readline --with-zlib  --disable-phpdbg  --with-pear  $(test "$gnuArch" = 's390x-linux-musl' && echo '--without-pcre-jit')  --disable-cgi  --enable-zts ; make -j "$(nproc)"; find -type f -name '*.a' -delete; make install; find /usr/local -type f -perm '/0111' -exec sh -euxc ' strip --strip-all "$@" || : ' -- '{}' + ; make clean;  cp -v php.ini-* "$PHP_INI_DIR/";  cd /; docker-php-source delete;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-cache $runDeps;  apk del --no-network .build-deps;  pecl update-channels; rm -rf /tmp/pear ~/.pearrc;  php --version 2
set -eux; apk add --no-cache --virtual .build-deps $PHPIZE_DEPS argon2-dev coreutils curl-dev gnu-libiconv-dev libsodium-dev libxml2-dev linux-headers oniguruma-dev openssl-dev readline-dev sqlite-dev ;  rm -vf /usr/include/iconv.h;  export CFLAGS="-fstack-protector-strong" CPPFLAGS="-fstack-protector-strong" LDFLAGS="-Wl,-O1" ; docker-php-source extract; cd /usr/src/php; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --with-config-file-path="$PHP_INI_DIR" --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"  --enable-option-checking=fatal  --with-mhash  --with-pic  --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-pdo-sqlite=/usr --with-sqlite3=/usr  --with-curl --with-iconv=/usr --with-openssl --with-readline --with-zlib  --disable-phpdbg  --with-pear  $(test "$gnuArch" = 's390x-linux-musl' && echo '--without-pcre-jit')  --disable-cgi  --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data ; make -j "$(nproc)"; find -type f -name '*.a' -delete; make install; find /usr/local -type f -perm '/0111' -exec sh -euxc ' strip --strip-all "$@" || : ' -- '{}' + ; make clean;  cp -v php.ini-* "$PHP_INI_DIR/";  cd /; docker-php-source delete;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-cache $runDeps;  apk del --no-network .build-deps;  pecl update-channels; rm -rf /tmp/pear ~/.pearrc;  php --version 2
set -eux; apt-get update; apt-get install -y --no-install-recommends apache2; rm -rf /var/lib/apt/lists/*;  sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS";  . "$APACHE_ENVVARS"; for dir in "$APACHE_LOCK_DIR" "$APACHE_RUN_DIR" "$APACHE_LOG_DIR" ; do rm -rvf "$dir"; mkdir -p "$dir"; chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir"; chmod 777 "$dir"; done;  rm -rvf /var/www/html/*;  ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log"; ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log"; ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log"; chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR" 2
a2dismod mpm_event && a2enmod mpm_prefork 2
{ echo '<FilesMatch \.php$>'; echo '\tSetHandler application/x-httpd-php'; echo '</FilesMatch>'; echo; echo 'DirectoryIndex disabled'; echo 'DirectoryIndex index.php index.html'; echo; echo '<Directory /var/www/>'; echo '\tOptions -Indexes'; echo '\tAllowOverride All'; echo '</Directory>'; } | tee "$APACHE_CONFDIR/conf-available/docker-php.conf" && a2enconf docker-php 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends apache2-dev libargon2-dev libcurl4-openssl-dev libonig-dev libreadline-dev libsodium-dev libsqlite3-dev libssl-dev libxml2-dev zlib1g-dev ;  export CFLAGS="-fstack-protector-strong" CPPFLAGS="-fstack-protector-strong" LDFLAGS="-Wl,-O1" ; docker-php-source extract; cd /usr/src/php; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; if [ ! -d /usr/include/curl ]; then ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; fi; ./configure --build="$gnuArch" --with-config-file-path="$PHP_INI_DIR" --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"  --enable-option-checking=fatal  --with-mhash  --with-pic  --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-pdo-sqlite=/usr --with-sqlite3=/usr  --with-curl --with-iconv --with-openssl --with-readline --with-zlib  --disable-phpdbg  --with-pear  $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') --with-libdir="lib/$debMultiarch"  --disable-cgi  --with-apxs2 ; make -j "$(nproc)"; find -type f -name '*.a' -delete; make install; find /usr/local -type f -perm '/0111' -exec sh -euxc ' strip --strip-all "$@" || : ' -- '{}' + ; make clean;  cp -v php.ini-* "$PHP_INI_DIR/";  cd /; docker-php-source delete;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*;  pecl update-channels; rm -rf /tmp/pear ~/.pearrc;  php --version 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends libargon2-dev libcurl4-openssl-dev libonig-dev libreadline-dev libsodium-dev libsqlite3-dev libssl-dev libxml2-dev zlib1g-dev ;  export CFLAGS="-fstack-protector-strong" CPPFLAGS="-fstack-protector-strong" LDFLAGS="-Wl,-O1" ; docker-php-source extract; cd /usr/src/php; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; if [ ! -d /usr/include/curl ]; then ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; fi; ./configure --build="$gnuArch" --with-config-file-path="$PHP_INI_DIR" --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"  --enable-option-checking=fatal  --with-mhash  --with-pic  --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-pdo-sqlite=/usr --with-sqlite3=/usr  --with-curl --with-iconv --with-openssl --with-readline --with-zlib  --enable-phpdbg --enable-phpdbg-readline  --with-pear  $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') --with-libdir="lib/$debMultiarch"  --enable-embed ; make -j "$(nproc)"; find -type f -name '*.a' -delete; make install; find /usr/local -type f -perm '/0111' -exec sh -euxc ' strip --strip-all "$@" || : ' -- '{}' + ; make clean;  cp -v php.ini-* "$PHP_INI_DIR/";  cd /; docker-php-source delete;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*;  pecl update-channels; rm -rf /tmp/pear ~/.pearrc;  php --version 2
apt-get update && apt-get install -y gnupg 2
curl -fSL -o zs-init.tar.gz "http://repos.zend.com/zs-init/zs-init-docker-${ZS_INIT_VERSION}.tar.gz" && echo "${ZS_INIT_SHA256} *zs-init.tar.gz" | sha256sum -c - && mkdir /usr/local/zs-init && tar xzf zs-init.tar.gz --strip-components=1 -C /usr/local/zs-init && rm zs-init.tar.gz && patch -u /usr/local/zs-init/src/Init/Steps/AbstractStep.php -i /tmp/zs-init.patch && rm /tmp/zs-init.patch 2
/usr/local/zend/bin/php -r "readfile('https://getcomposer.org/installer');" | /usr/local/zend/bin/php && /usr/local/zend/bin/php composer.phar update 2
rm /var/www/html/index.nginx-debian.html 2
/usr/sbin/a2enconf drop-http-proxy-header 2
/usr/sbin/a2enmod headers 2
/usr/local/zend/bin/php -r "readfile('https://getcomposer.org/installer');" | /usr/local/zend/bin/php && /usr/local/zend/bin/php composer.phar self-update && /usr/local/zend/bin/php composer.phar update 2
echo "deb http://repos.zend.com/zend-server/9.1/deb_apache2.4 server non-free" >> /etc/apt/sources.list.d/zend-server.list 2
RUN rm -f /var/lib/apt/lists/* 2
apt-get clean && apt-get update && apt-get install -y curl && curl http://repos.zend.com/zend.key | apt-key add - ; apt-get update 2
/usr/local/zend/bin/php -r "readfile('https://getcomposer.org/installer');" | /usr/local/zend/bin/php 2
/usr/local/zend/bin/php composer.phar update 2
yum install -y git 2
yarn install --frozen-lockfile --production=false --no-progress 2
set -eux;  wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"; echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -; mkdir -p /usr/src/postgresql; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2;  apk add --no-cache --virtual .build-deps bison coreutils dpkg-dev dpkg flex gcc krb5-dev libc-dev libedit-dev libxml2-dev libxslt-dev linux-headers llvm-dev clang g++ make openldap-dev openssl-dev perl-dev perl-ipc-run perl-utils python3-dev tcl-dev util-linux-dev zlib-dev icu-dev lz4-dev ;  cd /usr/src/postgresql; awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'; wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'; ./configure --build="$gnuArch" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu --with-llvm --with-lz4 ; make -j "$(nproc)" world; make install-world; make -C contrib install;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' | grep -v -e perl -e python -e tcl )"; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash su-exec tzdata zstd icu-data-full ; apk del --no-network .build-deps; cd /; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ;  postgres --version 2
/bin/bash -l -c "echo 'gem: --no-ri --no-rdoc' > ~/.gemrc" 2
/bin/bash -l -c "echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc" 2
curl -O -L  https://github.com/google/protobuf/releases/download/v3.20.0/protobuf-cpp-3.20.0.tar.gz && tar xvfz protobuf-cpp-3.20.0.tar.gz && cd protobuf-3.20.0/ && CXXFLAGS=-fPIC ./configure && make -j8 && make install && rm -rf /protobuf-cpp-3.20.0.tar.gz /protobuf-3.20.0 2
curl -O -L https://boostorg.jfrog.io/artifactory/main/release/1.64.0/source/boost_1_64_0.tar.gz && tar xvfz boost_1_64_0.tar.gz && cd /boost_1_64_0 && ./bootstrap.sh --with-libraries=program_options,filesystem,regex,thread,system,python && ./b2 address-model=64 cxxflags=-fPIC link=static threading=multi variant=release install && rm -rf /boost_1_64_0.tar.gz /boost_1_64_0 2
curl -O -L https://github.com/Kitware/CMake/archive/v3.8.2.tar.gz && tar xvfz v3.8.2.tar.gz && cd CMake-3.8.2 && ./configure && make && make install && rm -rf /v3.8.2.tar.gz /CMake-3.8.2 2
curl -O -L  https://github.com/google/protobuf/releases/download/v3.20.0/protobuf-cpp-3.20.0.tar.gz && tar xvfz protobuf-cpp-3.20.0.tar.gz && cd protobuf-3.20.0/ && CXXFLAGS=-fPIC ./configure && make && make install && ldconfig && rm -rf /protobuf-cpp-3.20.0.tar.gz /protobuf-3.20.0 2
curl -O -L https://github.com/madler/zlib/archive/v1.2.12.tar.gz && tar xvfz v1.2.12.tar.gz && cd zlib-1.2.12 && CFLAGS="-fPIC -O3" ./configure && make && make install && rm -rf /v1.2.12.tar.gz /zlib-1.2.12 2
curl -O -L https://github.com/google/snappy/releases/download/1.1.3/snappy-1.1.3.tar.gz && tar xvfz snappy-1.1.3.tar.gz && cd snappy-1.1.3 && CXXFLAGS="-fPIC -O3" ./configure && make && make install && rm -rf /snappy-1.1.3 /snappy-1.1.3.tar.gz 2
curl -O -L https://github.com/openssl/openssl/archive/OpenSSL_1_1_0j.tar.gz && tar xvfz OpenSSL_1_1_0j.tar.gz && cd openssl-OpenSSL_1_1_0j/ && ./Configure -fPIC --prefix=/usr/local/ssl/ linux-x86_64 && make && make install && rm -rf /OpenSSL_1_1_0j.tar.gz /openssl-OpenSSL_1_1_0j 2
curl -O -L  https://github.com/curl/curl/releases/download/curl-7_61_0/curl-7.61.0.tar.gz && tar xvfz curl-7.61.0.tar.gz && cd curl-7.61.0 && CFLAGS=-fPIC ./configure --with-ssl=/usr/local/ssl/ && make && make install && rm -rf /curl-7.61.0.tar.gz /curl-7.61.0 2
ln -s /opt/python/${PYTHON_SPEC}/include/python${PYTHON_VERSION}m /opt/python/${PYTHON_SPEC}/include/python${PYTHON_VERSION} 2
curl -O -L https://www.cpan.org/src/5.0/perl-5.10.0.tar.gz && tar xvfz perl-5.10.0.tar.gz && cd perl-5.10.0 && ./configure.gnu --prefix=/usr/local/ && make && make install && rm -rf /perl-5.10.0.tar.gz /perl-5.10.0 2
curl -O -L https://zlib.net/zlib-1.2.12.tar.gz && tar xvfz zlib-1.2.12.tar.gz && cd zlib-1.2.12 && CFLAGS="-fPIC -O3" ./configure && make -j8 && make install && rm -rf /zlib-1.2.12.tar.gz /zlib-1.2.12 2
curl -O -L https://github.com/openssl/openssl/archive/OpenSSL_1_1_1n.tar.gz && tar xvfz OpenSSL_1_1_1n.tar.gz && cd openssl-OpenSSL_1_1_1n/ && ./Configure -fPIC --prefix=/usr/local/ssl/ no-shared linux-${ARCH} && make -j8 && make install && rm -rf /OpenSSL_1_1_1n.tar.gz /openssl-OpenSSL_1_1_1n 2
curl -O -L https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.gz && tar xvfz boost_1_78_0.tar.gz && cd /boost_1_78_0 && ./bootstrap.sh --with-libraries=program_options,filesystem,regex,thread,system,python && ./b2 address-model=64 cxxflags=-fPIC link=static threading=multi variant=release install -j8 && rm -rf /boost_1_78_0.tar.gz /boost_1_78_0 2
curl -O -L https://github.com/google/snappy/releases/download/1.1.3/snappy-1.1.3.tar.gz && tar xvfz snappy-1.1.3.tar.gz && cd snappy-1.1.3 && CXXFLAGS="-fPIC -O3" ./configure && make -j8 && make install && rm -rf /snappy-1.1.3 /snappy-1.1.3.tar.gz 2
curl -O -L  https://github.com/curl/curl/releases/download/curl-7_61_0/curl-7.61.0.tar.gz && tar xvfz curl-7.61.0.tar.gz && cd curl-7.61.0 && CFLAGS=-fPIC ./configure --with-ssl=/usr/local/ssl/ && make -j8 && make install && rm -rf /curl-7.61.0.tar.gz /curl-7.61.0 2
pip install twine 2
pip install fastavro 2
set -eux;  dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in 'amd64') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-linux64.tar.bz2'; sha256='c58195124d807ecc527499ee19bc511ed753f4f2e418203ca51bc7e3b124d5d1'; ;; 'arm64') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-aarch64.tar.bz2'; sha256='dfc62f2c453fb851d10a1879c6e75c31ffebbf2a44d181bb06fcac4750d023fc'; ;; 'i386') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-linux32.tar.bz2'; sha256='3398cece0167b81baa219c9cd54a549443d8c0a6b553ec8ec13236281e0d86cd'; ;; 's390x') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-s390x.tar.bz2'; sha256='fcab3b9e110379948217cf592229542f53c33bfe881006f95ce30ac815a6df48'; ;; *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;; esac;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends bzip2 wget libexpat1 libncurses5 libncursesw6 libsqlite3-0 ;  wget -O pypy.tar.bz2 "$url" --progress=dot:giga; echo "$sha256 *pypy.tar.bz2" | sha256sum --check --strict -; mkdir /opt/pypy; tar -xjC /opt/pypy --strip-components=1 -f pypy.tar.bz2; find /opt/pypy/lib* -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +; rm pypy.tar.bz2;  ln -sv '/opt/pypy/bin/pypy3' /usr/local/bin/;  pypy3 --version;  cd /opt/pypy/lib_pypy; if [ -f _gdbm_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev libgdbm-dev; pypy3 _gdbm_build.py; fi; if [ -f _ssl_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev libssl-dev; pypy3 _ssl_build.py; fi; if [ -f _lzma_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev liblzma-dev; pypy3 _lzma_build.py; fi; if [ -f _sqlite3_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev libsqlite3-dev; pypy3 _sqlite3_build.py; fi;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /opt/pypy -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*; pypy3 --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' + 2
set -eux;  dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in 'amd64') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-linux64.tar.bz2'; sha256='c58195124d807ecc527499ee19bc511ed753f4f2e418203ca51bc7e3b124d5d1'; ;; 'arm64') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-aarch64.tar.bz2'; sha256='dfc62f2c453fb851d10a1879c6e75c31ffebbf2a44d181bb06fcac4750d023fc'; ;; 'i386') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-linux32.tar.bz2'; sha256='3398cece0167b81baa219c9cd54a549443d8c0a6b553ec8ec13236281e0d86cd'; ;; 's390x') url='https://downloads.python.org/pypy/pypy3.7-v7.3.9-s390x.tar.bz2'; sha256='fcab3b9e110379948217cf592229542f53c33bfe881006f95ce30ac815a6df48'; ;; *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;; esac;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends libexpat1 libncurses5 libncursesw6 libsqlite3-0 ;  wget -O pypy.tar.bz2 "$url" --progress=dot:giga; echo "$sha256 *pypy.tar.bz2" | sha256sum --check --strict -; mkdir /opt/pypy; tar -xjC /opt/pypy --strip-components=1 -f pypy.tar.bz2; find /opt/pypy/lib* -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +; rm pypy.tar.bz2;  ln -sv '/opt/pypy/bin/pypy3' /usr/local/bin/;  pypy3 --version;  cd /opt/pypy/lib_pypy; if [ -f _gdbm_build.py ]; then pypy3 _gdbm_build.py; fi; if [ -f _ssl_build.py ]; then pypy3 _ssl_build.py; fi; if [ -f _lzma_build.py ]; then pypy3 _lzma_build.py; fi; if [ -f _sqlite3_build.py ]; then pypy3 _sqlite3_build.py; fi;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /opt/pypy -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*; pypy3 --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' + 2
set -ex;  wget -O get-pip.py "$PYTHON_GET_PIP_URL"; echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -;  pipVersion="$(pypy3 -c 'import ensurepip; print(ensurepip._PIP_VERSION)')"; setuptoolsVersion="$(pypy3 -c 'import ensurepip; print(ensurepip._SETUPTOOLS_VERSION)')";  pypy3 get-pip.py --disable-pip-version-check --no-cache-dir "pip == $pipVersion" "setuptools == $setuptoolsVersion" ; pip --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' +; rm -f get-pip.py 2
set -eux; apk add --no-cache ca-certificates tzdata ; 2
set -eux;  apk add --no-cache --virtual .build-deps gnupg tar xz  bluez-dev bzip2-dev dpkg-dev dpkg expat-dev findutils gcc gdbm-dev libc-dev libffi-dev libnsl-dev libtirpc-dev linux-headers make ncurses-dev openssl-dev pax-utils readline-dev sqlite-dev tcl-dev tk tk-dev util-linux-dev xz-dev zlib-dev ;  wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"; wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"; GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$GPG_KEY"; gpg --batch --verify python.tar.xz.asc python.tar.xz; command -v gpgconf > /dev/null && gpgconf --kill all || :; rm -rf "$GNUPGHOME" python.tar.xz.asc; mkdir -p /usr/src/python; tar --extract --directory /usr/src/python --strip-components=1 --file python.tar.xz; rm python.tar.xz;  cd /usr/src/python; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --enable-loadable-sqlite-extensions --enable-optimizations --enable-option-checking=fatal --enable-shared --with-lto --with-system-expat --without-ensurepip ; nproc="$(nproc)"; make -j "$nproc" EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000" LDFLAGS="-Wl,--strip-all" ; make install;  cd /; rm -rf /usr/src/python;  find /usr/local -depth \( \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \) \) \) -exec rm -rf '{}' + ;  find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' | xargs -rt apk add --no-network --virtual .python-rundeps ; apk del --no-network .build-deps;  python3 --version 2
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates netbase tzdata ; rm -rf /var/lib/apt/lists/* 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends dpkg-dev gcc gnupg dirmngr libbluetooth-dev libbz2-dev libc6-dev libexpat1-dev libffi-dev libgdbm-dev liblzma-dev libncursesw5-dev libreadline-dev libsqlite3-dev libssl-dev make tk-dev uuid-dev wget xz-utils zlib1g-dev ;  wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"; wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"; GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$GPG_KEY"; gpg --batch --verify python.tar.xz.asc python.tar.xz; command -v gpgconf > /dev/null && gpgconf --kill all || :; rm -rf "$GNUPGHOME" python.tar.xz.asc; mkdir -p /usr/src/python; tar --extract --directory /usr/src/python --strip-components=1 --file python.tar.xz; rm python.tar.xz;  cd /usr/src/python; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --enable-loadable-sqlite-extensions --enable-optimizations --enable-option-checking=fatal --enable-shared --with-lto --with-system-expat --without-ensurepip ; nproc="$(nproc)"; make -j "$nproc" LDFLAGS="-Wl,--strip-all" ; make install;  cd /; rm -rf /usr/src/python;  find /usr/local -depth \( \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \) \) \) -exec rm -rf '{}' + ;  ldconfig;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*;  python3 --version 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends wget;  wget -O get-pip.py "$PYTHON_GET_PIP_URL"; echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum -c -;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*;  export PYTHONDONTWRITEBYTECODE=1;  python get-pip.py --disable-pip-version-check --no-cache-dir --no-compile "pip==$PYTHON_PIP_VERSION" "setuptools==$PYTHON_SETUPTOOLS_VERSION" ; rm -f get-pip.py;  pip --version 2
echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf 2
set eux; rabbitmq-plugins enable --offline rabbitmq_management; rm -f /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf; cp /plugins/rabbitmq_management-*/priv/www/cli/rabbitmqadmin /usr/local/bin/rabbitmqadmin; [ -s /usr/local/bin/rabbitmqadmin ]; chmod +x /usr/local/bin/rabbitmqadmin; apk add --no-cache python3; rabbitmqadmin --version 2
set eux; rabbitmq-plugins enable --offline rabbitmq_management; rm -f /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf; cp /plugins/rabbitmq_management-*/priv/www/cli/rabbitmqadmin /usr/local/bin/rabbitmqadmin; [ -s /usr/local/bin/rabbitmqadmin ]; chmod +x /usr/local/bin/rabbitmqadmin; apt-get update; apt-get install -y --no-install-recommends python3; rm -rf /var/lib/apt/lists/*; rabbitmqadmin --version 2
git clone https://github.com/radareorg/radare2 && cd radare2 && sys/sanitize.sh 2
apt-get install -y wget 2
apt-get install -y curl 2
apt-get install -y iptables 2
apt-get install -y dnsutils 2
apt-get install -y iputils-ping 2
chmod 777 /scripts/run.sh 2
chmod 644 /etc/nginx/conf.d/default.conf 2
if [ "${VIRTUAL_ENV}" != "conda" ] && [ "${VIRTUAL_ENV}" != "venv" ] && [ "${VIRTUAL_ENV}" != "virtualenv" ]; then echo 'VIRTUAL_ENV argument should be either "conda", "venv" or "virtualenv"'; exit 1; fi 2
apt-get update && apt-get install -y curl build-essential 2
apt-get install -y libpython3.7-dev 2
apt-get install -y python3-dev 2
if [ "${VIRTUAL_ENV}" = "conda" ] ; then conda install python=3.7; fi 2
if [ "${VIRTUAL_ENV}" = "venv" ] ; then apt-get -y install python3.7; apt-get -y install python3-pip; apt-get -y install python3.7-venv; fi 2
if [ "${VIRTUAL_ENV}" = "virtualenv" ] ; then apt-get -y install python3.7; apt-get -y install python3-pip; python3.7 -m pip install --user virtualenv; fi 2
apt-get update && apt-get install -y libgomp1 openjdk-8-jre 2
groupadd -r -g 999 redmine && useradd -r -g redmine -u 999 redmine 2
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates curl wget  bzr git mercurial openssh-client subversion  ghostscript gsfonts imagemagick gosu tini ; sed -ri 's/(rights)="none" (pattern="PDF")/\1="read" \2/' /etc/ImageMagick-6/policy.xml; rm -rf /var/lib/apt/lists/* 2
set -eux; curl -fL -o redmine.tar.gz "$REDMINE_DOWNLOAD_URL"; echo "$REDMINE_DOWNLOAD_SHA256 *redmine.tar.gz" | sha256sum -c -; tar -xf redmine.tar.gz --strip-components=1; rm redmine.tar.gz files/delete.me log/delete.me; mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids; chown -R redmine:redmine ./; echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb; chmod -R ugo=rwX config db sqlite; find log tmp -type d -exec chmod 1777 '{}' + 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends default-libmysqlclient-dev freetds-dev gcc libpq-dev libsqlite3-dev make patch xz-utils ; rm -rf /var/lib/apt/lists/*;  gosu redmine bundle config --local without 'development test'; puma="$(grep -E "^[[:space:]]*gem [:'\"]puma['\",[:space:]].*\$" Gemfile)"; { echo; echo "$puma"; } | sed -re 's/^[[:space:]]+//' >> Gemfile; echo '# the following entries only exist to force `bundle install` to pre-install all database adapter dependencies -- they can be safely removed/ignored' > ./config/database.yml; for adapter in mysql2 postgresql sqlserver sqlite3; do echo "$adapter:" >> ./config/database.yml; echo "  adapter: $adapter" >> ./config/database.yml; done; gosu redmine bundle install --jobs "$(nproc)"; rm ./config/database.yml; chmod -R ugo=rwX Gemfile.lock "$GEM_HOME"; rm -rf ~redmine/.bundle;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | grep -v '^/usr/local/' | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false 2
addgroup -S -g 1000 redmine && adduser -S -H -G redmine -u 999 redmine 2
set -eux; apk add --no-cache bash ca-certificates su-exec tini tzdata wget  breezy git mercurial openssh-client subversion  ghostscript ghostscript-fonts imagemagick ; 2
set -eux; wget -O redmine.tar.gz "$REDMINE_DOWNLOAD_URL"; echo "$REDMINE_DOWNLOAD_SHA256 *redmine.tar.gz" | sha256sum -c -; tar -xf redmine.tar.gz --strip-components=1; rm redmine.tar.gz files/delete.me log/delete.me; mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids; chown -R redmine:redmine ./; echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb; chmod -R ugo=rwX config db sqlite; find log tmp -type d -exec chmod 1777 '{}' + 2
set -eux;  apk add --no-cache --virtual .build-deps coreutils freetds-dev gcc make mariadb-dev musl-dev patch postgresql-dev sqlite-dev ttf2ufm zlib-dev ;  su-exec redmine bundle config --local without 'development test'; puma="$(grep -E "^[[:space:]]*gem [:'\"]puma['\",[:space:]].*\$" Gemfile)"; { echo; echo "$puma"; } | sed -re 's/^[[:space:]]+//' >> Gemfile; echo '# the following entries only exist to force `bundle install` to pre-install all database adapter dependencies -- they can be safely removed/ignored' > ./config/database.yml; for adapter in mysql2 postgresql sqlserver sqlite3; do echo "$adapter:" >> ./config/database.yml; echo "  adapter: $adapter" >> ./config/database.yml; done; su-exec redmine bundle install --jobs "$(nproc)"; rm ./config/database.yml; chmod -R ugo=rwX Gemfile.lock "$GEM_HOME"; rm -rf ~redmine/.bundle;  rm /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .redmine-rundeps $runDeps; apk del --no-network .build-deps 2
npm install --production=false 2
npx prisma generate 2
echo $'[rethinkdb]\ name=RethinkDB\ enabled=1\ baseurl=https://download.rethinkdb.com/repository/centos/7/x86_64/\ gpgkey=https://download.rethinkdb.com/repository/raw/pubkey.gpg\ gpgcheck=1\n' >> /etc/yum.repos.d/rethinkdb.repo 2
echo $'[rethinkdb]\ name=RethinkDB\ enabled=1\ baseurl=https://download.rethinkdb.com/repository/centos/7/aarch64/\ gpgkey=https://download.rethinkdb.com/repository/raw/pubkey.gpg\ gpgcheck=1\n' >> /etc/yum.repos.d/rethinkdb.repo 2
/ubuntu-install-packages 2
set -eux;  apk add --no-cache --virtual .ruby-builddeps autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg g++ gcc gdbm-dev glib-dev libc-dev libffi-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev openssl openssl-dev patch procps readline-dev ruby tar xz yaml-dev zlib-dev ;  wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"; echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum --check --strict;  mkdir -p /usr/src/ruby; tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1; rm ruby.tar.xz;  cd /usr/src/ruby;  wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch'; echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum --check --strict; patch -p1 -i thread-stack-fix.patch; rm thread-stack-fix.patch;  export ac_cv_func_isnan=yes ac_cv_func_isinf=yes;  { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } > file.c.new; mv file.c.new file.c;  autoconf; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --disable-install-doc --enable-shared ; make -j "$(nproc)"; make install;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .ruby-rundeps $runDeps; apk del --no-network .ruby-builddeps;  cd /; rm -r /usr/src/ruby; if apk --no-network list --installed | grep -v '^[.]ruby-rundeps' | grep -i ruby ; then exit 1; fi; [ "$(command -v ruby)" = '/usr/local/bin/ruby' ]; ruby --version; gem --version; bundle --version 2
set -eux; apt-get update; apt-get install -y --no-install-recommends bzip2 ca-certificates libffi-dev libgmp-dev libssl-dev libyaml-dev procps zlib1g-dev ; rm -rf /var/lib/apt/lists/* 2
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends bison dpkg-dev libgdbm-dev ruby autoconf g++ gcc libbz2-dev libgdbm-compat-dev libglib2.0-dev libncurses-dev libreadline-dev libxml2-dev libxslt-dev make wget xz-utils ; rm -rf /var/lib/apt/lists/*;  wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"; echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum --check --strict;  mkdir -p /usr/src/ruby; tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1; rm ruby.tar.xz;  cd /usr/src/ruby;  { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } > file.c.new; mv file.c.new file.c;  autoconf; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --disable-install-doc --enable-shared ; make -j "$(nproc)"; make install;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark > /dev/null; find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | grep -vE '^/usr/local/lib/' | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  cd /; rm -r /usr/src/ruby; if dpkg -l | grep -i ruby; then exit 1; fi; [ "$(command -v ruby)" = '/usr/local/bin/ruby' ]; ruby --version; gem --version; bundle --version 2
apt-get update && apt-get install -y --no-install-recommends curl ca-certificates 2
npm run setup 2
tar xzf ../devkit-fedora-gcc-21-8.3.0.tar.gz 2
useradd -ms /bin/bash jenkins -u 1002 2
apt-get install -qy --no-install-recommends libgl1 libssl1.1 libdbus-1-3 libxcb-shape0-dev gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-gl libunwind8 2
mkdir /guzzle 2
set -ex; cd /usr/src; git clone --branch="v0.8.0" --recurse-submodules https://github.com/ethereum/evmone.git; cd evmone; mkdir build; cd build; cmake -G Ninja -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="/usr" ..; ninja; ninja install/strip; rm -rf /usr/src/evmone 2
set -ex; cd /usr/src; git clone --branch="v0.5.0" --depth 1 --recurse-submodules https://github.com/ewasm/hera.git; cd hera; mkdir build; cd build; cmake -G Ninja -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="/usr" ..; ninja; ninja install/strip; rm -rf /usr/src/hera 2
set -eux; groupadd -r storm --gid=1000; useradd -r -g storm --uid=1000 storm; mkdir -p "/conf" "$STORM_DATA_DIR" "$STORM_LOG_DIR"; chown -R storm:storm "/conf" "$STORM_DATA_DIR" "$STORM_LOG_DIR" RUN set -eux; apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends bash ca-certificates dirmngr gosu gnupg python procps wget; rm -rf /var/lib/apt/lists/*; gosu nobody true 2
export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true && apt-get -q update && apt-get -q install -y libcurl4 libxml2 tzdata && rm -r /var/lib/apt/lists/* 2
set -e; export DEBIAN_FRONTEND=noninteractive && apt-get -q update && apt-get -q install -y curl gnupg && rm -rf /var/lib/apt/lists/* && export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download:' | sed 's/:[^:\/\/]/=/g')  && export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download_signature:' | sed 's/:[^:\/\/]/=/g')  && export DOWNLOAD_DIR=$(echo $download | sed "s/-${OS_VER}.tar.gz//g") && echo $DOWNLOAD_DIR > .swift_tag && export GNUPGHOME="$(mktemp -d)" && curl -fsSL https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download} -o latest_toolchain.tar.gz https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download_signature} -o latest_toolchain.tar.gz.sig && curl -fSsL https://swift.org/keys/all-keys.asc | gpg --import -  && gpg --batch --verify latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && tar -xzf latest_toolchain.tar.gz --directory / --strip-components=1 ${DOWNLOAD_DIR}-${OS_VER}/usr/lib/swift/linux && chmod -R o+r /usr/lib/swift && rm -rf "$GNUPGHOME" latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && apt-get purge --auto-remove -y curl gnupg 2
echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/motd' >> /etc/bashrc; echo -e " ################################################################\n" "#\t\t\t\t\t\t\t\t#\n" "# Swift Nightly Docker Image\t\t\t\t\t#\n" "# Tag: $(cat .swift_tag)\t\t\t#\n" "#\t\t\t\t\t\t\t\t#\n"  "################################################################\n" > /etc/motd 2
set -e; export DEBIAN_FRONTEND=noninteractive && apt-get -q update && apt-get -q install -y curl && rm -rf /var/lib/apt/lists/* && export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download:' | sed 's/:[^:\/\/]/=/g')  && export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download_signature:' | sed 's/:[^:\/\/]/=/g')  && export DOWNLOAD_DIR=$(echo $download | sed "s/-${OS_VER}.tar.gz//g") && echo $DOWNLOAD_DIR > .swift_tag && export GNUPGHOME="$(mktemp -d)" && curl -fsSL https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download} -o latest_toolchain.tar.gz https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download_signature} -o latest_toolchain.tar.gz.sig && curl -fSsL https://swift.org/keys/all-keys.asc | gpg --import -  && gpg --batch --verify latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && tar -xzf latest_toolchain.tar.gz --directory / --strip-components=1 && chmod -R o+r /usr/lib/swift && rm -rf "$GNUPGHOME" latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && apt-get purge --auto-remove -y curl 2
apt-get update && apt-get install -y --no-install-recommends build-essential clang-format curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libzmq3-dev pkg-config rsync software-properties-common  unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless && apt-get clean && rm -rf /var/lib/apt/lists/* 2
chmod a+w /etc/passwd /etc/group 2
test "0" -eq 1 && git clone --depth=1 https://github.com/tensorflow/tensorflow.git /tensorflow_src || true 2
apt-get update && apt-get install -y python3 python3-pip 2
python3 -m pip --no-cache-dir install --upgrade "pip<20.3" setuptools 2
ln -s $(which python3) /usr/local/bin/python 2
apt-get update && apt-get install -y build-essential curl git wget openjdk-8-jdk python3-dev virtualenv swig 2
python3 -m pip --no-cache-dir install Pillow h5py keras_preprocessing tb-nightly matplotlib mock 'numpy<1.19.0' scipy sklearn pandas future portpicker enum34 'protobuf < 4' 2
mkdir /bazel && curl -fSsL -o /bazel/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE" && mkdir /bazelisk && curl -fSsL -o /bazelisk/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazelisk/master/LICENSE" && curl -fSsL -o /usr/bin/bazel "https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64" && chmod +x /usr/bin/bazel 2
dnf install -y 'dnf-command(config-manager)' && dnf config-manager --set-enabled powertools && dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-"8".noarch.rpm && dnf clean all 2
yum update -y && yum install -y openmpi openmpi-devel openssh openssh-server which && yum clean all 2
mv -f $(which mpirun) /usr/bin/mpirun.real && echo '#!/bin/bash' > /usr/bin/mpirun && echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/bin/mpirun && chmod a+x /usr/bin/mpirun 2
echo "btl_tcp_if_exclude = lo,docker0" >> /etc/openmpi-x86_64/openmpi-mca-params.conf 2
cat /etc/ssh/sshd_config | grep -v StrictHostKeyChecking > /etc/ssh/sshd_config.new && echo "    StrictHostKeyChecking no" >> /etc/ssh/sshd_config.new && mv -f /etc/ssh/sshd_config.new /etc/ssh/sshd_config 2
test "0" -eq 1 && git clone --branch "master" --single-branch --recursive https://github.com/uber/horovod.git /horovod_src || true 2
mkdir -p /opt 2
npm install -g @nestjs/cli 2
npm --prefix server run build 2
apt-get update && apt-get install -y postgresql-client freetds-dev libaio1 wget 2
wget https://download.oracle.com/otn_software/linux/instantclient/instantclient-basiclite-linuxx64.zip && unzip instantclient-basiclite-linuxx64.zip && rm -f instantclient-basiclite-linuxx64.zip && cd /opt/oracle/instantclient* && rm -f *jdbc* *occi* *mysql* *mql1* *ipc1* *jar uidrvci genezi adrci && echo /opt/oracle/instantclient* > /etc/ld.so.conf.d/oracle-instantclient.conf && ldconfig 2
npm --prefix frontend run build 2
apt-get -y upgrade 2
npm i -g yarn --force 2
curl -o kuma_install.sh http://git.kuma.pet/install.sh && bash kuma_install.sh local /opt/uptime-kuma 3000 0.0.0.0 2
mkdir -p /verdaccio/plugins 2
cd /verdaccio/plugins/verdaccio-docker-memory && npm install --production 2
mkdir -p /verdaccio/plugins && cd /verdaccio/plugins && npm install --global-style --no-bin-links --omit=optional verdaccio-auth-memory@latest 2
cd /usr/src; mvn -U clean package -Dmaven.test.skip=true -Dmaven.artifact.threads=10 2
apk add yarn g++ make cmake python3 --no-cache 2
apk add bash curl git openssh gnupg sqlite --no-cache && mkdir -p /wiki && mkdir -p /logs && mkdir -p /wiki/data/content && chown -R node:node /wiki /logs 2
./bootstrap && ./configure && make && make install 2
ln -snf /usr/share/zoneinfo/PRC /etc/localtime && echo PRC > /etc/timezone 2
groupadd -g 1000 basicuser && useradd -r -u 1000 -g basicuser basicuser 1
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8 1
echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" > /etc/apt/sources.list.d/pgdg.list 1
apt-get -y -q install python-software-properties software-properties-common 1
apt-get -y -q install postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 1
/etc/init.d/postgresql start & psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" & createdb -O docker docker 1
echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/9.3/main/pg_hba.conf 1
echo "listen_addresses='*'" >> /etc/postgresql/9.3/main/postgresql.conf 1
apk --no-cache add -f openssl openssh-client coreutils bind-tools curl sed socat tzdata oath-toolkit-oathtool tar libidn jq 1
cd /install_acme.sh && ([ -f /install_acme.sh/acme.sh ] && /install_acme.sh/acme.sh --install || curl https://get.acme.sh | sh) && rm -rf /install_acme.sh/ 1
ln -s  /root/.acme.sh/acme.sh  /usr/local/bin/acme.sh && crontab -l | grep acme.sh | sed 's#> /dev/null##' | crontab - 1
for verb in help version install uninstall upgrade issue signcsr deploy install-cert renew renew-all revoke remove list info showcsr install-cronjob uninstall-cronjob cron toPkcs toPkcs8 update-account register-account create-account-key create-domain-key createCSR deactivate deactivate-account set-notify set-default-ca set-default-chain ; do printf -- "%b" "#!/usr/bin/env sh\n/root/.acme.sh/acme.sh --${verb} --config-home /acme.sh \"\$@\"" >/usr/local/bin/--${verb} && chmod +x /usr/local/bin/--${verb} ; done 1
printf "%b" '#!'"/usr/bin/env sh\n if [ \"\$1\" = \"daemon\" ];  then \n trap \"echo stop && killall crond && exit 0\" SIGTERM SIGINT \n crond && sleep infinity &\n wait \n else \n exec -- \"\$@\"\n fi" >/entry.sh && chmod +x /entry.sh 1
apk add --no-cache bash ca-certificates git && apk --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing add mono mono-dev && cert-sync /etc/ssl/certs/ca-certificates.crt && wget "https://github.com/chocolatey/choco/archive/1.1.0.tar.gz" -O- | tar -xzf - && cd choco-"1.1.0" && chmod +x build.sh zip.sh && ./build.sh -v && mv ./code_drop/chocolatey/console /opt/chocolatey && mkdir -p /opt/chocolatey/lib && rm -rf /choco-"1.1.0" && apk del mono-dev && rm -rf /var/cache/apk/* 1
apk --no-cache add ca-certificates libcap tzdata && mkdir -p /opt/adguardhome/conf /opt/adguardhome/work && chown -R nobody: /opt/adguardhome 1
setcap 'cap_net_bind_service=+eip' /opt/adguardhome/AdGuardHome 1
apt-get update -y && apt-get install -y iproute2 procps wget python python3 python3-distutils lua5.2 gettext-base libldap-dev libcurl4-openssl-dev && wget https://github.com/aerospike/tini/releases/download/1.0.1/as-tini-static -O /usr/bin/as-tini-static && echo "$AS_TINI_SHA256 /usr/bin/as-tini-static" | sha256sum -c - && chmod +x /usr/bin/as-tini-static && wget "https://download.aerospike.com/artifacts/aerospike-server-enterprise/${AEROSPIKE_VERSION}/aerospike-server-enterprise-${AEROSPIKE_VERSION}-debian10.tgz" -O aerospike-server.tgz && echo "$AEROSPIKE_SHA256 *aerospike-server.tgz" | sha256sum -c - && mkdir aerospike && tar xzf aerospike-server.tgz --strip-components=1 -C aerospike && dpkg -i aerospike/aerospike-server-*.deb && dpkg -i aerospike/aerospike-tools-*.deb && mkdir -p /var/log/aerospike/ && mkdir -p /var/run/aerospike/ && rm -rf aerospike-server.tgz aerospike /var/lib/apt/lists/* && rm -rf /opt/aerospike/lib/java && dpkg -r wget ca-certificates openssl xz-util && dpkg --purge wget ca-certificates openssl xz-util && apt-get purge -y && apt autoremove -y && find /usr/bin/ -lname '/opt/aerospike/bin/*' -delete && find /opt/aerospike/bin/ -user aerospike -group aerospike -exec chown root:root {} + && mv /opt/aerospike/bin/* /usr/bin/ && rm -rf /opt/aerospike/bin 1
apt-get update -y && apt-get install -y iproute2 procps dumb-init wget python python3 python3-distutils lua5.2 gettext-base libcurl4-openssl-dev  && wget "https://www.aerospike.com/artifacts/aerospike-server-community/${AEROSPIKE_VERSION}/aerospike-server-community-${AEROSPIKE_VERSION}-debian10.tgz" -O aerospike-server.tgz && echo "$AEROSPIKE_SHA256 *aerospike-server.tgz" | sha256sum -c - && mkdir aerospike && tar xzf aerospike-server.tgz --strip-components=1 -C aerospike && dpkg -i aerospike/aerospike-server-*.deb && dpkg -i aerospike/aerospike-tools-*.deb && mkdir -p /var/log/aerospike/ && mkdir -p /var/run/aerospike/ && rm -rf aerospike-server.tgz aerospike /var/lib/apt/lists/* && rm -rf /opt/aerospike/lib/java && dpkg -r wget ca-certificates openssl xz-util && dpkg --purge wget ca-certificates openssl xz-util && apt-get purge -y && apt autoremove -y && find /usr/bin/ -lname '/opt/aerospike/bin/*' -delete && find /opt/aerospike/bin/ -user aerospike -group aerospike -exec chown root:root {} + && mv /opt/aerospike/bin/* /usr/bin/ && rm -rf /opt/aerospike/bin 1
apt-get install  libglu1-mesa-dev xdg-user-dirs pulseaudio  x11-xserver-utils unzip wget software-properties-common -y --no-install-recommends 1
apt-add-repository ppa:deadsnakes/ppa 1
apt-get install -y python3.6 python3-pip 1
python3.6 -m pip install --upgrade pip 1
python3.6 -m pip install setuptools wheel 1
adduser --force-badname --disabled-password --gecos '' --shell /bin/bash airsim_user && echo '% ALL=(ALL) NOPASSWD:ALL' >> /etc/ers && adduser airsim_user  && adduser airsim_user audio && adduser airsim_user video 1
wget -c https://github.com/microsoft/AirSim/releases/download/v1.3.1-linux/Blocks.zip 1
unzip Blocks.zip 1
rm Blocks.zip 1
mkdir -p /home/airsim_user/Documents/AirSim 1
chown -R airsim_user /home/airsim_user 1
python3.6 -m pip install -r requirements.txt 1
apk --no-cache add bash 1
adduser -D -H -u 19857 algo 1
mkdir -p /algo && mkdir -p /algo/configs 1
python3 -m pip --no-cache-dir install -U pip && python3 -m pip --no-cache-dir install virtualenv && python3 -m virtualenv .env && source .env/bin/activate && python3 -m pip --no-cache-dir install -r requirements.txt 1
chmod 0755 /algo/algo-docker.sh 1
mkdir /var/log/aio 1
apt-get update -y && apt-get install -y curl 1
curl --silent --show-error --location https://deb.nodesource.com/setup_14.x | bash - 1
curl --silent --show-error https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - 1
apt-get update -y && apt-get install -y cron dnsmasq nano nginx nodejs openssl rsyslog vim yarn=1.22.18-1 1
yarn global add pm2@5.2.0 1
chmod 0644 /etc/logrotate.d/* 1
chmod 0744 /etc/cron.d/aio-builds-cleanup 1
crontab /etc/cron.d/aio-builds-cleanup 1
printenv | grep AIO_ >> /etc/environment 1
sed -i "s|{{\ngbuilds.io}}|ngbuilds.io|g" /etc/dnsmasq.conf 1
sed -i "s|{{\ngbuilds.io.localhost}}|ngbuilds.io.localhost|g" /etc/dnsmasq.conf 1
chmod a+x /tmp/create-selfsigned-cert.sh 1
/tmp/create-selfsigned-cert.sh "selfcert-prod" "ngbuilds.io" "$AIO_LOCALCERTS_DIR" 1
/tmp/create-selfsigned-cert.sh "selfcert-test" "ngbuilds.io.localhost" "$TEST_AIO_LOCALCERTS_DIR" 1
rm /tmp/create-selfsigned-cert.sh 1
sed -i -E "s|^user\s+\S+;|user $AIO_WWW_USER;|" /etc/nginx/nginx.conf 1
rm -f /etc/nginx/conf.d/* 1
rm -f /etc/nginx/sites-enabled/* 1
sed -i "s|{{\/var/www/aio-builds}}|/var/www/aio-builds|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\ngbuilds.io}}|ngbuilds.io|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\$AIO_LOCALCERTS_DIR}}|$AIO_LOCALCERTS_DIR|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\$AIO_NGINX_LOGS_DIR}}|$AIO_NGINX_LOGS_DIR|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\80}}|80|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\80S}}|80S|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\preview.localhost}}|preview.localhost|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\26214400}}|26214400|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\3000}}|3000|g" /etc/nginx/conf.d/aio-builds-prod.conf 1
sed -i "s|{{\/var/www/aio-builds}}|/tmp/aio-builds|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\ngbuilds.io}}|ngbuilds.io.localhost|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\$AIO_LOCALCERTS_DIR}}|$TEST_AIO_LOCALCERTS_DIR|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\$AIO_NGINX_LOGS_DIR}}|$TEST_AIO_NGINX_LOGS_DIR|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\80}}|8080|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\80S}}|8080S|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\preview.localhost}}|preview.localhost|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\26214400}}|200|g" /etc/nginx/conf.d/aio-builds-test.conf 1
sed -i "s|{{\3000}}|3001|g" /etc/nginx/conf.d/aio-builds-test.conf 1
pm2 startup --user root > /dev/null 1
chmod a+x $AIO_SCRIPTS_SH_DIR/* 1
find $AIO_SCRIPTS_SH_DIR -maxdepth 1 -type f -printf "%P\n" | while read file; do ln -s $AIO_SCRIPTS_SH_DIR/$file /usr/local/bin/aio-${file%.*}; done 1
yarn --cwd="$AIO_SCRIPTS_JS_DIR/" install --production --frozen-lockfile 1
curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/v1.7.4/bazelisk-linux-amd64 > /usr/local/bin/bazel && chmod +x /usr/local/bin/bazel && ln -s /usr/local/bin/python /usr/bin/python 1
./tools/build 1
python -m venv venv && ./venv/bin/python -m pip install --no-cache-dir setuptools wheel && ./venv/bin/python -m pip install --no-cache-dir /opt/anki/wheels/*.whl 1
apt-get update && apt-get install --yes --no-install-recommends libasound2 libdbus-1-3 libfontconfig1 libfreetype6 libgl1 libglib2.0-0 libnss3 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-xinerama0 libxcb-xkb1 libxcomposite1 libxcursor1 libxi6 libxkbcommon0 libxkbcommon-x11-0 libxrandr2 libxrender1 libxtst6 && rm -rf /var/lib/apt/lists/* 1
useradd --create-home anki 1
apk add --no-cache maven git && git clone https://github.com/antlr/antlr4.git && cd antlr4 && git checkout 4.10.1 && mvn clean --projects tool --also-make && mvn -DskipTests install --projects tool --also-make && mv ./tool/target/antlr4-*-complete.jar antlr4-tool.jar 1
adduser --disabled-password --gecos "" --home "$(pwd)" --no-create-home --uid "1000" "appuser" 1
set -eux; adduser -u 1000 -H -h /opt -D -s /bin/sh api-firewall 1
set -eux;  apk add --no-cache wget;  arch="$(apk --print-arch)"; case "$arch" in 'x86_64') url="https://github.com/wallarm/api-firewall/releases/download/${APIFIREWALL_VERSION}/api-firewall-amd64-musl.tar.gz"; sha256='af8e49e7ebf19d68b4dcf09a0f0b04b36a5c6e3f556549cb48852fcebac03892'; ;; 'aarch64') url="https://github.com/wallarm/api-firewall/releases/download/${APIFIREWALL_VERSION}/api-firewall-arm64-musl.tar.gz"; sha256='b15fa8bfb98d23760eac894002db79420cdc321c1f1baabf60fba54556dfdab7'; ;; 'x86') url="https://github.com/wallarm/api-firewall/releases/download/${APIFIREWALL_VERSION}/api-firewall-386-musl.tar.gz"; sha256='d37c9cef562788caf0177224516c555808251a6d79a368b4902424d57037d023'; ;; *) echo >&2 "error: current architecture ($arch) does not have a corresponding API-Firewall binary release"; exit 1; ;; esac;  wget -O api-firewall.tar.gz "$url"; echo "$sha256 *api-firewall.tar.gz" | sha256sum -c;  mkdir -p "$APIFW_PATH"; tar -xzf api-firewall.tar.gz -C "$APIFW_PATH" --strip-components 1; rm api-firewall.tar.gz;  chmod 755 $APIFW_PATH/api-firewall;  api-firewall -v 1
unzip /apollo-adminservice/apollo-adminservice-${VERSION}-github.zip -d /apollo-adminservice && rm -rf /apollo-adminservice/apollo-adminservice-${VERSION}-github.zip && chmod +x /apollo-adminservice/scripts/startup.sh 1
unzip /apollo-configservice/apollo-configservice-${VERSION}-github.zip -d /apollo-configservice && rm -rf /apollo-configservice/apollo-configservice-${VERSION}-github.zip && chmod +x /apollo-configservice/scripts/startup.sh 1
unzip /apollo-portal/apollo-portal-${VERSION}-github.zip -d /apollo-portal && rm -rf /apollo-portal/apollo-portal-${VERSION}-github.zip && chmod +x /apollo-portal/scripts/startup.sh 1
apt-get update && apt-get upgrade --yes && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y supervisor curl cron certbot nginx gnupg wget netcat openssh-client software-properties-common gettext openjdk-11-jre python3-pip python-setuptools git ca-certificates-java && pip install --no-cache-dir git+https://github.com/coderanger/supervisor-stdout@973ba19967cdaf46d9c1634d1675fc65b9574f6e && apt-get remove -y git python3-pip 1
wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | apt-key add - 1
echo "deb [ arch=amd64,arm64 ]http://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-4.4.list && apt-get remove wget -y 1
curl -sL https://deb.nodesource.com/setup_14.x | bash - && apt-get install --no-install-recommends -y mongodb-org=4.4.6 nodejs redis build-essential && apt-get clean && rm -rf /var/lib/apt/lists/* 1
rm -rf /root/.cache /root/.npm /root/.pip /usr/local/share/doc /usr/share/doc /usr/share/man /var/lib/apt/lists/* /tmp/* 1
mkdir -p ./backend ./editor ./rts ./backend/plugins ./templates ./utils 1
cd ./utils && npm install && npm install -g . 1
chmod 0644 /etc/cron.d/* 1
chmod +x entrypoint.sh renew-certificate.sh healthcheck.sh 1
find / \( -path /proc -prune \) -o \( \( -perm -2000 -o -perm -4000 \) -print -exec chmod -s '{}' + \) || true 1
git clone https://github.com/arximboldi/immer.git 1
apt-get update && apt-get install -y autoconf automake cmake g++ libboost-dev libtool make pkg-config -- 1
mkdir /immer/build 1
cmake .. -DCMAKE_BUILD_TYPE=Release -DCHECK_BENCHMARKS=1 1
make deps 1
make tests examples benchmarks 1
apt-get update && apt-get install -y default-jdk curl 1
curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > /usr/local/bin/lein && chmod +x /usr/local/bin/lein 1
lein deps 1
lein compile 1
apt-get update && apt-get install -y gnupg2 apt-transport-https 1
echo "deb https://dl.bintray.com/sbt/debian /" > /etc/apt/sources.list.d/sbt.list && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 && apt-get update && apt-get install -y sbt 1
sbt compile 1
apt-get update && apt-get install -y python-pip 1
pip install pytest-benchmark pyrsistent 1
pip install /immer 1
apt-get update && apt-get install -y emacs vim nano 1
groupadd --system $ARCHIVEBOX_USER && useradd --system --create-home --gid $ARCHIVEBOX_USER --groups audio,video $ARCHIVEBOX_USER 1
apt-get update -qq && apt-get install -qq -y --no-install-recommends apt-transport-https ca-certificates gnupg2 zlib1g-dev dumb-init gosu cron unzip curl && rm -rf /var/lib/apt/lists/* 1
apt-get update -qq && apt-get install -qq -y --no-install-recommends wget curl chromium git ffmpeg youtube-dl ripgrep fontconfig fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-symbola fonts-noto fonts-freefont-ttf && ln -s /usr/bin/chromium /usr/bin/chromium-browser && rm -rf /var/lib/apt/lists/* 1
curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && echo 'deb https://deb.nodesource.com/node_17.x buster main' >> /etc/apt/sources.list && apt-get update -qq && apt-get install -qq -y --no-install-recommends nodejs && rm -rf /var/lib/apt/lists/* 1
python -m venv --clear --symlinks "$VENV_PATH" && pip install --upgrade --quiet pip setuptools && mkdir -p "/app/archivebox" 1
apt-get update -qq && apt-get install -qq -y --no-install-recommends build-essential python-dev python3-dev && echo 'empty placeholder for setup.py to use' > "/app/archivebox/README.md" && python3 -c 'from distutils.core import run_setup; result = run_setup("./setup.py", stop_after="init"); print("\n".join(result.install_requires + result.extras_require["sonic"]))' > /tmp/requirements.txt && pip install -r /tmp/requirements.txt && pip install --upgrade youtube-dl yt-dlp && apt-get purge -y build-essential python-dev python3-dev && apt-get autoremove -y && rm -rf /var/lib/apt/lists/* 1
pip install -e . 1
/app/bin/docker_entrypoint.sh archivebox version 1
apt-get update && apt-get --no-install-recommends install -y git make apt-utils apt-transport-https ca-certificates wget gcc && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/man /usr/share/doc /usr/share/doc-base 1
JOBS=max yarn --cwd ui install --network-timeout 1000000 1
NODE_OPTIONS="--max-old-space-size=2048" JOBS=max yarn --cwd ui build 1
curl -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.22.3/bin/$(os.sh)/$(arch.sh)/kubectl && chmod +x /usr/local/bin/kubectl 1
curl -o /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x /usr/local/bin/jq 1
--mount=type=cache,target=/root/.cache/go-build make dist/argoexec 1
--mount=type=cache,target=/root/.cache/go-build make dist/workflow-controller 1
mkdir -p ui/dist 1
touch ui/dist/node_modules.marker 1
touch ui/dist/app/index.html 1
--mount=type=cache,target=/root/.cache/go-build make dist/argo 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y apt-transport-https ca-certificates git  && usermod -l  -d /home/ -m vscode && groupmod -n  vscode && echo  ALL=\(root\) NOPASSWD:ALL > /etc/ers.d/ && chmod 0440 /etc/ers.d/ && curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg && echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" |  tee /etc/apt/sources.list.d/kubernetes.list && apt-get update && apt-get install -y kubectl && curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip && unzip -o protoc-3.14.0-linux-x86_64.zip -d /usr/local bin/protoc && unzip -o protoc-3.14.0-linux-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-3.14.0-linux-x86_64.zip && chmod 755 /usr/local/bin/protoc && chmod -R 755 /usr/local/include/ && wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash && bash -ec "$(curl -fsSL "https://raw.githubusercontent.com/microsoft/vscode-dev-containers//script-library/go-debian.sh")" -- "1.18" "/usr/local/go" "/go" "automatic" "true" "false" && bash -ec "$(curl -fsSL "https://raw.githubusercontent.com/microsoft/vscode-dev-containers//script-library/docker-in-docker-debian.sh")" -- "true" "automatic" "true" "20.10" "v1" && bash -ec "$(curl -fsSL "https://raw.githubusercontent.com/microsoft/vscode-dev-containers//script-library/node-debian.sh")" -- "/usr/local/share/nvm" "16" "automatic" "true" "true" && bash -ec "$(curl -fsSL "https://raw.githubusercontent.com/microsoft/vscode-dev-containers//script-library/python-debian.sh")" -- "3.9" && apt-get clean -y && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y apt-utils ca-certificates apt-transport-https cowsay --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/man /usr/share/doc /usr/share/doc-base 1
if false; then MAVEN_HOST=${MIRROR_MAVEN_HOST} ;ALPINE_HOST=${MIRROR_ALPINE_HOST} ; sed -i "s/dl-cdn.alpinelinux.org/${ALPINE_HOST}/g" /etc/apk/repositories ; fi && apk add --no-cache tini && wget -qO /tmp/arthas.zip "https://repo1.maven.org/maven2/com/taobao/arthas/arthas-packaging/3.6.3/arthas-packaging-3.6.3-bin.zip" && mkdir -p /opt/arthas && unzip /tmp/arthas.zip -d /opt/arthas && rm /tmp/arthas.zip 1
apk --no-cache add bash ca-certificates make python3 util-linux 1
yum install -y epel-release && yum install -y make python36 && yum clean all 1
apt-get update && apt-get install -y ca-certificates locales make procps python3 && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y ca-certificates locales make python3 && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y ca-certificates locales python3 python3-pip && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 1
useradd -m ${USER} --uid ${USER_ID} -g root 1
echo '${USER} ALL=(ALL) NOPASSWD:ALL' >> /etc/ers 1
chmod -R a+rwx /usr/local 1
chmod -R a+rwx /home 1
if [ "true" = "true" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install lts/* 2>&1"; fi 1
apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y build-essential git libsecret-1-dev fakeroot rpm libx11-dev libxkbfile-dev libgdk-pixbuf2.0-dev libgtk-3-dev libxss-dev libasound2-dev npm && rm -rf /var/lib/apt/lists/* 1
npm install -g npm --loglevel error 1
npm config set python /usr/bin/python2 -g 1
apk add --no-cache bash krb5 openldap-clients samba-dc supervisor 1
yarn install --frozen-lockfile --production --silent 1
apk add --no-cache curl lua-json4 openssl && openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=AU/ST=Victoria/L=Melbourne/O=Authelia/CN=*.example.com" -keyout haproxy.key -out haproxy.crt && cat haproxy.key haproxy.crt > /usr/local/etc/haproxy/haproxy.pem 1
apk --no-cache add ca-certificates su-exec tzdata 1
chmod 0666 /app/.healthcheck.env 1
apk add --no-cache bash curl docker && curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/v0.10.0/kind-linux-amd64 && chmod +x kind && curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.20.2/bin/linux/amd64/kubectl && chmod +x kubectl 1
mkdir -p target/dependency 1
mkdir  -p target/depency 1
ls 1
dotnet build "aspnetapp.csproj" -c Release -o /app/build 1
dotnet publish "aspnetapp.csproj" -c Release -o /app/publish 1
pip install -r requirements.txt --no-cache-dir 1
apt-get update && apt-get install -y nginx git 1
apk add --update git python python-dev py-pip g++ && pip install cookiecutter jinja2_custom_filters_extension && apk del g++ py-pip python-dev && rm -rf /var/cache/apk/* 1
apk update && apk add --no-cache --virtual .backstage python3 g++ pixman pkgconfig alpine-sdk cairo-dev pango-dev jpeg-dev giflib-dev librsvg-dev libsecret-dev py3-docutils asciidoctor 1
wget -qO- https://github.com/errata-ai/vale/releases/download/v2.10.2/vale_2.10.2_Linux_64-bit.tar.gz | tar xvz -C /bin vale && chmod +x /bin/vale 1
ln -s /usr/bin/python3 /usr/bin/python && ln -s /usr/bin/pip3 /usr/bin/pip 1
cd /tmp && curl -O https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tar.xz && tar -xvf Python-3.8.2.tar.xz && cd Python-3.8.2 && ./configure --enable-optimizations && make -j 4 && make altinstall 1
apt install -y mkdocs 1
pip3.8 install mkdocs-techdocs-core 1
pip3.8 install cookiecutter && apt remove -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev libbz2-dev g++ python-pip python-dev && rm -rf /var/cache/apt/* /tmp/Python-3.8.2 1
yarn install --frozen-lockfile --production 1
apt-get update -qq && apt-get install -y nodejs postgresql-client git && rm -rf /var/lib/apt/lists/ 1
gem install rails 1
if [ "amd64" = "i386" ]; then echo "Building i386 docker image" && linux32 yum update -y && linux32 yum install -y mysql ; else yum update -y && yum install -y mysql 1
apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends gcc build-essential && apt-get purge --auto-remove && apt-get clean 1
apt-get update && apt-get install -y curl openjdk-8-jre-headless netcat 1
mkdir -p /kafka-logs && mkdir -p ${KAFKA_HOME} && curl -J -L -s -f -o - https://github.com/kadwanev/retry/releases/download/1.0.1/retry-1.0.1.tar.gz | tar xfz - -C /usr/local/bin && retry --min 1 --max 180 -- curl -J -L -s -f --show-error -o $INSTALL_DIR/kafka.tgz "https://archive.apache.org/dist/kafka/${KAFKA_VERSION}/kafka_2.11-${KAFKA_VERSION}.tgz" && tar xzf ${INSTALL_DIR}/kafka.tgz -C ${KAFKA_HOME} --strip-components 1 1
apk add --no-cache bash iptables wireless-tools build-base libpcap-dev libusb-dev linux-headers libnetfilter_queue-dev git 1
mkdir -p /usr/local/share/bettercap 1
git clone https://github.com/bettercap/caplets /usr/local/share/bettercap/caplets 1
apk add --no-cache bash iproute2 libpcap libusb-dev libnetfilter_queue wireless-tools 1
curl -sL https://rpm.nodesource.com/setup_10.x | bash - 1
yum install -y git gcc-c++ make rpm dpkg-deb fakeroot rpmbuild ruby-devel gcc rpm-build rubygems nodejs 1
yum install -y nano 1
apt-get update && apt-get install -y curl software-properties-common 1
curl -sL https://deb.nodesource.com/setup_10.x | bash - 1
apt-get -y install nano git nodejs ruby ruby-dev rubygems build-essential 1
sh -c "echo 'deb [trusted=true] https://bitsrc.jfrog.io/bitsrc/bit-deb all development' >> /etc/apt/sources.list" 1
mkdir /src 1
pip install --no-cache-dir --upgrade pip setuptools wheel && apt update && apt install -y git build-essential && cd /src && pip install --user --no-cache-dir .[colorama,d] 1
cd /next-stats && yarn install --production 1
apt update -y && apt upgrade -y && apt install -y curl git 1
addgroup --gid 1000 docker && adduser --uid 1000 --ingroup docker --home /home/docker --shell /bin/bash --disabled-password --gecos "" docker && USER=docker && GROUP=docker && ARCH="$(dpkg --print-architecture)" && curl -fsSL "https://github.com/boxboat/fixuid/releases/download/v0.5/fixuid-0.5-linux-$ARCH.tar.gz" | tar -C /usr/local/bin -xzf - && chown root:root /usr/local/bin/fixuid && chmod 4755 /usr/local/bin/fixuid && mkdir -p /etc/fixuid && printf "user: $USER\ngroup: $GROUP\n" > /etc/fixuid/config.yml 1
curl -LO https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && apt install --no-install-recommends -y ./google-chrome-stable_current_amd64.deb && rm google-chrome-stable_current_amd64.deb && apt autoremove -y && apt clean -y && rm -rf /var/lib/apt/lists/* 1
chmod a+x /usr/bin/entrypoint.sh 1
apk add --no-cache curl unzip bash su-exec jattach openjdk11-jre 1
mkdir /opt/custom-init.d/ 1
addgroup -S -g 1000 bonita && adduser -u 1000 -S  -G bonita -h /opt/bonita/ -s /sbin/nologin  bonita 1
mkdir /opt/files 1
if [ -f "/opt/files/BonitaCommunity-${BRANDING_VERSION}.zip" ]; then echo "File already present in /opt/files"; else curl -fsSL ${BONITA_URL} -o /opt/files/BonitaCommunity-${BRANDING_VERSION}.zip && echo "$BONITA_SHA256 */opt/files/$ZIP_FILE" | sha256sum -c - ; fi && unzip -q /opt/files/BonitaCommunity-${BRANDING_VERSION}.zip -d /opt/bonita/ && mv /opt/bonita/BonitaCommunity-${BRANDING_VERSION}/* /opt/bonita && rmdir /opt/bonita/BonitaCommunity-${BRANDING_VERSION} && unzip /opt/bonita/server/webapps/bonita.war -d /opt/bonita/server/webapps/bonita/ && rm /opt/bonita/server/webapps/bonita.war && rm -f /opt/files/BonitaCommunity-${BRANDING_VERSION}.zip && mkdir -p /opt/bonita/conf/logs/ && mkdir -p /opt/bonita/logs/ && mv /opt/files/log4j2/log4j2-appenders.xml /opt/bonita/conf/logs/ && mv /opt/bonita/server/conf/log4j2-loggers.xml /opt/bonita/conf/logs/ && chown -R bonita:bonita /opt/bonita && chmod go+w /opt/ && chmod -R +rX /opt && chmod go+w /opt/bonita && chmod 777 /opt/bonita/server/logs && chmod 777 /opt/bonita/logs/ && chmod 777 /opt/bonita/server/temp && chmod 777 /opt/bonita/server/work && chmod -R go+w /opt/bonita/server/conf && chmod -R go+w /opt/bonita/server/bin && chmod -R go+w /opt/bonita/server/lib/bonita && chmod -R go+w /opt/bonita/setup 1
apt-get update && apt-get install -y --no-install-recommends software-properties-common gnupg-agent && add-apt-repository -y ppa:git-core/ppa && apt-get update && apt-get install -y --no-install-recommends bzip2 ca-certificates curl file fonts-dejavu-core g++ gawk git less libz-dev locales make netbase openssh-client patch  uuid-runtime tzdata && apt remove --purge -y software-properties-common && apt autoremove --purge -y && rm -rf /var/lib/apt/lists/* && localedef -i en_US -f UTF-8 en_US.UTF-8 && useradd -m -s /bin/bash linuxbrew && echo 'linuxbrew ALL=(ALL) NOPASSWD:ALL' >>/etc/ers && su - linuxbrew -c 'mkdir ~/.linuxbrew' 1
mkdir -p .linuxbrew/bin .linuxbrew/etc .linuxbrew/include .linuxbrew/lib .linuxbrew/opt .linuxbrew/sbin .linuxbrew/share .linuxbrew/var/homebrew/linked .linuxbrew/Cellar && ln -s ../Homebrew/bin/brew .linuxbrew/bin/brew && git -C .linuxbrew/Homebrew remote set-url origin https://github.com/Homebrew/brew && git -C .linuxbrew/Homebrew fetch origin && HOMEBREW_NO_ANALYTICS=1 HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/core && brew install-bundler-gems && brew cleanup && { git -C .linuxbrew/Homebrew config --unset gc.auto; true; } && { git -C .linuxbrew/Homebrew config --unset homebrew.devcmdrun; true; } && rm -rf .cache 1
apt-get install software-properties-common wget nginx -y 1
apt-add-repository 'deb http://security.debian.org/debian-security stretch/updates main' 1
mkdir /etc/nginx/logs 1
useradd www 1
touch /etc/nginx/logs/error.log 1
touch /etc/nginx/logs/nginx.pid 1
apt-get install openjdk-8-jdk -y 1
curl -sL https://deb.nodesource.com/setup_16.x -o /tmp/nodesource_setup.sh 1
bash /tmp/nodesource_setup.sh 1
apt-get install nodejs 1
npm install --global yarn 1
npm install --global pm2 1
apt install redis-server -y 1
ls -al 1
wget https://github.com/cloudant-labs/clouseau/releases/download/2.21.0/clouseau-2.21.0-dist.zip 1
unzip clouseau-2.21.0-dist.zip 1
mv clouseau-2.21.0 /opt/clouseau 1
rm clouseau-2.21.0-dist.zip 1
mkdir ./bin 1
chmod +x ./bin/clouseau 1
wget https://dl.min.io/server/minio/release/linux-amd64/minio 1
chmod +x minio 1
chmod +x ./runner.sh 1
apk add --no-cache --virtual .gyp python3 make g++ && yarn && apk del .gyp 1
apt-get update && apt-get install -y --no-install-recommends g++ make python && yarn && yarn cache clean && apt-get remove -y --purge --auto-remove g++ make python && rm -rf /tmp/* /root/.node-gyp /usr/local/lib/node_modules/npm/node_modules/node-gyp 1
set -ex; apt-get update; apt-get install -y --no-install-recommends autoconf automake bzip2 dpkg-dev file g++ gcc imagemagick libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgdbm-dev libglib2.0-dev libgmp-dev libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmaxminddb-dev libncurses5-dev libncursesw5-dev libpng-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt-dev libyaml-dev make patch unzip xz-utils zlib1g-dev  $( if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then echo 'default-libmysqlclient-dev'; else echo 'libmysqlclient-dev'; fi ) ; rm -rf /var/lib/apt/lists/* 1
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates curl netbase wget tzdata ; rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends git mercurial openssh-client subversion  procps && rm -rf /var/lib/apt/lists/* 1
apk add --no-cache ca-certificates mailcap 1
set -eux; mkdir -p /config/caddy /data/caddy /etc/caddy /usr/share/caddy ; wget -O /etc/caddy/Caddyfile "https://github.com/caddyserver/dist/raw/69bb1c539b3ee03fc91271a71653a77ca1e9d131/config/Caddyfile"; wget -O /usr/share/caddy/index.html "https://github.com/caddyserver/dist/raw/69bb1c539b3ee03fc91271a71653a77ca1e9d131/welcome/index.html" 1
set -eux; apkArch="$(apk --print-arch)"; case "$apkArch" in x86_64)  binArch='amd64'; checksum='2e4903c04f1918710566d5bca2b7b7ed6e8319aa925275040a9d9af87198cbc202b1f76b8ce0282f4423da9afb8634a14b59dd420879a188d024c5cbcf32b771' ;; armhf)   binArch='armv6'; checksum='93648db05fabddb8b284d952895be26700908bcd3d3a4102529dc8ca9365c11e942672b9b19b64a4ed0b08880410b388f4c89276bf83e5dd77a7c4c5049c1619' ;; armv7)   binArch='armv7'; checksum='ada8f06d71c088e8f6cf872c427710ae236a44cb8f18c4b0ba58663f49db8beb7a5caee18d0b23bd67a8db94fd839e5273ff9cd1b928576b4748072279cfb335' ;; aarch64) binArch='arm64'; checksum='33421b53b12d642f2439321cd6bb6b72e93a5585601febad051b461cfe5cac09a983ce8b2f60bc8b045ee2a583e53ce1d595123f14f4bf6ea07c5c4da07b6465' ;; ppc64el|ppc64le) binArch='ppc64le'; checksum='bcd738433a37d5f5a47ed668ae517adbef5cb3aa406d1e449d6ea7eb077de4c85bfb199490929d97fb3c5d1edef40d49d1a7f080f8972e5a606f783362facb24' ;; s390x)   binArch='s390x'; checksum='bbeb8f6e6f9dadb306e4d73f85ada7cc2c2e1d3e29ef6db16b19bef915681c83f145bf96cd9ac2f1c4d551b7a25be5c9b9c642b59136ecdb08d77b2a3a081f37' ;; *) echo >&2 "error: unsupported architecture ($apkArch)"; exit 1 ; esac; wget -O /tmp/caddy.tar.gz "https://github.com/caddyserver/caddy/releases/download/v2.5.1/caddy_2.5.1_linux_${binArch}.tar.gz"; echo "$checksum  /tmp/caddy.tar.gz" | sha512sum -c; tar x -z -f /tmp/caddy.tar.gz -C /usr/bin caddy; rm -f /tmp/caddy.tar.gz; chmod +x /usr/bin/caddy; caddy version 1
apk add --no-cache git ca-certificates 1
set -eux; apkArch="$(apk --print-arch)"; case "$apkArch" in x86_64)  binArch='amd64'; checksum='889b63098037e4641cce5b355bd82535a4b6bbbc4aa16b8214108d0d847d288b52cd19017a477eedc9c066c2ec623310dd7909251888bc9432a7d7553ba9037e' ;; armhf)   binArch='armv6'; checksum='decfc298b900b62ee16e0dc92a05d3b61926b961de5ee10138ce9fc6cde85dba732928d4481e02e4290750c85a92c4c24c1850045eb16c0d6a75781ff1506964' ;; armv7)   binArch='armv7'; checksum='99819ca7b2d37ab93e0b6af8f41dbc16dec5844c47b64993c1c1c2df0567e4abbff55ca6e9642231bd68a1789d0ebbef36822362f0c29d6dcdb01d55b3669cba' ;; aarch64) binArch='arm64'; checksum='24203b66ed47ba5aaa358a9e84c6a13f48737d8dc2902fdc7e2218409ac1bde9f043f0bbdf7b66697c9f9263cf1272a73784e51a26eca94ff37bcda4c21ece87' ;; ppc64el|ppc64le) binArch='ppc64le'; checksum='b96d1e6bfced6288678d45b120988e0c9e386671526688d229ace91b8f40ae03ae98a31aca9bdbbdbb9b865037e606801e434594d49cb1654398f53b4f904fd4' ;; s390x)   binArch='s390x'; checksum='6af5190825ac0ff01a60c7bfe5dbfea999841b9b1cf8dfca337c30eabc4aa7c03ad4da948f3472954a94f53552c1ab0a7bbd76894af6eb218ae118de68481f78' ;; *) echo >&2 "error: unsupported architecture ($apkArch)"; exit 1 ; esac; wget -O /tmp/xcaddy.tar.gz "https://github.com/caddyserver/xcaddy/releases/download/v0.3.0/xcaddy_0.3.0_linux_${binArch}.tar.gz"; echo "$checksum  /tmp/xcaddy.tar.gz" | sha512sum -c; tar x -z -f /tmp/xcaddy.tar.gz -C /usr/bin xcaddy; rm -f /tmp/xcaddy.tar.gz; chmod +x /usr/bin/xcaddy; 1
apt-get update && apt-get install -y git dmsetup && apt-get clean 1
git clone https://github.com/google/cadvisor.git /go/src/github.com/google/cadvisor 1
cd /go/src/github.com/google/cadvisor && make 1
apk --no-cache add libc6-compat device-mapper findutils zfs build-base linux-headers python3 bash git wget cmake pkgconfig ndctl-dev && apk --no-cache add thin-provisioning-tools --repository http://dl-3.alpinelinux.org/alpine/edge/main/ && apk --no-cache add go==1.16.10-r0 --repository http://dl-3.alpinelinux.org/alpine/v3.14/community/ && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && rm -rf /var/cache/apk/* 1
wget https://sourceforge.net/projects/perfmon2/files/libpfm4/libpfm-4.11.0.tar.gz && echo "112bced9a67d565ff0ce6c2bb90452516d1183e5  libpfm-4.11.0.tar.gz" | sha1sum -c  && tar -xzf libpfm-4.11.0.tar.gz && rm libpfm-4.11.0.tar.gz 1
export DBG="-g -Wall" && make -e -C libpfm-4.11.0 && make install -C libpfm-4.11.0 1
git clone -b v02.00.00.3820 https://github.com/intel/ipmctl/ && cd ipmctl && mkdir output && cd output && cmake -DRELEASE=ON -DCMAKE_INSTALL_PREFIX=/ -DCMAKE_INSTALL_LIBDIR=/usr/local/lib .. && make -j all && make install 1
./build/build.sh 1
apk --no-cache add libc6-compat device-mapper findutils zfs ndctl && apk --no-cache add thin-provisioning-tools --repository http://dl-3.alpinelinux.org/alpine/edge/main/ && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && rm -rf /var/cache/apk/* 1
git clone -b 1.0 --depth 1 https://github.com/BVLC/caffe.git . && pip install --upgrade pip && cd python && for req in $(cat requirements.txt) pydot; do pip install $req; done && cd .. && git clone https://github.com/NVIDIA/nccl.git && cd nccl && make -j install && cd .. && rm -rf nccl && mkdir build && cd build && cmake -DUSE_CUDNN=1 -DUSE_NCCL=1 .. && make -j"$(nproc)" 1
git clone -b 1.0 --depth 1 https://github.com/BVLC/caffe.git . && pip install --upgrade pip && cd python && for req in $(cat requirements.txt) pydot; do pip install $req; done && cd .. && mkdir build && cd build && cmake -DCPU_ONLY=1 .. && make -j"$(nproc)" 1
set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; rm -rf /var/lib/apt/lists/*;  ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget --progress=dot:giga -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; };  ddist 'cassandra-bin.tgz' "cassandra/$CASSANDRA_VERSION/apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz"; echo "$CASSANDRA_SHA512 *cassandra-bin.tgz" | sha512sum --check --strict -;  ddist 'cassandra-bin.tgz.asc' "cassandra/$CASSANDRA_VERSION/apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; for key in $GPG_KEYS; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --verify cassandra-bin.tgz.asc cassandra-bin.tgz; rm -rf "$GNUPGHOME";  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  mkdir -p "$CASSANDRA_HOME"; tar --extract --file cassandra-bin.tgz --directory "$CASSANDRA_HOME" --strip-components 1; rm cassandra-bin.tgz*;  [ ! -e "$CASSANDRA_CONF" ]; mv "$CASSANDRA_HOME/conf" "$CASSANDRA_CONF"; ln -sT "$CASSANDRA_CONF" "$CASSANDRA_HOME/conf";  dpkgArch="$(dpkg --print-architecture)"; case "$dpkgArch" in ppc64el) grep -- '-Xss256k' "$CASSANDRA_CONF/cassandra-env.sh"; sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONF/cassandra-env.sh"; grep -- '-Xss512k' "$CASSANDRA_CONF/cassandra-env.sh"; ;; esac;  mkdir -p "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chown -R cassandra:cassandra "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chmod 777 "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chmod -R a+rwX "$CASSANDRA_CONF"; ln -sT /var/lib/cassandra "$CASSANDRA_HOME/data"; ln -sT /var/log/cassandra "$CASSANDRA_HOME/logs";  cassandra -v 1
set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; rm -rf /var/lib/apt/lists/*;  ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget --progress=dot:giga -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; };  ddist 'cassandra-bin.tgz' "cassandra/$CASSANDRA_VERSION/apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz"; echo "$CASSANDRA_SHA512 *cassandra-bin.tgz" | sha512sum --check --strict -;  ddist 'cassandra-bin.tgz.asc' "cassandra/$CASSANDRA_VERSION/apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; for key in $GPG_KEYS; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --verify cassandra-bin.tgz.asc cassandra-bin.tgz; rm -rf "$GNUPGHOME";  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  mkdir -p "$CASSANDRA_HOME"; tar --extract --file cassandra-bin.tgz --directory "$CASSANDRA_HOME" --strip-components 1; rm cassandra-bin.tgz*;  [ ! -e "$CASSANDRA_CONF" ]; mv "$CASSANDRA_HOME/conf" "$CASSANDRA_CONF"; ln -sT "$CASSANDRA_CONF" "$CASSANDRA_HOME/conf";  dpkgArch="$(dpkg --print-architecture)"; case "$dpkgArch" in ppc64el) grep -- '^-Xss256k$' "$CASSANDRA_CONF/jvm.options"; sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONF/jvm.options"; grep -- '^-Xss512k$' "$CASSANDRA_CONF/jvm.options"; ;; esac;  mkdir -p "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chown -R cassandra:cassandra "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chmod 777 "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chmod -R a+rwX "$CASSANDRA_CONF"; ln -sT /var/lib/cassandra "$CASSANDRA_HOME/data"; ln -sT /var/log/cassandra "$CASSANDRA_HOME/logs";  cassandra -v 1
set -eux; apt-get update; apt-get install -y --no-install-recommends libjemalloc2 procps python3 iproute2 numactl ; rm -rf /var/lib/apt/lists/*; libjemalloc="$(readlink -e /usr/lib/*/libjemalloc.so.2)"; ln -sT "$libjemalloc" /usr/local/lib/libjemalloc.so; ldconfig 1
set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; rm -rf /var/lib/apt/lists/*;  ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget --progress=dot:giga -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; };  ddist 'cassandra-bin.tgz' "cassandra/$CASSANDRA_VERSION/apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz"; echo "$CASSANDRA_SHA512 *cassandra-bin.tgz" | sha512sum --check --strict -;  ddist 'cassandra-bin.tgz.asc' "cassandra/$CASSANDRA_VERSION/apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; for key in $GPG_KEYS; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --verify cassandra-bin.tgz.asc cassandra-bin.tgz; rm -rf "$GNUPGHOME";  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  mkdir -p "$CASSANDRA_HOME"; tar --extract --file cassandra-bin.tgz --directory "$CASSANDRA_HOME" --strip-components 1; rm cassandra-bin.tgz*;  [ ! -e "$CASSANDRA_CONF" ]; mv "$CASSANDRA_HOME/conf" "$CASSANDRA_CONF"; ln -sT "$CASSANDRA_CONF" "$CASSANDRA_HOME/conf";  dpkgArch="$(dpkg --print-architecture)"; case "$dpkgArch" in ppc64el) grep -- '^-Xss256k$' "$CASSANDRA_CONF/jvm-server.options"; sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONF/jvm-server.options"; grep -- '^-Xss512k$' "$CASSANDRA_CONF/jvm-server.options"; ;; esac;  mkdir -p "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chown -R cassandra:cassandra "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chmod 777 "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; chmod -R a+rwX "$CASSANDRA_CONF"; ln -sT /var/lib/cassandra "$CASSANDRA_HOME/data"; ln -sT /var/log/cassandra "$CASSANDRA_HOME/logs";  cassandra -v 1
sed -i 's/archive\.ubuntu\.com/us\.archive\.ubuntu\.com/' /etc/apt/sources.list 1
apt-get update && apt-get install -y --no-install-recommends curl gnupg git ca-certificates 1
apt-get update && apt-get install -y --no-install-recommends php php-curl php-iconv php-mbstring php-bcmath php-gmp 1
apt-get update && apt-get install -y nodejs 1
apt-get update && apt-get install -y --no-install-recommends python3 python3-pip 1
pip3 install 'idna==2.9' --force-reinstall 1
pip3 install tox 1
pip3 install aiohttp 1
pip3 install cryptography 1
ln -s /ccxt /usr/lib/node_modules/ 1
echo "export NODE_PATH=/usr/lib/node_modules" >> $HOME/.bashrc 1
cd python && python3 setup.py develop && cd .. 1
/ccxt/composer-install.sh 1
apt-get update && apt-get install -y --no-install-recommends zip unzip php-zip 1
mv /ccxt/composer.phar /usr/local/bin/composer 1
apt-get -y autoremove && apt-get clean && apt-get autoclean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
apt-get update && apt-get install -y build-essential libcurl4-openssl-dev libffi-dev tk-dev xz-utils curl lsb-release git libmemcached-dev make liblzma-dev libreadline-dev libbz2-dev llvm libncurses5-dev libsqlite3-dev wget pypy3 pypy3-lib python3-openssl libncursesw5-dev zlib1g-dev pkg-config libssl-dev 1
: "${CELERY_USER:?CELERY_USER build argument needs to be set and non-empty.}" 1
sh create-linux-user.sh 1
sh install-pyenv.sh 1
chmod gu+x /entrypoint 1
pyenv local python3.9 python3.8 python3.7 python3.10 1
pyenv exec python3.9 -m pip install --upgrade pip setuptools wheel && pyenv exec python3.8 -m pip install --upgrade pip setuptools wheel && pyenv exec python3.7 -m pip install --upgrade pip setuptools wheel && pyenv exec python3.10 -m pip install --upgrade pip setuptools wheel 1
pyenv exec python3.9 -m pip install -r requirements/dev.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt && pyenv exec python3.8 -m pip install -r requirements/dev.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt && pyenv exec python3.7 -m pip install -r requirements/dev.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt && pyenv exec python3.10 -m pip install -r requirements/dev.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt 1
apt-get update && apt-get install -y build-essential && apt-get install -y texlive && apt-get install -y texlive-latex-extra && apt-get install -y dvipng && apt-get install -y python3-sphinx && apt-get install -y gettext && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && rm -rf /var/lib/apt/lists/* 1
pip install -r /requirements/docs.txt -r /requirements/default.txt 1
sed -i 's/\r$//g' /start-docs 1
chmod +x /start-docs 1
microdnf install --nodocs bash       curl       iproute    keepalived-2.1.5 && rm /etc/keepalived/keepalived.conf && microdnf clean all 1
chmod +x init.sh 1
sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-* 1
sed -i 's|#baseurl=http://mirror.centos.org|baseurl=https://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-* 1
dnf -y install chrony firewalld lvm2 openssh-server openssh-clients python3 yum-utils  which && dnf clean all 1
systemctl enable chronyd firewalld sshd 1
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 1
dnf -y install docker-ce && dnf clean all && systemctl enable docker 1
dnf install epel-release -y && dnf makecache && dnf install sshpass -y 1
apt-get update && apt install python3-dev python3-venv gcc libaugeas0 libssl-dev libffi-dev ca-certificates openssl -y 1
tools/venv.py 1
yum -y install /usr/bin/ps nfs-utils && yum clean all 1
mkdir -p /exports 1
chmod 644 /tmp/index.html 1
apk add --no-cache openssl tar build-base tzdata postgresql-dev postgresql-client nodejs yarn git && mkdir -p /var/app && gem install bundler 1
apk add --no-cache musl ruby-full ruby-dev gcc make musl-dev openssl openssl-dev g++ linux-headers xz 1
bundle config set --local force_ruby_platform true 1
if [ "production" = "production" ]; then bundle config set without 'development test'; bundle install -j 4 -r 3; else bundle install -j 4 -r 3; fi 1
mkdir -p /app/log 1
if [ "production" = "production" ]; then SECRET_KEY_BASE=precompile_placeholder RAILS_LOG_TO_STDOUT=enabled bundle exec rake assets:precompile && rm -rf spec node_modules tmp/cache; fi 1
rm -rf /gems/ruby/3.0.0/cache/*.gem && find /gems/ruby/3.0.0/gems/ \( -name "*.c" -o -name "*.o" \) -delete 1
apk add --no-cache openssl tzdata postgresql-client imagemagick git && gem install bundler 1
if [ "production" != "production" ]; then apk add --no-cache nodejs yarn; fi 1
apk add --update --no-cache git py3-six py3-pygments py3-yaml py3-gevent libstdc++ py3-colorama py3-requests py3-icu py3-redis sed 1
apk add --no-cache --virtual build-deps py3-pip g++ python3-dev libffi-dev && pip3 install --no-cache-dir --upgrade pygments && pip3 install --no-cache-dir -r requirements.txt && apk del build-deps 1
mkdir -p /root/.cheat.sh/log/ && python3 lib/fetch.py fetch-all 1
apk add --update --no-cache py3-jinja2 py3-flask bash gawk 1
apt-get update && apt-get install -y software-properties-common 1
add-apt-repository universe 1
apt-get update && apt-get install -y apache2 curl git libapache2-mod-php7.4 php7.4 php7.4-mysql python3.4 python3-pip 1
pip3 install grpcio grpcio-tools 1
git clone -b v1.7.0 https://github.com/grpc/grpc 1
mkdir -p /tmp/grpc/examples/python/cloudcity 1
python3 -m grpc_tools.protoc -I../../../examples/protos --python_out=. --grpc_python_out=. ../../../examples/protos/cloudcity.proto 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y --no-install-recommends && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python3 python3-pip && pip3 install grpcio grpcio-tools && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
apt-get update && apt-get install -y --no-install-recommends dh-golang devscripts fakeroot dh-make clang git libdistro-info-perl dh-systemd build-essential curl gcc make libc6-dev.i386 python-docutils ca-certificates git-buildpackage llvm && curl -Sslk -o go.tar.gz "https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz" && tar -C /usr/local -xzf go.tar.gz && rm go.tar.gz && export PATH="/usr/local/go/bin:$PATH"; go version; mkdir -p /opt/cilium/ 1
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH" 1
apk add --no-cache make git && wget -O /Country.mmdb https://github.com/Dreamacro/maxmind-geoip/releases/latest/download/Country.mmdb 1
go mod download && make docker && mv ./bin/clash-docker /clash 1
apt-get update -y && env DEBIAN_FRONTEND=noninteractive apt-get install --yes --no-install-recommends python3-requests && apt-get clean 1
apt-get update -y && env DEBIAN_FRONTEND=noninteractive apt-get install --yes --no-install-recommends awscli brotli expect golang lsof mysql-client=8.0* ncdu netcat-openbsd openjdk-11-jre-headless openssl postgresql-client protobuf-compiler python3 python3-lxml python3-pip python3-requests python3-termcolor qemu-user-static sqlite3  telnet tree unixodbc wget zstd && apt-get clean 1
arch=${TARGETARCH:-amd64} && wget "https://dl.min.io/server/minio/release/linux-${arch}/archive/minio.RELEASE.2022-01-03T18-22-58Z" -O ./minio && wget "https://dl.min.io/client/mc/release/linux-${arch}/archive/mc.RELEASE.2022-01-05T23-52-51Z" -O ./mc && chmod +x ./mc ./minio 1
wget 'https://dlcdn.apache.org/hadoop/common/hadoop-3.3.1/hadoop-3.3.1.tar.gz' && tar -xvf hadoop-3.3.1.tar.gz && rm -rf hadoop-3.3.1.tar.gz 1
apt-get update && env DEBIAN_FRONTEND=noninteractive apt-get install --yes aspell curl git libxml2-utils moreutils python3-fuzzywuzzy python3-pip shellcheck yamllint && pip3 install black boto3 codespell dohq-artifactory PyGithub unidiff pylint==2.6.2 1
arch=${TARGETARCH:-amd64} && case $arch in amd64) act_arch=x86_64 ;; arm64) act_arch=$arch ;; esac && curl -o /tmp/act.tgz -L "https://github.com/nektos/act/releases/download/v0.2.25/act_Linux_${act_arch}.tar.gz" && tar xf /tmp/act.tgz -C /usr/bin act && rm /tmp/act.tgz && curl -o /tmp/actiolint.zip -L "https://github.com/rhysd/actionlint/releases/download/v1.6.8/actionlint_1.6.8_linux_${arch}.tar.gz" && tar xf /tmp/actiolint.zip -C /usr/bin actionlint && rm /tmp/actiolint.zip 1
apk add --no-cache git openssh bash 1
git clone https://github.com/ClickHouse/clickhouse-docs.git --depth=1 --branch=main /opt/clickhouse-docs 1
yarn config set registry https://registry.npmjs.org && yarn install && yarn cache clean 1
apt-get update -y && env DEBIAN_FRONTEND=noninteractive apt-get install --yes --no-install-recommends bash tzdata fakeroot debhelper parallel expect python3 python3-lxml python3-termcolor python3-requests curl  openssl netcat-openbsd telnet llvm-9 brotli 1
apt-get update && apt-get install ca-certificates lsb-release wget gnupg apt-transport-https --yes --no-install-recommends --verbose-versions && export LLVM_PUBKEY_HASH="bda960a8da687a275a2078d43c111d66b1c6a893a3275271beedf266c1ff4a0cdecb429c7a5cccf9f486ea7aa43fd27f" && wget -nv -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key && echo "${LLVM_PUBKEY_HASH} /tmp/llvm-snapshot.gpg.key" | sha384sum -c && apt-key add /tmp/llvm-snapshot.gpg.key && export CODENAME="$(lsb_release --codename --short | tr 'A-Z' 'a-z')" && echo "deb [trusted=yes] http://apt.llvm.org/${CODENAME}/ llvm-toolchain-${CODENAME}-14 main" >> /etc/apt/sources.list 1
apt-get update && apt-get install clang-14 debhelper devscripts gdb  git gperf lcov llvm-14 moreutils perl pigz pkg-config tzdata pv --yes --no-install-recommends 1
echo "TSAN_OPTIONS='verbosity=1000 halt_on_error=1 history_size=7 memory_limit_mb=46080'" >> /etc/environment; echo "UBSAN_OPTIONS='print_stacktrace=1'" >> /etc/environment; echo "MSAN_OPTIONS='abort_on_error=1 poison_in_dtor=1'" >> /etc/environment; echo "LSAN_OPTIONS='suppressions=/usr/share/clickhouse-test/config/lsan_suppressions.txt'" >> /etc/environment; ln -s /usr/lib/llvm-14/bin/llvm-symbolizer /usr/bin/llvm-symbolizer; 1
ln -snf "/usr/share/zoneinfo/Europe/Moscow" /etc/localtime && echo "Europe/Moscow" > /etc/timezone 1
apt-get update && apt-get --yes --allow-unauthenticated install clang-14 libllvm14 libclang-14-dev libmlir-14-dev 1
git clone https://github.com/ClickHouse-Extras/woboq_codebrowser --branch llvm-14 && cd woboq_codebrowser && cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang\+\+-14 -DCMAKE_C_COMPILER=clang-14 && make -j && cd .. && rm -rf woboq_codebrowser 1
apt-get update && apt-get install apt-transport-https apt-utils ca-certificates dnsutils gnupg iputils-ping lsb-release wget --yes --no-install-recommends --verbose-versions && export LLVM_PUBKEY_HASH="bda960a8da687a275a2078d43c111d66b1c6a893a3275271beedf266c1ff4a0cdecb429c7a5cccf9f486ea7aa43fd27f" && wget -nv -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key && echo "${LLVM_PUBKEY_HASH} /tmp/llvm-snapshot.gpg.key" | sha384sum -c && apt-key add /tmp/llvm-snapshot.gpg.key && export CODENAME="$(lsb_release --codename --short | tr 'A-Z' 'a-z')" && echo "deb [trusted=yes] https://apt.llvm.org/${CODENAME}/ llvm-toolchain-${CODENAME}-14 main" >> /etc/apt/sources.list && apt-get clean 1
apt-get update && apt-get install bash build-essential ccache clang-14 clang-tidy-14 cmake curl fakeroot gdb git gperf lld-14 llvm-14 llvm-14-dev moreutils ninja-build pigz rename software-properties-common tzdata --yes --no-install-recommends && apt-get clean 1
git clone --depth 1 https://github.com/tpoechtrager/apple-libtapi.git && cd apple-libtapi && INSTALLPREFIX=/cctools ./build.sh && ./install.sh && cd .. && rm -rf apple-libtapi 1
git clone --depth 1 https://github.com/tpoechtrager/cctools-port.git && cd cctools-port/cctools && ./configure --prefix=/cctools --with-libtapi=/cctools --target=x86_64-apple-darwin && make install && cd ../.. && rm -rf cctools-port 1
git clone --depth 1 https://github.com/tpoechtrager/cctools-port.git && cd cctools-port/cctools && ./configure --prefix=/cctools --with-libtapi=/cctools --target=aarch64-apple-darwin && make install && cd ../.. && rm -rf cctools-port 1
wget -nv https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.0.sdk.tar.xz 1
add-apt-repository ppa:ubuntu-toolchain-r/test --yes && apt-get update && apt-get install gcc-11 g++-11 --yes && apt-get clean 1
arch=${TARGETARCH:-amd64} && curl -Lo /tmp/nfpm.deb "https://github.com/goreleaser/nfpm/releases/download/v2.15.1/nfpm_${arch}.deb" && dpkg -i /tmp/nfpm.deb && rm /tmp/nfpm.deb 1
mkdir /workdir && chmod 777 /workdir 1
apt-get update && apt-get install ca-certificates lsb-release wget gnupg apt-transport-https --yes --no-install-recommends --verbose-versions && export LLVM_PUBKEY_HASH="bda960a8da687a275a2078d43c111d66b1c6a893a3275271beedf266c1ff4a0cdecb429c7a5cccf9f486ea7aa43fd27f" && wget -nv -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key && echo "${LLVM_PUBKEY_HASH} /tmp/llvm-snapshot.gpg.key" | sha384sum -c && apt-key add /tmp/llvm-snapshot.gpg.key && export CODENAME="$(lsb_release --codename --short | tr 'A-Z' 'a-z')" && echo "deb [trusted=yes] https://apt.llvm.org/${CODENAME}/ llvm-toolchain-${CODENAME}-14 main" >> /etc/apt/sources.list 1
apt-get update && apt-get install apt-transport-https bash brotli build-essential ca-certificates ccache clang-14 clang-tidy-14 cmake curl expect fakeroot gdb git gperf lld-14 llvm-14 lsof moreutils ninja-build psmisc python3 python3-lxml python3-pip python3-requests python3-termcolor rename software-properties-common tzdata unixodbc --yes --no-install-recommends 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --yes --no-install-recommends wget bash python curl python3-requests  git openssl python3-pip software-properties-common fonts-arphic-ukai fonts-arphic-uming fonts-ipafont-mincho fonts-ipafont-gothic fonts-unfonts-core xvfb ssh-client && apt-get autoremove --yes && apt-get clean && rm -rf /var/lib/apt/lists/* 1
pip3 install --ignore-installed --upgrade setuptools pip virtualenv 1
useradd --create-home --uid 1000 --user-group ubuntu && ssh-keyscan -t rsa github.com >> /etc/ssh/ssh_known_hosts 1
export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y --no-install-recommends ca-certificates git unzip locales locales exuberant-ctags build-essential && rm -rf /var/lib/apt/lists/* 1
sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen 1
cpanm Algorithm::Diff Digest::MD5 Parallel::ForkManager Regexp::Common Perl::LanguageServer Perl::Tidy && rm -rf $HOME/.cpanm 1
export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y --no-install-recommends ca-certificates git unzip && rm -rf /var/lib/apt/lists/* 1
cpanm Algorithm::Diff Digest::MD5 Parallel::ForkManager Regexp::Common && rm -rf $HOME/.cpanm 1
git clone https://github.com/AlDanial/cloc_submodule_test.git 1
apk update && apk add --no-cache wget curl git yarn build-base gcc abuild binutils binutils-doc gcc-doc zip 1
git clone --recurse-submodules https://github.com/cloudreve/Cloudreve.git 1
yarn install --network-timeout 1000000 1
yarn run build && find . -name "*.map" -type f -delete 1
zip -r - assets/build >assets.zip 1
tag_name=$(git describe --tags) && export COMMIT_SHA=$(git rev-parse --short HEAD) && go build -a -o cloudreve -ldflags " -X 'github.com/HFO4/cloudreve/pkg/conf.BackendVersion=$tag_name' -X 'github.com/HFO4/cloudreve/pkg/conf.LastCommit=$COMMIT_SHA'" 1
apk update && apk add --no-cache tzdata 1
cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo "Asia/Shanghai" > /etc/timezone 1
chmod +x ./cloudreve && mkdir -p /data/aria2 && chmod -R 766 /data/aria2 1
apt-get update && apt-get install -y --no-install-recommends autotools-dev build-essential git g++-multilib gcc-multilib gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev libssl-dev openssl ca-certificates curl libcurl4-openssl-dev unzip python-dev automake libtool-bin autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-8-jdk libpcre3-dev libgdiplus apt-transport-https && rm -rf /var/lib/apt/lists/* 1
DEBIAN_FRONTEND=noninteractive && wget --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/cmake/3.11/cmake-3.11.4.tar.gz && tar -xzvf cmake-3.11.4.tar.gz && cd cmake-3.11.4 && ./bootstrap --system-curl -- -DCMAKE_USE_OPENSSL=ON && make -j $(nproc) install && cd .. && rm -rf cmake-3.11.4 1
wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openmpi/1.10.7/openmpi-1.10.7.tar.gz | tar -xzf - && cd openmpi-1.10.7 && apt-get -y update && apt-get -y -f install && apt-get -y install libsysfs2 libsysfs-dev && ./configure --with-verbs --with-cuda=/usr/local/cuda --prefix=/usr/local/mpi && make -j $(nproc) install && cd .. && rm -rf openmpi-1.10.7 1
wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/libzip/1.1.2/libzip-1.1.2.tar.gz | tar -xzf - && cd libzip-1.1.2 && ./configure && make -j $(nproc) install && cd .. && rm -rf libzip-1.1.2 1
wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/opencv/3.1.0/opencv-3.1.0.tar.gz | tar -xzf - && cd opencv-3.1.0 && cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-3.1.0 . && make -j $(nproc) install && cd .. && rm -rf opencv-3.1.0 1
wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openblas/0.2.18/OpenBLAS-0.2.18.tar.gz | tar -xzf - && cd OpenBLAS-0.2.18 && make -j 2 MAKE_NB_JOBS=0 USE_OPENMP=1 | tee make.log && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log && grep -qF 'Use OpenMP in the multithreading.' make.log && make PREFIX=/usr/local/openblas install && cd .. && rm -rf OpenBLAS-0.2.18 1
BOOST_UNDERSCORE_VERSION=$(echo 1.60.0 | tr . _) && wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/boost/1.60.0/boost_$BOOST_UNDERSCORE_VERSION.tar.gz | tar -xzf - && cd boost_${BOOST_UNDERSCORE_VERSION} && ./bootstrap.sh --prefix=/usr/local/boost-1.60.0  && ./b2 -d0 -j $(nproc) install && cd .. && rm -rf boost_${BOOST_UNDERSCORE_VERSION} 1
PROTOBUF_STRING=protobuf-3.1.0 && wget -O - --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/protobuf/3.1.0/protobuf-3.1.0.tar.gz | tar -xzf - && cd $PROTOBUF_STRING && ./autogen.sh && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING && make -j $(nproc) install && cd .. && rm -rf $PROTOBUF_STRING 1
mkdir /usr/local/mklml && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/0.14/mklml_lnx_2018.0.3.20180406.tgz | tar -xzf - -C /usr/local/mklml && MKLDNN_STRING=mkl-dnn-0.14 && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/0.14/mkl-dnn-0.14.tar.gz | tar -xzf - && cd ${MKLDNN_STRING} && ln -s /usr/local external && mkdir -p build && cd build && cmake .. -DCMAKE_INSTALL_PREFIX=/ && make && make install DESTDIR=/usr/local && make install DESTDIR=/usr/local/mklml/mklml_lnx_2018.0.3.20180406 && cd ../.. && rm -rf ${MKLDNN_STRING} 1
mv /bin/sh /bin/sh.orig && ln -s -f /bin/bash /bin/sh && mkdir /usr/local/kaldi-c024e8aa && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/kaldi/c024e8aa/kaldi-c024e8aa.tar.gz | tar -xzf - --strip-components=1 -C /usr/local/kaldi-c024e8aa && cd /usr/local/kaldi-c024e8aa && cd tools && perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\1/' Makefile && ./extras/check_dependencies.sh && make -j $(nproc) all && cd ../src && perl -pi -e 's/-gencode arch=compute_20,code=sm_20//' cudamatrix/Makefile && ./configure --openblas-root=/usr/local/openblas --shared && make -j $(nproc) depend && make -j $(nproc) all && find /usr/local/kaldi-c024e8aa -name '*.o' -print0 | xargs -0 rm && for dir in /usr/local/kaldi-c024e8aa/src/*bin; do make -C $dir clean; done && mv -f /bin/sh.orig /bin/sh 1
wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/swig/3.0.10/swig-3.0.10.tar.gz -O - | tar xvfz - && cd swig-3.0.10 && ./configure --prefix=/usr/local/swig-3.0.10 --without-perl5 --without-alllang && make -j $(nproc) && make install && cd .. && rm -rf swig-3.0.10 1
/tmp/patches/patch_swig.sh /usr/local/share/swig/3.0.10 && rm -rfd /tmp/patches 1
wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/packages-microsoft-prod/deb/packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && apt-get -y -f install apt-transport-https && apt-get -y update && apt-get -y -f install dotnet-sdk-2.1 && rm ./packages-microsoft-prod.deb 1
wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/anaconda3/4.2.0/Anaconda3-4.2.0-Linux-x86_64.sh && bash Anaconda3-4.2.0-Linux-x86_64.sh -b && rm Anaconda3-4.2.0-Linux-x86_64.sh 1
CONDA_ENV_PATH=/tmp/conda-linux-cntk-py35-environment.yml; wget -q https://raw.githubusercontent.com/Microsoft/CNTK/master/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O "$CONDA_ENV_PATH" && /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35 --file "$CONDA_ENV_PATH" && rm -f "$CONDA_ENV_PATH" 1
git clone --depth=1 --recursive -b master https://github.com/Microsoft/CNTK.git cntksrc && cd cntksrc && MKLML_VERSION_DETAIL=mklml_lnx_2018.0.3.20180406 && CONFIGURE_OPTS= --with-kaldi=/usr/local/kaldi-c024e8aa --with-py35-path=/root/anaconda3/envs/cntk-py35" && mkdir -p build/cpu/release && cd build/cpu/release && ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas && make -j"$(nproc)" all && cd ../../.. && mkdir -p build-mkl/cpu/release && cd build-mkl/cpu/release && ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/mklml/${MKLML_VERSION_DETAIL} && make -j"$(nproc)" all 1
cd cntksrc/Examples/Image/DataSets/CIFAR-10 && python install_cifar10.py && cd ../../../.. 1
cd cntksrc/Examples/Image/DataSets/MNIST && python install_mnist.py && cd ../../../.. 1
apk add --no-cache krb5-server && rm -rf /var/cache/apk/* 1
kdb5_util create -s -P kpass && kadmin.local -q "addprinc -pw psql tester@MY.EX" && kadmin.local -q "addprinc -randkey postgres/gss_cockroach_1.gss_default@MY.EX" 1
apt-get update && apt-get install --yes --no-install-recommends ca-certificates curl 1
mkdir /opt/forward-reference-version /opt/bidirectional-reference-version && curl -fsSL https://binaries.cockroachdb.com/cockroach-v2.0.0.linux-amd64.tgz | tar xz -C /opt/forward-reference-version --strip-components=1 && curl -fsSL https://binaries.cockroachdb.com/cockroach-v2.0.0.linux-amd64.tgz | tar xz -C /opt/bidirectional-reference-version --strip-components=1 1
apt-get install --yes --no-install-recommends openjdk-8-jdk && curl -fsSL https://github.com/cockroachdb/finagle-postgres/archive/94b1325270.tar.gz | tar xz && cd finagle-postgres-* && ./sbt assembly && mv target/scala-2.11/finagle-postgres-tests.jar /opt/finagle-postgres-tests.jar && rm -rf /finagle-postgres-* ~/.ivy2 1
curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg > /etc/apt/trusted.gpg.d/yarn.asc && echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list && curl -fsSL https://packages.microsoft.com/keys/microsoft.asc > /etc/apt/trusted.gpg.d/microsoft.asc && echo "deb https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod/ bionic main" > /etc/apt/sources.list.d/microsoft.list && apt-get install --yes --no-install-recommends gnupg && curl https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb > erlang-solutions_2.0_all.deb && dpkg -i erlang-solutions_2.0_all.deb && apt-get update && apt-get install --yes --no-install-recommends dotnet-sdk-2.1 dotnet-runtime-2.1 expect elixir esl-erlang libc6-dev libcurl4 libpq-dev libpqtypes-dev make maven nodejs gcc golang php-cli php-pgsql postgresql-client python python-psycopg2 ruby ruby-pg xmlstarlet yarn 1
curl -fsSL https://github.com/benesch/autouseradd/releases/download/1.0.0/autouseradd-1.0.0-amd64.tar.gz | tar xz -C /usr --strip-components 1 1
(cd /testdata/csharp && dotnet restore --no-cache) && xmlstarlet ed --inplace --subnode /configuration --type elem --name packageRestore --subnode '$prev' --type elem --name add --insert '$prev' --type attr --name key --value enabled --insert '$prev' --type attr --name value --value false --delete /configuration/packageSources ~/.nuget/NuGet/NuGet.Config 1
xmlstarlet ed --inplace --subnode /_:settings --type elem --name localRepository --value /var/lib/maven/repository /usr/share/maven/conf/settings.xml && (cd /testdata/java && mvn -Dtest=NoopTest dependency:go-offline package) && xmlstarlet ed --inplace --subnode /_:settings --type elem --name offline --value true /usr/share/maven/conf/settings.xml 1
(cd /testdata/node && yarn install && mv node_modules /usr/lib/node) && apt-get purge --yes yarn 1
apt-get purge --yes curl xmlstarlet && rm -rf /tmp/* /var/lib/apt/lists/* /testdata 1
apt-get install -y software-properties-common python 1
add-apt-repository ppa:chris-lea/node.js 1
echo "deb http://us.archive.ubuntu.com/ubuntu/ precise universe" >> /etc/apt/sources.list 1
mkdir /var/www 1
apk add --no-cache -vv git docker make protoc protobuf-dev 1
--mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build go mod download 1
--mount=target=. --mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/root/.cache/golangci-lint BUILD_TAGS=${BUILD_TAGS} GIT_TAG=${GIT_TAG} make -f builder.Makefile lint 1
--mount=target=. --mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build GOOS=${TARGETOS} GOARCH=${TARGETARCH} BUILD_TAGS=${BUILD_TAGS} GIT_TAG=${GIT_TAG} make COMPOSE_BINARY=/out/docker-compose -f builder.Makefile compose-plugin 1
--mount=target=. --mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build BUILD_TAGS=${BUILD_TAGS} GIT_TAG=${GIT_TAG} make COMPOSE_BINARY=/out/docker-compose -f builder.Makefile cross 1
--mount=target=. --mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build BUILD_TAGS=${BUILD_TAGS} GIT_TAG=${GIT_TAG} make -f builder.Makefile test 1
go install github.com/kunalkushwaha/ltag@latest 1
--mount=target=. make -f builder.Makefile check-license-headers 1
--mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build go mod tidy 1
make -f builder.Makefile check-go-mod 1
--mount=target=. --mount=target=/root/.cache,type=cache go build -o /out/docsgen ./docs/yaml/main/generate.go 1
apk add --no-cache rsync git 1
--mount=target=/context --mount=target=.,type=tmpfs < set -e rsync -a /context/. . docsgen --formats "md,yaml" --source "docs/reference" mkdir /out cp -r docs/reference /out 1
--mount=target=/context --mount=target=.,type=tmpfs < set -e rsync -a /context/. . git add -A rm -rf docs/reference/* cp -rf /out/* ./docs/ if [ -n "$(git status --porcelain -- docs/reference)" ]; then echo >&2 'ERROR: Docs result differs. Please update with "make docs"' git status --porcelain -- docs/reference exit 1 fi 1
echo "SUCCESS" 1
echo "foo" > /tmp/expected 1
--mount=type=secret,id=mysecret cat /run/secrets/mysecret > /tmp/actual 1
diff /tmp/expected /tmp/actual 1
apk add --no-cache openssh-client 1
--mount=type=ssh,id=fake-ssh,required=true diff <(ssh-add -L) <(cat /compose/fake_rsa.pub) 1
set -eux && apk add --no-cache ca-certificates curl dumb-init gnupg libcap openssl su-exec iputils jq libc6-compat iptables tzdata && gpg --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F && mkdir -p /tmp/build && cd /tmp/build && apkArch="$(apk --print-arch)" && case "${apkArch}" in aarch64) consulArch='arm64' ;; armhf) consulArch='arm' ;; x86) consulArch='386' ;; x86_64) consulArch='amd64' ;; *) echo >&2 "error: unsupported architecture: ${apkArch} (see https://releases.hashicorp.com/consul/${VERSION}/)" && exit 1 ;; esac && wget https://releases.hashicorp.com/consul/${VERSION}/consul_${VERSION}_linux_${consulArch}.zip && wget https://releases.hashicorp.com/consul/${VERSION}/consul_${VERSION}_SHA256SUMS && wget https://releases.hashicorp.com/consul/${VERSION}/consul_${VERSION}_SHA256SUMS.sig && gpg --batch --verify consul_${VERSION}_SHA256SUMS.sig consul_${VERSION}_SHA256SUMS && grep consul_${VERSION}_linux_${consulArch}.zip consul_${VERSION}_SHA256SUMS | sha256sum -c && unzip -d /tmp/build consul_${VERSION}_linux_${consulArch}.zip && cp /tmp/build/consul /bin/consul && if [ -f /tmp/build/EULA.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/EULA.txt /usr/share/doc/consul/EULA.txt; fi && if [ -f /tmp/build/TermsOfEvaluation.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/consul/TermsOfEvaluation.txt; fi && cd /tmp && rm -rf /tmp/build && gpgconf --kill all && apk del gnupg openssl && rm -rf /root/.gnupg && consul version 1
apk add -v --no-cache dumb-init libc6-compat iptables tzdata curl ca-certificates gnupg iputils libcap openssl su-exec jq 1
addgroup $BIN_NAME && adduser -S -G $BIN_NAME $BIN_NAME 1
set -eux && microdnf install -y ca-certificates curl gnupg libcap openssl iputils jq iptables wget unzip tar && wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64 && echo 'e874b55f3279ca41415d290c512a7ba9d08f98041b28ae7c2acb19a545f1c4df /usr/bin/dumb-init' > dumb-init-shasum && sha256sum --check dumb-init-shasum && chmod +x /usr/bin/dumb-init 1
groupadd $BIN_NAME && adduser --uid 100 --system -g $BIN_NAME $BIN_NAME 1
apk update && apk add iptables 1
mkdir -p /test_dir && chown -R nobody:nogroup /test_dir 1
(curl -sL https://aka.ms/InstallAzureCLIDeb | bash) && (curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -) && (echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list) && apt-get update && apt-get install -y kubectl && rm -rf /var/lib/apt/lists/* 1
curl -sL https://github.com/jpillora/chisel/releases/download/v1.7.6/chisel_1.7.6_linux_amd64.gz | gunzip > /usr/local/bin/chisel && echo "58037ef897ec155a03ea193df4ec618a  /usr/local/bin/chisel" | md5sum -c && chmod a+x /usr/local/bin/chisel 1
wget -O /THIRD-PARTY-LICENSES-20200824.tar.gz https://corretto.aws/downloads/resources/licenses/alpine/THIRD-PARTY-LICENSES-20200824.tar.gz && echo "82f3e50e71b2aee21321b2b33de372feed5befad6ef2196ddec92311bc09becb  /THIRD-PARTY-LICENSES-20200824.tar.gz" | sha256sum -c - && tar x -ovzf THIRD-PARTY-LICENSES-20200824.tar.gz && rm -rf THIRD-PARTY-LICENSES-20200824.tar.gz && wget -O /etc/apk/keys/amazoncorretto.rsa.pub https://apk.corretto.aws/amazoncorretto.rsa.pub && SHA_SUM="6cfdf08be09f32ca298e2d5bd4a359ee2b275765c09b56d514624bf831eafb91" && echo "${SHA_SUM}  /etc/apk/keys/amazoncorretto.rsa.pub" | sha256sum -c - && echo "https://apk.corretto.aws" >> /etc/apk/repositories && apk add --no-cache amazon-corretto-18=18.0.1.10.1-r0 1
wget -O /THIRD-PARTY-LICENSES-20200824.tar.gz https://corretto.aws/downloads/resources/licenses/alpine/THIRD-PARTY-LICENSES-20200824.tar.gz && echo "82f3e50e71b2aee21321b2b33de372feed5befad6ef2196ddec92311bc09becb  /THIRD-PARTY-LICENSES-20200824.tar.gz" | sha256sum -c - && tar x -ovzf THIRD-PARTY-LICENSES-20200824.tar.gz && rm -rf THIRD-PARTY-LICENSES-20200824.tar.gz && wget -O /etc/apk/keys/amazoncorretto.rsa.pub https://apk.corretto.aws/amazoncorretto.rsa.pub && SHA_SUM="6cfdf08be09f32ca298e2d5bd4a359ee2b275765c09b56d514624bf831eafb91" && echo "${SHA_SUM}  /etc/apk/keys/amazoncorretto.rsa.pub" | sha256sum -c - && echo "https://apk.corretto.aws" >> /etc/apk/repositories && apk add --no-cache amazon-corretto-8-jre=8.332.08.1-r0 && ln -s -f ../lib/jvm/default-jvm/jre/bin/java /usr/bin/java && ln -s -f ../lib/jvm/default-jvm/jre/bin/jjs /usr/bin/jjs && ln -s -f ../lib/jvm/default-jvm/jre/bin/keytool /usr/bin/keytool && ln -s -f ../lib/jvm/default-jvm/jre/bin/pack200 /usr/bin/pack200 && ln -s -f ../lib/jvm/default-jvm/jre/bin/rmid /usr/bin/rmid && ln -s -f ../lib/jvm/default-jvm/jre/bin/rmiregistry /usr/bin/rmiregistry && ln -s -f ../lib/jvm/default-jvm/jre/bin/unpack200 /usr/bin/unpack200 1
set -ux && apt-get update && apt-get install -y --no-install-recommends curl ca-certificates gnupg software-properties-common fontconfig && curl -fL https://apt.corretto.aws/corretto.key | apt-key add - && add-apt-repository 'deb https://apt.corretto.aws stable main' && mkdir -p /usr/share/man/man1 && apt-get update && apt-get install -y java-17-amazon-corretto-jdk=1:17.0.3.6-1 binutils && jlink --add-modules "$(java --list-modules | sed -e 's/@[0-9].*$/,/' | tr -d \\n)" --no-man-pages --no-header-files --strip-debug --output /opt/corretto-slim && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false curl gnupg software-properties-common binutils java-17-amazon-corretto-jdk=1:17.0.3.6-1 && mkdir -p /usr/lib/jvm && mv /opt/corretto-slim /usr/lib/jvm/java-17-amazon-corretto && jdk_tools="java keytool rmid rmiregistry javac jaotc jlink jmod jhsdb jar jarsigner javadoc javap jcmd jconsole jdb jdeps jdeprscan jimage jinfo jmap jps jrunscript jshell jstack jstat jstatd serialver" && priority=$(echo "117.0.3.6-1" | sed "s/\(\.\|-\)//g") && for i in ${jdk_tools}; do update-alternatives --install /usr/bin/$i $i /usr/lib/jvm/java-17-amazon-corretto/bin/$i ${priority}; done 1
wget -O /THIRD-PARTY-LICENSES-20200824.tar.gz https://corretto.aws/downloads/resources/licenses/alpine/THIRD-PARTY-LICENSES-20200824.tar.gz && echo "82f3e50e71b2aee21321b2b33de372feed5befad6ef2196ddec92311bc09becb  /THIRD-PARTY-LICENSES-20200824.tar.gz" | sha256sum -c - && tar x -ovzf THIRD-PARTY-LICENSES-20200824.tar.gz && rm -rf THIRD-PARTY-LICENSES-20200824.tar.gz && wget -O /etc/apk/keys/amazoncorretto.rsa.pub https://apk.corretto.aws/amazoncorretto.rsa.pub && SHA_SUM="6cfdf08be09f32ca298e2d5bd4a359ee2b275765c09b56d514624bf831eafb91" && echo "${SHA_SUM}  /etc/apk/keys/amazoncorretto.rsa.pub" | sha256sum -c - && echo "https://apk.corretto.aws" >> /etc/apk/repositories && apk add --no-cache amazon-corretto-8=8.332.08.1-r0 1
set -eux && apt-get update && apt-get install -y --no-install-recommends curl ca-certificates gnupg software-properties-common fontconfig java-common && curl -fL https://apt.corretto.aws/corretto.key | apt-key add - && add-apt-repository 'deb https://apt.corretto.aws stable main' && mkdir -p /usr/share/man/man1 || true && apt-get update && apt-get install -y java-11-amazon-corretto-jdk=1:11.0.15.9-1 && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false curl gnupg software-properties-common 1
set -xe; microdnf update --disableplugin=subscription-manager -y && rm -rf /var/cache/yum; microdnf install --enablerepo=couchdb -y couchdb-3.2.0; microdnf clean all; rm -rf /var/cache/yum; rm /opt/couchdb/etc/default.d/10-filelog.ini; find /opt/couchdb \! \( -user couchdb -group 0 \) -exec chown -f couchdb:0 '{}' +; find /opt/couchdb/etc -type d ! -perm 0755 -exec chmod -f 0755 '{}' +; find /opt/couchdb/etc -type f ! -perm 0644 -exec chmod -f 0644 '{}' +; chmod 777 /opt/couchdb/data 1
set -xe; microdnf update --disableplugin=subscription-manager -y && rm -rf /var/cache/yum; microdnf install --enablerepo=couchdb -y couchdb-3.1.2; microdnf clean all; rm -rf /var/cache/yum; rm /opt/couchdb/etc/default.d/10-filelog.ini; find /opt/couchdb \! \( -user couchdb -group 0 \) -exec chown -f couchdb:0 '{}' +; find /opt/couchdb/etc -type d ! -perm 0755 -exec chmod -f 0755 '{}' +; find /opt/couchdb/etc -type f ! -perm 0644 -exec chmod -f 0644 '{}' +; chmod 777 /opt/couchdb/data 1
apt-get update -y && apt-get install -y apt-transport-https ca-certificates curl dirmngr gnupg libicu63 libssl1.1 openssl && apt-get update -y && apt-get install -y --no-install-recommends libmozjs-60-0 && rm -rf /var/lib/apt/lists/* 1
set -eux; apt-get update -y && apt-get install -y --no-install-recommends build-essential libmozjs-60-dev erlang-nox erlang-reltool erlang-dev erlang-dialyzer git libcurl4-openssl-dev libicu-dev python3 libpython3-dev python3-pip python3-sphinx python3-setuptools wget 1
set -eux; pip3 install --upgrade sphinx_rtd_theme nose requests hypothesis 1
set -eux; wget https://www.foundationdb.org/downloads/6.3.9/ubuntu/installers/foundationdb-clients_6.3.9-1_amd64.deb; wget https://www.foundationdb.org/downloads/6.3.9/ubuntu/installers/foundationdb-server_6.3.9-1_amd64.deb; dpkg -i ./foundationdb*deb; pkill -f fdb || true; pkill -f foundation || true; rm -rf ./foundationdb*deb 1
set -eux; curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -; echo 'deb https://deb.nodesource.com/node_10.x buster main' > /etc/apt/sources.list.d/nodesource.list; echo 'deb-src https://deb.nodesource.com/node_10.x buster main' >> /etc/apt/sources.list.d/nodesource.list; apt-get update -y && apt-get install -y nodejs; npm install -g grunt-cli 1
git clone https://github.com/apache/couchdb.git /usr/src/couchdb 1
git fetch origin && git checkout main && ./configure $configure_options --spidermonkey-version $spidermonkey_versio && make release 1
find /opt/couchdb \! \( -user couchdb -group couchdb \) -exec chown -f couchdb:couchdb '{}' + 1
docker-php-ext-enable redis igbinary msgpack apcu imagick yaml memcached xdebug zephir_parser 1
go build -v -ldflags="-s -w" 1
apt-get update && apt-get -y upgrade && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common pkg-config wget gnupg git apt-transport-https ca-certificates && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && add-apt-repository "deb https://apt.llvm.org/buster/ llvm-toolchain-buster-12 main"  && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y llvm-12 clang-12 libclang-12-dev clang-12 make && rm -rf /var/lib/apt/lists/*; 1
update-alternatives --install /usr/bin/cc cc /usr/bin/clang-12 100 1
update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-12 100 1
wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz -O - | tar -xz & cd openssl-1.1.1l && ./Configure no-shared no-async --prefix=/openssl --openssldir=/openssl/ssl linux-x86_64-clang && make depend && make -j $(nproc) && make install_sw && make install_ssldirs && cd .. && rm -rf 1.1.1l 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --assume-yes -y curl pkg-config wget llvm libclang-dev gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 binutils make git automake autoconf ca-certificates gcc g++ mingw-w64-x86-64-dev && rm -rf /var/lib/apt/lists/*; 1
wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz -O - | tar -xz 1
./Configure --prefix=/openssl --openssldir=/openssl/lib --cross-compile-prefix=x86_64-w64-mingw32- mingw64 && make && make install_sw && make install_ssldirs && cd .. && rm -rf /openssl-1.1.1l 1
update-alternatives --auto x86_64-w64-mingw32-g++ 1
update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix 1
apt-get update && apt-get -y upgrade && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common pkg-config wget apt-transport-https ca-certificates && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && add-apt-repository "deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-12 main"  && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y gcc-multilib g++-multilib && DEBIAN_FRONTEND=noninteractive apt-get install -y llvm-12 clang-12 libclang-12-dev clang-12 make libc6 libc6-dev libc6-arm64-cross libc6-dev-arm64-cross gcc-aarch64-linux-gnu g++-aarch64-linux-gnu && rm -rf /var/lib/apt/lists/*; 1
update-alternatives --install /usr/bin/clang-cpp clang-cpp /usr/bin/clang-cpp-12 100 1
wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz -O - | tar -xz & cd openssl-1.1.1l && ./Configure --prefix=/openssl --openssldir=/openssl/lib linux-aarch64 && make depend && make -j $(nproc) && make install_sw && make install_ssldirs && cd .. && rm -rf openssl-1.1.1l 1
apk add --no-cache bash build-base cmake curl git libuuid linux-headers make meson pkgconfig python3 python3-dev qt5-qtbase qt5-qtsvg-dev qt5-qttools-dev shadow su-exec unzip wget 1
git clone --recurse-submodules https://github.com/rizinorg/cutter.git /opt/cutter && mkdir -p /opt/cutter/build && cd /opt/cutter/build && cmake .. && cmake --build . -j $(grep -c ^processor /proc/cpuinfo) 1
apk add --no-cache bash cabextract libuuid qt5-qtbase qt5-qtsvg-dev shadow su-exec 1
useradd cutter && mkdir /var/sharedFolder && mkdir -p /home/cutter/.config/rizin && touch /home/cutter/.rizinrc && chown -R cutter:cutter /var/sharedFolder && chown -R cutter:cutter /home/cutter/ 1
go get -d -v && go build -o tester . 1
git clone https://github.com/dapr/fortio.git 1
cd fortio && git checkout v1.24.0-dapr && go build 1
apt-get update && apt-get install -y wget git unzip && apt-get clean 1
install-php-extensions curl zip 1
composer install --no-dev -o -n 1
mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini" 1
mvn package 1
set -eux; case "$(dpkg --print-architecture)" in amd64) DART_SHA256=dc57e88d3c60cbd5ee738505fed804d854bfb1b30bdff9f218bb1d1085ec8173; SDK_ARCH="x64";; armhf) DART_SHA256=34bd7665d677eb201c3eb78b8e26eb7d3ef05818815005869f0b166c59e1d909; SDK_ARCH="arm";; arm64) DART_SHA256=99c787a521458e6fd3d402bff47f4b4c47c5ad32727f9b3a204310fc25e3b14a; SDK_ARCH="arm64";; esac; SDK="dartsdk-linux-${SDK_ARCH}-release.zip"; BASEURL="https://storage.googleapis.com/dart-archive/channels"; URL="$BASEURL/beta/release/2.18.0-165.1.beta/sdk/$SDK"; echo "SDK: $URL" >> dart_setup.log ; curl -fLO "$URL"; echo "$DART_SHA256 *$SDK" | sha256sum --check --status --strict -; unzip "$SDK" && mv dart-sdk "$DART_SDK" && rm "$SDK" && chmod 755 "$DART_SDK" && chmod 755 "$DART_SDK/bin"; 1
set -eux; case "$(dpkg --print-architecture)" in amd64) DART_SHA256=68f9a09ac61aab1c135ad2e64a39bfac088900d439941dee275d8ea8c8541b95; SDK_ARCH="x64";; armhf) DART_SHA256=75d1f5969ae12298d27b00bbe5866cdfcad422102929b52dc035c264ecc979a9; SDK_ARCH="arm";; arm64) DART_SHA256=c993247b5adaab432fbb4d4b144d5a52c4c4011656312d2b008ef6ec51eaeadb; SDK_ARCH="arm64";; esac; SDK="dartsdk-linux-${SDK_ARCH}-release.zip"; BASEURL="https://storage.googleapis.com/dart-archive/channels"; URL="$BASEURL/stable/release/2.17.3/sdk/$SDK"; echo "SDK: $URL" >> dart_setup.log ; curl -fLO "$URL"; echo "$DART_SHA256 *$SDK" | sha256sum --check --status --strict -; unzip "$SDK" && mv dart-sdk "$DART_SDK" && rm "$SDK" && chmod 755 "$DART_SDK" && chmod 755 "$DART_SDK/bin"; 1
useradd -u 10001 nonroot 1
apt-get update && apt-get install -y curl git less gcc 1
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y 1
git clone https://github.com/dandavison/delta.git 1
/root/.cargo/bin/cargo build --release 1
curl -fsSL https://deno.land/x/install/install.sh | sh 1
./vendor/bin/phpcs --ignore=_build . && ./vendor/bin/phpunit && ./vendor/bin/psalm --show-info=false && ./check-refs-readmes 1
pip3 install Sphinx sphinx_rtd_theme 1
make -e "SPHINXOPTS=-D language='en'" html 1
rm index.html && mv README.html index.html 1
apt-get update && apt-get -y install git nodejs libcurl4 && gem install bundler && rm -rf /var/lib/apt/lists/* 1
bundle install --system && rm -rf ~/.gem /root/.bundle/cache /usr/local/bundle/cache 1
thor docs:download --all && thor assets:compile && rm -rf /tmp 1
apk add python make g++ 1
npm run build && if [[ "production" == "production" ]]; then mv node_modules/node-webcrypto-ossl tmp && rm -rf node_modules && mkdir node_modules && mv tmp node_modules/node-webcrypto-ossl && npm install --no-optional; fi 1
adduser app -h /app -D 1
apt-get update && apt-get install -y --no-install-recommends ca-certificates curl htop iputils-ping jq less sysstat && curl -fsSL https://deb.nodesource.com/setup_14.x | bash - && apt-get install -y nodejs && rm -rf /var/lib/apt/lists/* 1
mkdir /dgraph 1
apk update && apk add --no-cache gcc libc-dev g++ graphviz git bash go imagemagick inkscape ttf-opensans curl fontconfig xdg-utils 1
go get github.com/mingrammer/round 1
curl -O https://noto-website.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip && mkdir -p /usr/share/fonts/NotoSansCJKjp && unzip NotoSansCJKjp-hinted.zip -d /usr/share/fonts/NotoSansCJKjp/ && rm NotoSansCJKjp-hinted.zip && fc-cache -fv 1
pip install black graphviz jinja2 1
apt-get update && apt-get -y install libssl1.1 wget busybox gettext-base && apt-get clean && rm -r /var/lib/apt/lists/* 1
cd /usr/local/bin && wget "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl" -O kubectl && chmod +x kubectl 1
cd /usr/local/bin && wget "https://releases.hashicorp.com/vault/1.5.0/vault_1.5.0_linux_amd64.zip" -O- | busybox unzip - && chmod +x vault 1
mkdir -p /opt/diem/bin 1
/usr/local/bin/diem-genesis-tool -h 1
/usr/local/bin/diem-operational-tool -h 1
apt-get update && apt-get install -y libssl1.1 ca-certificates && apt-get clean && rm -r /var/lib/apt/lists/* 1
/opt/diem/bin/diem_client -h 1
mkdir -p /github/home && mkdir -p /opt/cargo/ && mkdir -p /opt/git/ && /diem/scripts/dev_setup.sh -t -o -b -p -y - && apt-get clean && rm -rf /var/lib/apt/lists/* 1
[ -x "$(command -v shellcheck)" ] && [ -x "$(command -v hadolint)" ] && [ -x "$(command -v vault)" ] && [ -x "$(command -v terraform)" ] && [ -x "$(command -v kubectl)" ] && [ -x "$(command -v rustup)" ] && [ -x "$(command -v cargo)" ] && [ -x "$(command -v cargo-guppy)" ] && [ -x "$(command -v sccache)" ] && [ -x "$(command -v grcov)" ] && [ -x "$(command -v helm)" ] && [ -x "$(command -v aws)" ] && [ -x "$(command -v z3)" ] && [ -x "$(command -v "$HOME/.dotnet/tools/boogie")" ] && [ -x "$(xargs rustup which cargo --toolchain < /diem/rust-toolchain )" ] && [ -x "$(command -v tidy)" ] && [ -x "$(command -v xsltproc)" ] && [ -x "$(command -v javac)" ] && [ -x "$(command -v clang)" ] && [ -x "$(command -v python3)" ] && [ -x "$(command -v go)" ] && [ -x "$(command -v npm)" ] 1
/diem/scripts/dev_setup.sh -t -o -y -b -p -s 1
cd /usr/local/bin && wget "https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl" -O kubectl && chmod +x kubectl 1
mkdir /etc/cluster-test 1
apt-get update && apt-get install -y libssl1.1 nano net-tools tcpdump iproute2 netcat && apt-get clean && rm -r /var/lib/apt/lists/* 1
mkdir -p /opt/diem/bin  /diem/client/data/wallet/ 1
apt-get update && apt-get install -y procps 1
/diem/scripts/dev_setup.sh -b -p -i kubectl -i helm -i git -i unzip -i awscli -i vault 1
mkdir /etc/forge 1
mkdir -p /opt/diem/bin /opt/diem/etc /opt/diem/data 1
echo "deb http://deb.debian.org/debian bullseye main" > /etc/apt/sources.list.d/bullseye.list && echo "Package: *\nPin: release n=bullseye\nPin-Priority: 50" > /etc/apt/preferences.d/bullseye 1
apt-get update && apt-get --no-install-recommends --yes install wget curl libssl1.1 ca-certificates socat python3-botocore/bullseye awscli/bullseye && apt-get clean && rm -r /var/lib/apt/lists/* 1
ln -s /usr/bin/python3 /usr/local/bin/python 1
cd /usr/local/bin && wget https://azcopyvnext.azureedge.net/release20210226/azcopy_linux_amd64_10.9.0.tar.gz -O- | tar --gzip --wildcards --extract '*/azcopy' --strip-components=1 --no-same-owner && chmod +x azcopy 1
wget https://storage.googleapis.com/pub/gsutil.tar.gz -O- | tar --gzip --directory /opt --extract && ln -s /opt/gsutil/gsutil /usr/local/bin 1
if [ "$TARGETPLATFORM" = 'linux/arm64' ]; then apk --no-cache add python3 build-base && ln -sf /usr/bin/python3 /usr/bin/python ; fi 1
npm i --only=production --no-package-lock 1
rm *.tgz 1
apk upgrade --no-cache && apk add --no-cache ssmtp tzdata && mkdir /directus && chown node:node /directus 1
echo "update-notifier=false" >> ~/.npmrc 1
mkdir -p database extensions uploads 1
apk add --update python3 make g+ && rm -rf /var/cache/apk/* 1
set -eux; version='2.8.1'; apkArch="$(apk --print-arch)"; case "$apkArch" in x86_64)  arch='amd64';   sha256='f1a376964912a5fd7d588107ebe5185da77803244e15476d483c945959347ee2' ;; aarch64) arch='arm64';   sha256='4c588c8e62c9a84f1eecfba4c842fe363b91be87fd42e3b5dac45148a2f46c52' ;; armhf)   arch='armv6';   sha256='d711b3b6e77f3acc7c89fad9310413ef145751ac702627dc1fa89991bf3b6104' ;; armv7)   arch='armv7';   sha256='d2f2180c1a847056f9c5dcfd1d6fda4c6086d126204541e0ed047c04f30a0f91' ;; ppc64le) arch='ppc64le'; sha256='ca77cdfb7b1415869558c118b5e783bb9d695a74d8426a0bd8d8a39beb23fb85' ;; s390x)   arch='s390x';   sha256='3e505af15c562870869441d5d1f79988c3c666b9a4370894ecf2f064860b48ba' ;; *) echo >&2 "error: unsupported architecture: $apkArch"; exit 1 ;; esac; wget -O registry.tar.gz "https://github.com/distribution/distribution/releases/download/v${version}/registry_${version}_linux_${arch}.tar.gz"; echo "$sha256 *registry.tar.gz" | sha256sum -c -; tar --extract --verbose --file registry.tar.gz --directory /bin/ registry; rm registry.tar.gz; registry --version 1
npm ci --omit=dev 1
npm install --omit=dev 1
javac examples/*.java 1
jar cfe main.jar examples.HelloJava examples/*.class 1
apt-get update && apt-get install --no-install-suggests --no-install-recommends --yes python3-venv gcc libpython3-dev && python3 -m venv /venv && /venv/bin/pip install --upgrade pip setuptools wheel 1
/venv/bin/pip install --disable-pip-version-check -r /requirements.txt 1
wget -O- https://download.docker.com/linux/static/stable/$(uname -m)/docker-${DOCKER_CLI_VERSION}.tgz | tar -xzf - docker/docker --strip-component=1 && mv docker /usr/local/bin 1
npm i docsify-cli -g 1
set -ex; apk add --no-cache --virtual .fetch-deps gnupg ; 1
apk add --no-cache lua5.3 lua-filesystem lua-lyaml lua-http 1
set -eux && apk add --no-cache ca-certificates curl dumb-init gnupg libcap openssl su-exec iputils jq libc6-compat iptables tzdata && gpg --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F && mkdir -p /tmp/build && cd /tmp/build && apkArch="$(apk --print-arch)" && case "${apkArch}" in aarch64) consulArch='arm64' ;; armhf) consulArch='arm' ;; x86) consulArch='386' ;; x86_64) consulArch='amd64' ;; *) echo >&2 "error: unsupported architecture: ${apkArch} (see https://releases.hashicorp.com/consul/1.12.2/)" && exit 1 ;; esac && wget https://releases.hashicorp.com/consul/1.12.2/consul_1.12.2_linux_${consulArch}.zip && wget https://releases.hashicorp.com/consul/1.12.2/consul_1.12.2_SHA256SUMS && wget https://releases.hashicorp.com/consul/1.12.2/consul_1.12.2_SHA256SUMS.sig && gpg --batch --verify consul_1.12.2_SHA256SUMS.sig consul_1.12.2_SHA256SUMS && grep consul_1.12.2_linux_${consulArch}.zip consul_1.12.2_SHA256SUMS | sha256sum -c && unzip -d /tmp/build consul_1.12.2_linux_${consulArch}.zip && cp /tmp/build/consul /bin/consul && if [ -f /tmp/build/EULA.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/EULA.txt /usr/share/doc/consul/EULA.txt; fi && if [ -f /tmp/build/TermsOfEvaluation.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/consul/TermsOfEvaluation.txt; fi && cd /tmp && rm -rf /tmp/build && gpgconf --kill all && apk del gnupg openssl && rm -rf /root/.gnupg && consul version 1
set -eux && microdnf install -y ca-certificates curl gnupg libcap openssl iputils jq iptables wget unzip tar && wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64 && echo 'e874b55f3279ca41415d290c512a7ba9d08f98041b28ae7c2acb19a545f1c4df /usr/bin/dumb-init' > dumb-init-shasum && sha256sum --check dumb-init-shasum && chmod +x /usr/bin/dumb-init && gpg --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F && mkdir -p /tmp/build && cd /tmp/build && consulArch=amd64 && wget https://releases.hashicorp.com/consul/1.10.0/consul_1.10.0_linux_${consulArch}.zip && wget https://releases.hashicorp.com/consul/1.10.0/consul_1.10.0_SHA256SUMS && wget https://releases.hashicorp.com/consul/1.10.0/consul_1.10.0_SHA256SUMS.sig && gpg --batch --verify consul_1.10.0_SHA256SUMS.sig consul_1.10.0_SHA256SUMS && grep consul_1.10.0_linux_${consulArch}.zip consul_1.10.0_SHA256SUMS | sha256sum -c && unzip -d /tmp/build consul_1.10.0_linux_${consulArch}.zip && cp /tmp/build/consul /bin/consul && if [ -f /tmp/build/EULA.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/EULA.txt /usr/share/doc/consul/EULA.txt; fi && if [ -f /tmp/build/TermsOfEvaluation.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/consul/TermsOfEvaluation.txt; fi && cd /tmp && rm -rf /tmp/build && gpgconf --kill all && rm -rf /root/.gnupg && consul version 1
groupadd consul && adduser --uid 100 --system -g consul consul 1
yum install -y yum-utils deltarpm && yum makecache && yum install -y python3 openssl && yum upgrade -y && pip3 install "pip>=19,<19.3" --upgrade && yum clean all && rm -rf /var/cache/yum 1
groupadd crate && useradd -u 1000 -g crate -d /crate crate && export PLATFORM="$( case $(uname --m) in x86_64)  echo x64_linux ;; aarch64) echo aarch64_linux ;; esac)" && export CRATE_URL=https://cdn.crate.io/downloads/releases/cratedb/${PLATFORM}/crate-4.8.1.tar.gz && curl -fSL -O ${CRATE_URL} && curl -fSL -O ${CRATE_URL}.asc && export GNUPGHOME="$(mktemp -d)" && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 90C23FC6585BC0717F8FBFC37FAAE51A06F6EAEB && gpg --batch --verify crate-4.8.1.tar.gz.asc crate-4.8.1.tar.gz && rm -rf "$GNUPGHOME" crate-4.8.1.tar.gz.asc && tar -xf crate-4.8.1.tar.gz -C /crate --strip-components=1 && rm crate-4.8.1.tar.gz 1
curl -fSL -O https://cdn.crate.io/downloads/releases/crash_standalone_0.28.0 && curl -fSL -O https://cdn.crate.io/downloads/releases/crash_standalone_0.28.0.asc && export GNUPGHOME="$(mktemp -d)" && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 90C23FC6585BC0717F8FBFC37FAAE51A06F6EAEB && gpg --batch --verify crash_standalone_0.28.0.asc crash_standalone_0.28.0 && rm -rf "$GNUPGHOME" crash_standalone_0.28.0.asc && mv crash_standalone_0.28.0 /usr/local/bin/crash && chmod +x /usr/local/bin/crash 1
mkdir -p /data/data /data/log 1
set -eux; mkdir /state; chown elasticsearch /state; chmod +x /entrypoint.sh 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-25.0.1.tar.gz" && OTP_DOWNLOAD_SHA256="4426bdf717c9f359f592fceb5dc29b9cab152010cd258475730de4582de42bff" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && apk add --no-cache --virtual .fetch-deps curl ca-certificates && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && apk add --no-cache --virtual .build-deps dpkg-dev dpkg gcc g++ libc-dev linux-headers make autoconf ncurses-dev openssl-dev unixodbc-dev lksctp-tools-dev tar && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(getconf _NPROCESSORS_ONLN) && make install ) && rm -rf $ERL_TOP && find /usr/local -regex '/usr/local/lib/erlang/\(lib/\|erts-\).*/\(man\|doc\|obj\|c_src\|emacs\|info\|examples\)' | xargs rm -rf && find /usr/local -name src | xargs -r find | grep -v '\.hrl$' | xargs rm -v || true && find /usr/local -name src | xargs -r find | xargs rmdir -vp || true && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /usr/local | xargs -r strip --strip-all && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded && runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )" && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "${REBAR3_DOWNLOAD_SHA256}  rebar3-src.tar.gz" | sha256sum -c - && mkdir -p /usr/src/rebar3-src && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src && apk add --virtual .erlang-rundeps $runDeps lksctp-tools ca-certificates && apk del .fetch-deps .build-deps 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-23.3.4.14.tar.gz" && OTP_DOWNLOAD_SHA256="5f01b5183eba6cd3570b551476b6d790532bb0077138b2e29f18728c8a9b6666" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && apk add --no-cache --virtual .fetch-deps curl ca-certificates && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && apk add --no-cache --virtual .build-deps dpkg-dev dpkg gcc g++ libc-dev linux-headers make autoconf ncurses-dev openssl-dev unixodbc-dev lksctp-tools-dev tar && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(getconf _NPROCESSORS_ONLN) && make install ) && rm -rf $ERL_TOP && find /usr/local -regex '/usr/local/lib/erlang/\(lib/\|erts-\).*/\(man\|doc\|obj\|c_src\|emacs\|info\|examples\)' | xargs rm -rf && find /usr/local -name src | xargs -r find | grep -v '\.hrl$' | xargs rm -v || true && find /usr/local -name src | xargs -r find | xargs rmdir -vp || true && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /usr/local | xargs -r strip --strip-all && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded && runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )" && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "${REBAR3_DOWNLOAD_SHA256}  rebar3-src.tar.gz" | sha256sum -c - && mkdir -p /usr/src/rebar3-src && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src && apk add --virtual .erlang-rundeps $runDeps lksctp-tools ca-certificates && apk del .fetch-deps .build-deps 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-24.3.4.1.tar.gz" && OTP_DOWNLOAD_SHA256="98363e5489356ed4fb3616e44d430b3daf5bb286be800d1c331fba8ef35ca3a0" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && apk add --no-cache --virtual .fetch-deps curl ca-certificates && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && apk add --no-cache --virtual .build-deps dpkg-dev dpkg gcc g++ libc-dev linux-headers make autoconf ncurses-dev openssl-dev unixodbc-dev lksctp-tools-dev tar && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(getconf _NPROCESSORS_ONLN) && make install ) && rm -rf $ERL_TOP && find /usr/local -regex '/usr/local/lib/erlang/\(lib/\|erts-\).*/\(man\|doc\|obj\|c_src\|emacs\|info\|examples\)' | xargs rm -rf && find /usr/local -name src | xargs -r find | grep -v '\.hrl$' | xargs rm -v || true && find /usr/local -name src | xargs -r find | xargs rmdir -vp || true && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /usr/local | xargs -r strip --strip-all && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded && runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )" && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "${REBAR3_DOWNLOAD_SHA256}  rebar3-src.tar.gz" | sha256sum -c - && mkdir -p /usr/src/rebar3-src && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src && apk add --virtual .erlang-rundeps $runDeps lksctp-tools ca-certificates && apk del .fetch-deps .build-deps 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-22.3.4.26.tar.gz" && OTP_DOWNLOAD_SHA256="b3dae5c212e75c0fa0b2af7bef754fcefda41b8e0b367e739d40f2609856297e" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && apk add --no-cache --virtual .fetch-deps curl ca-certificates && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && apk add --no-cache --virtual .build-deps dpkg-dev dpkg gcc g++ libc-dev linux-headers make autoconf ncurses-dev openssl-dev unixodbc-dev lksctp-tools-dev tar && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(getconf _NPROCESSORS_ONLN) && make install ) && rm -rf $ERL_TOP && find /usr/local -regex '/usr/local/lib/erlang/\(lib/\|erts-\).*/\(man\|doc\|obj\|c_src\|emacs\|info\|examples\)' | xargs rm -rf && find /usr/local -name src | xargs -r find | grep -v '\.hrl$' | xargs rm -v || true && find /usr/local -name src | xargs -r find | xargs rmdir -vp || true && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /usr/local | xargs -r strip --strip-all && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded && runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )" && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "${REBAR3_DOWNLOAD_SHA256}  rebar3-src.tar.gz" | sha256sum -c - && mkdir -p /usr/src/rebar3-src && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src && apk add --virtual .erlang-rundeps $runDeps lksctp-tools ca-certificates && apk del .fetch-deps .build-deps 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-25.0.1.tar.gz" && OTP_DOWNLOAD_SHA256="4426bdf717c9f359f592fceb5dc29b9cab152010cd258475730de4582de42bff" && runtimeDeps='libodbc1 libsctp1 libwxgtk3.0' && buildDeps='unixodbc-dev libsctp-dev libwxgtk-webview3.0-gtk3-dev' && apt-get update && apt-get install -y --no-install-recommends $runtimeDeps && apt-get install -y --no-install-recommends $buildDeps && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(nproc) && make -j$(nproc) docs DOC_TARGETS=chunks && make install install-docs DOC_TARGETS=chunks ) && find /usr/local -name examples | xargs rm -rf && apt-get purge -y --auto-remove $buildDeps && rm -rf $ERL_TOP /var/lib/apt/lists/* 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-25.0.1.tar.gz" && OTP_DOWNLOAD_SHA256="4426bdf717c9f359f592fceb5dc29b9cab152010cd258475730de4582de42bff" && fetchDeps=' curl ca-certificates' && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && runtimeDeps=' libodbc1 libssl1.1 libsctp1 ' && buildDeps=' autoconf dpkg-dev gcc g++ make libncurses-dev unixodbc-dev libssl-dev libsctp-dev ' && apt-get install -y --no-install-recommends $runtimeDeps && apt-get install -y --no-install-recommends $buildDeps && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(nproc) && make install ) && find /usr/local -name examples | xargs rm -rf && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && mkdir -p /usr/src/rebar3-src && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "$REBAR3_DOWNLOAD_SHA256 rebar3-src.tar.gz" | sha256sum -c - && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src && apt-get purge -y --auto-remove $buildDeps $fetchDeps && rm -rf $ERL_TOP /var/lib/apt/lists/* 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-24.3.4.1.tar.gz" && OTP_DOWNLOAD_SHA256="98363e5489356ed4fb3616e44d430b3daf5bb286be800d1c331fba8ef35ca3a0" && fetchDeps=' curl ca-certificates' && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && runtimeDeps=' libodbc1 libssl1.1 libsctp1 ' && buildDeps=' autoconf dpkg-dev gcc g++ make libncurses-dev unixodbc-dev libssl-dev libsctp-dev ' && apt-get install -y --no-install-recommends $runtimeDeps && apt-get install -y --no-install-recommends $buildDeps && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(nproc) && make install ) && find /usr/local -name examples | xargs rm -rf && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && mkdir -p /usr/src/rebar3-src && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "$REBAR3_DOWNLOAD_SHA256 rebar3-src.tar.gz" | sha256sum -c - && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src && apt-get purge -y --auto-remove $buildDeps $fetchDeps && rm -rf $ERL_TOP /var/lib/apt/lists/* 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-24.3.4.1.tar.gz" && OTP_DOWNLOAD_SHA256="98363e5489356ed4fb3616e44d430b3daf5bb286be800d1c331fba8ef35ca3a0" && runtimeDeps='libodbc1 libsctp1 libwxgtk3.0' && buildDeps='unixodbc-dev libsctp-dev libwxgtk-webview3.0-gtk3-dev' && apt-get update && apt-get install -y --no-install-recommends $runtimeDeps && apt-get install -y --no-install-recommends $buildDeps && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(nproc) && make -j$(nproc) docs DOC_TARGETS=chunks && make install install-docs DOC_TARGETS=chunks ) && find /usr/local -name examples | xargs rm -rf && apt-get purge -y --auto-remove $buildDeps && rm -rf $ERL_TOP /var/lib/apt/lists/* 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-23.3.4.14.tar.gz" && OTP_DOWNLOAD_SHA256="5f01b5183eba6cd3570b551476b6d790532bb0077138b2e29f18728c8a9b6666" && fetchDeps=' curl ca-certificates' && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && runtimeDeps=' libodbc1 libssl1.1 libsctp1 ' && buildDeps=' autoconf dpkg-dev gcc g++ make libncurses-dev unixodbc-dev libssl-dev libsctp-dev ' && apt-get install -y --no-install-recommends $runtimeDeps && apt-get install -y --no-install-recommends $buildDeps && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(nproc) && make install ) && find /usr/local -name examples | xargs rm -rf && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" && REBAR3_DOWNLOAD_SHA256="cce1925d33240d81d0e4d2de2eef3616d4c17b0532ed004274f875e6607d25d2" && mkdir -p /usr/src/rebar3-src && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" && echo "$REBAR3_DOWNLOAD_SHA256 rebar3-src.tar.gz" | sha256sum -c - && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 && rm rebar3-src.tar.gz && cd /usr/src/rebar3-src && HOME=$PWD ./bootstrap && install -v ./rebar3 /usr/local/bin/ && rm -rf /usr/src/rebar3-src && apt-get purge -y --auto-remove $buildDeps $fetchDeps && rm -rf $ERL_TOP /var/lib/apt/lists/* 1
set -xe && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-22.3.4.26.tar.gz" && OTP_DOWNLOAD_SHA256="b3dae5c212e75c0fa0b2af7bef754fcefda41b8e0b367e739d40f2609856297e" && runtimeDeps='libodbc1 libsctp1 libwxgtk3.0' && buildDeps='unixodbc-dev libsctp-dev libwxgtk3.0-dev' && apt-get update && apt-get install -y --no-install-recommends $runtimeDeps && apt-get install -y --no-install-recommends $buildDeps && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" && mkdir -vp $ERL_TOP && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 && rm otp-src.tar.gz && ( cd $ERL_TOP && ./otp_build autoconf && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" && ./configure --build="$gnuArch" && make -j$(nproc) && make install ) && find /usr/local -name examples | xargs rm -rf && apt-get purge -y --auto-remove $buildDeps && rm -rf $ERL_TOP /var/lib/apt/lists/* 1
yarn global add express-gateway@1.16.11 && yarn cache clean 1
curl -fSL -o $GN_FILE https://sourceforge.net/projects/geonetwork/files/GeoNetwork_opensource/v${GN_VERSION}/${GN_FILE}/download && echo "$GN_DOWNLOAD_MD5 *${GN_FILE}" | md5sum -c && mkdir -p geonetwork && unzip -e $GN_FILE -d geonetwork && rm $GN_FILE && rm geonetwork/WEB-INF/lib/log4j-core-* && rm geonetwork/WEB-INF/lib/log4j-api* && curl -fSL -o apache-log4j-2.17.2-bin.tar.gz "https://dlcdn.apache.org/logging/log4j/2.17.2/apache-log4j-2.17.2-bin.tar.gz" && echo "cb3c349ae03b94ee9f066c8a1eaf9810a5cd56b9357180e5ff9c13d66c2aceea8b9095650ac4304dbcccea6c1280f255e940fde23045b6598896b655594bd75f apache-log4j-2.17.2-bin.tar.gz" | sha512sum -c && tar -xvzf apache-log4j-2.17.2-bin.tar.gz && cp apache-log4j-2.17.2-bin/log4j-core-2.17.2.jar "${CATALINA_HOME}/webapps/geonetwork/WEB-INF/lib/" && cp apache-log4j-2.17.2-bin/log4j-api-2.17.2.jar "${CATALINA_HOME}/webapps/geonetwork/WEB-INF/lib/" && rm -rf apache-log4j-2.17.2-bin* 1
apt-get update && apt-get install -y --no-install-recommends postgresql-client && rm -rf /var/lib/apt/lists/* 1
sed -i -e 's#<import resource="../config-db/${geonetwork.db.type:h2}.xml"/>#<!--<import resource="../config-db/${geonetwork.db.type:h2}.xml"/-->#g' "${CATALINA_HOME}/webapps/geonetwork/WEB-INF/config-node/srv.xml" && sed -i -e 's#<!--<import resource="../config-db/postgres.xml"/>-->#<import resource="../config-db/postgres.xml"/>#g' "${CATALINA_HOME}/webapps/geonetwork/WEB-INF/config-node/srv.xml" 1
cd /var/lib/jetty/webapps/geonetwork/ && curl -fSL -o geonetwork.war https://sourceforge.net/projects/geonetwork/files/GeoNetwork_opensource/v${GN_VERSION}/${GN_FILE}/download && echo "${GN_DOWNLOAD_MD5} *geonetwork.war" | md5sum -c && unzip -q geonetwork.war && rm geonetwork.war && rm /var/lib/jetty/webapps/geonetwork/WEB-INF/lib/log4j-core-* && rm /var/lib/jetty/webapps/geonetwork/WEB-INF/lib/log4j-api* && curl -fSL -o apache-log4j-2.17.1-bin.tar.gz "https://dlcdn.apache.org/logging/log4j/2.17.1/apache-log4j-2.17.1-bin.tar.gz" && echo "b7e948df6c6f57d903d990de2cc0270c1537b711285e9b6b91280db6ace38418fced713785b2c20512dd9a4238c2d1d0ceb414d9936df2ca110ff14993ae04dc apache-log4j-2.17.1-bin.tar.gz" | sha512sum -c && tar -xvzf apache-log4j-2.17.1-bin.tar.gz && cp apache-log4j-2.17.1-bin/log4j-core-2.17.1.jar /var/lib/jetty/webapps/geonetwork/WEB-INF/lib/ && cp apache-log4j-2.17.1-bin/log4j-api-2.17.1.jar /var/lib/jetty/webapps/geonetwork/WEB-INF/lib/ && rm -rf apache-log4j-2.17.1-bin* 1
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; GHC_URL="https://downloads.haskell.org/~ghc/9.2.3/ghc-9.2.3-$ARCH-deb10-linux.tar.xz"; case "$ARCH" in 'aarch64') GHC_SHA256='4b0b3848606ca83923b666dc8325df6a93986682c57b2865a44c52795a30f808'; ;; 'x86_64') GHC_SHA256='6cfe876a334443438dbe47079ddf9c3b0768c7b3af5ce9cdb1dee7e72497f4f5'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'" ; exit 1 ;; esac; curl -sSL "9.2.3_URL" -o ghc.tar.xz; echo "9.2.3_SHA256 ghc.tar.xz" | sha256sum --strict --check;  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; curl -sSL "9.2.3_URL.sig" -o ghc.tar.xz.sig; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "9.2.3_RELEASE_KEY"; gpg --batch --verify ghc.tar.xz.sig ghc.tar.xz; gpgconf --kill all;  tar xf ghc.tar.xz; cd "ghc-9.2.3"; ./configure --prefix "/opt/ghc/9.2.3"; make install; find "/opt/ghc/9.2.3/" \( -name "*_p.a" -o -name "*.p_hi" \) -type f -delete; rm -rf "/opt/ghc/9.2.3/share/";  rm -rf /tmp/*;  "/opt/ghc/9.2.3/bin/ghc" --version 1
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; GHC_URL="https://downloads.haskell.org/~ghc/9.2.3/ghc-9.2.3-$ARCH-deb10-linux.tar.xz"; case "$ARCH" in 'aarch64') GHC_SHA256='4b0b3848606ca83923b666dc8325df6a93986682c57b2865a44c52795a30f808'; ;; 'x86_64') GHC_SHA256='6cfe876a334443438dbe47079ddf9c3b0768c7b3af5ce9cdb1dee7e72497f4f5'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'" ; exit 1 ;; esac; curl -sSL "9.2.3_URL" -o ghc.tar.xz; echo "9.2.3_SHA256 ghc.tar.xz" | sha256sum --strict --check;  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; curl -sSL "9.2.3_URL.sig" -o ghc.tar.xz.sig; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "9.2.3_RELEASE_KEY"; gpg --batch --verify ghc.tar.xz.sig ghc.tar.xz; gpgconf --kill all;  tar xf ghc.tar.xz; cd "ghc-9.2.3"; ./configure --prefix "/opt/ghc/9.2.3"; make install; rm -rf "/opt/ghc/9.2.3/share/";  rm -rf /tmp/*;  "/opt/ghc/9.2.3/bin/ghc" --version 1
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; GHC_URL="https://downloads.haskell.org/~ghc/8.10.7/ghc-8.10.7-$ARCH-deb10-linux.tar.xz"; case "$ARCH" in 'aarch64') GHC_SHA256='fad2417f9b295233bf8ade79c0e6140896359e87be46cb61cd1d35863d9d0e55'; ;; 'x86_64') GHC_SHA256='a13719bca87a0d3ac0c7d4157a4e60887009a7f1a8dbe95c4759ec413e086d30'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'" ; exit 1 ;; esac; curl -sSL "8.10.7_URL" -o ghc.tar.xz; echo "8.10.7_SHA256 ghc.tar.xz" | sha256sum --strict --check;  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; curl -sSL "8.10.7_URL.sig" -o ghc.tar.xz.sig; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "8.10.7_RELEASE_KEY"; gpg --batch --verify ghc.tar.xz.sig ghc.tar.xz; gpgconf --kill all;  tar xf ghc.tar.xz; cd "ghc-8.10.7"; ./configure --prefix "/opt/ghc/8.10.7"; make install; rm -rf "/opt/ghc/8.10.7/share/";  rm -rf /tmp/*;  "/opt/ghc/8.10.7/bin/ghc" --version 1
apt-get update && apt-get install -y --no-install-recommends libnuma-dev libtinfo-dev && rm -rf /var/lib/apt/lists/* 1
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; GHC_URL="https://downloads.haskell.org/~ghc/9.0.2/ghc-9.0.2-$ARCH-deb10-linux.tar.xz"; case "$ARCH" in 'aarch64') GHC_SHA256='cb016344c70a872738a24af60bd15d3b18749087b9905c1b3f1b1549dc01f46d'; ;; 'x86_64') GHC_SHA256='5d0b9414b10cfb918453bcd01c5ea7a1824fe95948b08498d6780f20ba247afc'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'" ; exit 1 ;; esac; curl -sSL "9.0.2_URL" -o ghc.tar.xz; echo "9.0.2_SHA256 ghc.tar.xz" | sha256sum --strict --check;  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; curl -sSL "9.0.2_URL.sig" -o ghc.tar.xz.sig; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "9.0.2_RELEASE_KEY"; gpg --batch --verify ghc.tar.xz.sig ghc.tar.xz; gpgconf --kill all;  tar xf ghc.tar.xz; cd "ghc-9.0.2"; ./configure --prefix "/opt/ghc/9.0.2"; make install; rm -rf "/opt/ghc/9.0.2/share/";  rm -rf /tmp/*;  "/opt/ghc/9.0.2/bin/ghc" --version 1
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; GHC_URL="https://downloads.haskell.org/~ghc/9.0.2/ghc-9.0.2-$ARCH-deb10-linux.tar.xz"; case "$ARCH" in 'aarch64') GHC_SHA256='cb016344c70a872738a24af60bd15d3b18749087b9905c1b3f1b1549dc01f46d'; ;; 'x86_64') GHC_SHA256='5d0b9414b10cfb918453bcd01c5ea7a1824fe95948b08498d6780f20ba247afc'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'" ; exit 1 ;; esac; curl -sSL "9.0.2_URL" -o ghc.tar.xz; echo "9.0.2_SHA256 ghc.tar.xz" | sha256sum --strict --check;  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; curl -sSL "9.0.2_URL.sig" -o ghc.tar.xz.sig; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "9.0.2_RELEASE_KEY"; gpg --batch --verify ghc.tar.xz.sig ghc.tar.xz; gpgconf --kill all;  tar xf ghc.tar.xz; cd "ghc-9.0.2"; ./configure --prefix "/opt/ghc/9.0.2"; make install; find "/opt/ghc/9.0.2/" \( -name "*_p.a" -o -name "*.p_hi" \) -type f -delete; rm -rf "/opt/ghc/9.0.2/share/";  rm -rf /tmp/*;  "/opt/ghc/9.0.2/bin/ghc" --version 1
set -eux; cd /tmp; ARCH="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; GHC_URL="https://downloads.haskell.org/~ghc/8.10.7/ghc-8.10.7-$ARCH-deb10-linux.tar.xz"; case "$ARCH" in 'aarch64') GHC_SHA256='fad2417f9b295233bf8ade79c0e6140896359e87be46cb61cd1d35863d9d0e55'; ;; 'x86_64') GHC_SHA256='a13719bca87a0d3ac0c7d4157a4e60887009a7f1a8dbe95c4759ec413e086d30'; ;; *) echo >&2 "error: unsupported architecture '$ARCH'" ; exit 1 ;; esac; curl -sSL "8.10.7_URL" -o ghc.tar.xz; echo "8.10.7_SHA256 ghc.tar.xz" | sha256sum --strict --check;  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; curl -sSL "8.10.7_URL.sig" -o ghc.tar.xz.sig; gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "8.10.7_RELEASE_KEY"; gpg --batch --verify ghc.tar.xz.sig ghc.tar.xz; gpgconf --kill all;  tar xf ghc.tar.xz; cd "ghc-8.10.7"; ./configure --prefix "/opt/ghc/8.10.7"; make install; find "/opt/ghc/8.10.7/" \( -name "*_p.a" -o -name "*.p_hi" \) -type f -delete; rm -rf "/opt/ghc/8.10.7/share/";  rm -rf /tmp/*;  "/opt/ghc/8.10.7/bin/ghc" --version 1
set -ex; BASE_PKGS="apt-utils curl dirmngr dpkg-dev debhelper devscripts equivs fakeroot git gnupg pkg-config"; export DEBIAN_FRONTEND=noninteractive; export DEBCONF_NONINTERACTIVE_SEEN=true; tmpdir="$(mktemp -d)"; cd "$tmpdir"; apt-get update; apt-get install -y $BASE_PKGS; git clone https://github.com/varnish/pkg-hitch.git; cd pkg-hitch; git checkout f12ab7958bc4885f3f00311cbca5103d9e6ba794; rm -rf .git; curl -Lf https://hitch-tls.org/source/hitch-1.7.2.tar.gz -o $tmpdir/orig.tgz; echo "7b35b5f4a3b6dab2599643c0bc90880a77ea518a627b31813f45a7ee8c52982ba4ac07228b640a0bcf90ea7d63421b62884a091fed6664732585585e5ec15bcf  $tmpdir/orig.tgz" | sha512sum -c -; tar xavf $tmpdir/orig.tgz --strip 1; sed -i -e "s/@SRCVER@/1.7.2/g" -e "s/@PKGVER@/${PKGVER:-1}/g" -e "s/@DISTVER@/bullseye/g" debian/changelog; mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --yes" debian/control; sed -i '' debian/hitch*; dpkg-buildpackage -us -uc -j"$(nproc)"; apt-get -y purge --auto-remove hitch-build-deps $BASE_PKGS; apt-get -y install ../*.deb; sed -i 's/daemon = on/daemon = off/' /etc/hitch/hitch.conf; rm -rf /var/lib/apt/lists/* "$tmpdir" 1
set -ex;  savedAptMark="$(apt-mark showmanual)";  apt-get update; apt-get install -y --no-install-recommends libbz2-dev libgmp-dev libjpeg-dev libldap2-dev libmcrypt-dev libmemcached-dev libpng-dev libpq-dev libzip-dev ;  docker-php-ext-configure gd --with-jpeg; debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; docker-php-ext-configure ldap --with-libdir="lib/$debMultiarch"; docker-php-ext-install -j "$(nproc)" bz2 gd gmp ldap mysqli pdo_mysql pdo_pgsql pgsql zip ;  pecl install APCu-5.1.21; pecl install memcached-3.2.0; pecl install redis-5.3.7;  docker-php-ext-enable apcu memcached redis ; rm -r /tmp/pear;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so | awk '/=>/ { print $3 }' | sort -u | xargs -r dpkg-query -S | cut -d: -f1 | sort -u | xargs -rt apt-mark manual;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/* 1
set -ex; arch=$(dpkg --print-architecture); case "${arch}" in amd64) KONG_SHA256=10d12d23e5890414d666663094d51a42de41f8a9806fbc0baaf9ac4d37794361 ;; arm64) KONG_SHA256=61c13219ef64dac9aeae5ae775411e8cfcd406f068cf3e75d463f916ae6513cb ;; esac; apt-get update && if [ "ce" = "ce" ] ; then apt-get install -y curl && UBUNTU_CODENAME=$(cat /etc/os-release | grep UBUNTU_CODENAME | cut -d = -f 2) && curl -fL https://download.konghq.com/gateway-${KONG_VERSION%%.*}.x-ubuntu-${UBUNTU_CODENAME}/pool/all/k/kong/kong_2.8.1_$arch.deb -o /tmp/kong.deb && apt-get purge -y curl && echo "$KONG_SHA256  /tmp/kong.deb" | sha256sum -c -; else apt-get upgrade -y ; fi; apt-get install -y --no-install-recommends unzip git && apt install --yes /tmp/kong.deb && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/kong.deb && chown kong:0 /usr/local/bin/kong && chown -R kong:0 /usr/local/kong && ln -s /usr/local/openresty/bin/resty /usr/local/bin/resty && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/luajit && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/lua && ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/bin/nginx && if [ "ce" = "ce" ] ; then kong version ; fi 1
set -eux; arch="$(apk --print-arch)"; case "${arch}" in x86_64) arch='amd64'; KONG_SHA256=ccda33bf02803b6b8dd46b22990f92265fe61d900ba94e3e0fa26db0433098c0 ;; aarch64) arch='arm64'; KONG_SHA256=d21690332a89adf9900f7266e083f41f565eb009f2771ef112f3564878eeff53 ;; esac; if [ "ce" = "ce" ] ; then apk add --no-cache --virtual .build-deps curl wget tar ca-certificates && curl -fL "https://download.konghq.com/gateway-${KONG_VERSION%%.*}.x-alpine/kong-2.8.1.$arch.apk.tar.gz" -o /tmp/kong.tar.gz && echo "$KONG_SHA256  /tmp/kong.tar.gz" | sha256sum -c - && apk del .build-deps; else apk upgrade; fi; mkdir /kong && tar -C /kong -xzf /tmp/kong.tar.gz && mv /kong/usr/local/* /usr/local && mv /kong/etc/* /etc && rm -rf /kong && apk add --no-cache libstdc++ libgcc openssl pcre perl tzdata libcap zip bash zlib zlib-dev git ca-certificates && adduser -S kong && addgroup -S kong && mkdir -p "/usr/local/kong" && chown -R kong:0 /usr/local/kong && chown kong:0 /usr/local/bin/kong && chmod -R g=u /usr/local/kong && rm -rf /tmp/kong.tar.gz && ln -s /usr/local/openresty/bin/resty /usr/local/bin/resty && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/luajit && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/lua && ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/bin/nginx && if [ "ce" = "ce" ] ; then kong version; fi 1
/usr/local/openresty/luajit/bin/luajit /packer.lua -- "${PLUGINS}" 1
set -ex; if [ "ce" = "ce" ] ; then curl -fL https://download.konghq.com/gateway-${KONG_VERSION%%.*}.x-centos-8/Packages/k/kong-2.7.1.el8.amd64.rpm -o /tmp/kong.rpm && echo "d3769c15297d1b1b20cf684792a664ac851977b2c466f2776f2ae705708539e6  /tmp/kong.rpm" | sha256sum -c -; else yum update -y && yum upgrade -y ; fi; yum install -y -q unzip shadow-utils git && yum clean all -q && rm -fr /var/cache/yum/* /tmp/yum_save*.yumtx /root/.pki && yum install -y /tmp/kong.rpm && yum clean all && rm /tmp/kong.rpm && chown kong:0 /usr/local/bin/kong && chown -R kong:0 /usr/local/kong && ln -s /usr/local/openresty/bin/resty /usr/local/bin/resty && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/luajit && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/lua && ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/bin/nginx && if [ "ce" = "ce" ] ; then kong version; fi 1
set -ex && apk add --no-cache --virtual .fetch-deps tar git  && wget -O neko.tar.gz "https://github.com/HaxeFoundation/neko/archive/v2-3-0/neko-2.3.0.tar.gz" && echo "850e7e317bdaf24ed652efeff89c1cb21380ca19f20e68a296c84f6bad4ee995 *neko.tar.gz" | sha256sum -c - && mkdir -p /usr/src/neko && tar -xC /usr/src/neko --strip-components=1 -f neko.tar.gz && rm neko.tar.gz && apk add --no-cache --virtual .neko-build-deps apache2-dev cmake gc-dev gcc gtk+2.0-dev libc-dev linux-headers mariadb-dev mbedtls-dev ninja sqlite-dev && cd /usr/src/neko && cmake -GNinja -DNEKO_JIT_DISABLE=ON -DRELOCATABLE=OFF -DRUN_LDCONFIG=OFF . && ninja && ninja install  && git clone --recursive --depth 1 --branch 4.2.5 "https://github.com/HaxeFoundation/haxe.git" /usr/src/haxe && cd /usr/src/haxe && mkdir -p $HAXE_STD_PATH && cp -r std/* $HAXE_STD_PATH && apk add --no-cache --virtual .haxe-build-deps bash pcre-dev zlib-dev mbedtls-dev make opam aspcud m4 unzip patch pkgconf rsync musl-dev perl-string-shellquote perl-ipc-system-simple ocaml-compiler-libs ocaml-ocamldoc && opam init --compiler=4.11.0 --disable-sandboxing && eval $(opam env)  && opam install . --deps-only --no-depexts --yes   && make && eval $(opam env --revert) && mkdir -p /usr/local/bin && cp haxe haxelib /usr/local/bin && mkdir -p /haxelib && cd / && haxelib setup /haxelib  && runDeps="$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' | sort -u | xargs -r apk info --installed | sort -u )" && apk add --virtual .haxe-rundeps $runDeps && apk del .fetch-deps .neko-build-deps .haxe-build-deps && rm -rf ~/.opam && rm -rf /usr/src/neko /usr/src/haxe 1
set -ex && apk add --no-cache --virtual .fetch-deps tar git  && wget -O neko.tar.gz "https://github.com/HaxeFoundation/neko/archive/v2-3-0/neko-2.3.0.tar.gz" && echo "850e7e317bdaf24ed652efeff89c1cb21380ca19f20e68a296c84f6bad4ee995 *neko.tar.gz" | sha256sum -c - && mkdir -p /usr/src/neko && tar -xC /usr/src/neko --strip-components=1 -f neko.tar.gz && rm neko.tar.gz && apk add --no-cache --virtual .neko-build-deps apache2-dev cmake gc-dev gcc gtk+2.0-dev libc-dev linux-headers mariadb-dev mbedtls-dev ninja sqlite-dev && cd /usr/src/neko && cmake -GNinja -DNEKO_JIT_DISABLE=ON -DRELOCATABLE=OFF -DRUN_LDCONFIG=OFF . && ninja && ninja install  && git clone --recursive --depth 1 --branch 4.1.5 "https://github.com/HaxeFoundation/haxe.git" /usr/src/haxe && cd /usr/src/haxe && mkdir -p $HAXE_STD_PATH && cp -r std/* $HAXE_STD_PATH && apk add --no-cache --virtual .haxe-build-deps bash pcre-dev zlib-dev mbedtls-dev make opam aspcud m4 unzip patch pkgconf rsync musl-dev perl-string-shellquote perl-ipc-system-simple ocaml-compiler-libs ocaml-ocamldoc && opam init --compiler=4.11.0 --disable-sandboxing && eval $(opam env) && opam pin add extlib 1.7.7 --no-action && opam install . --deps-only --no-depexts --yes   && make && eval $(opam env --revert) && mkdir -p /usr/local/bin && cp haxe haxelib /usr/local/bin && mkdir -p /haxelib && cd / && haxelib setup /haxelib  && runDeps="$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' | sort -u | xargs -r apk info --installed | sort -u )" && apk add --virtual .haxe-rundeps $runDeps && apk del .fetch-deps .neko-build-deps .haxe-build-deps && rm -rf ~/.opam && rm -rf /usr/src/neko /usr/src/haxe 1
set -ex && apk add --no-cache --virtual .fetch-deps tar git  && wget -O neko.tar.gz "https://github.com/HaxeFoundation/neko/archive/v2-3-0/neko-2.3.0.tar.gz" && echo "850e7e317bdaf24ed652efeff89c1cb21380ca19f20e68a296c84f6bad4ee995 *neko.tar.gz" | sha256sum -c - && mkdir -p /usr/src/neko && tar -xC /usr/src/neko --strip-components=1 -f neko.tar.gz && rm neko.tar.gz && apk add --no-cache --virtual .neko-build-deps apache2-dev cmake gc-dev gcc gtk+2.0-dev libc-dev linux-headers mariadb-dev mbedtls-dev ninja sqlite-dev && cd /usr/src/neko && cmake -GNinja -DNEKO_JIT_DISABLE=ON -DRELOCATABLE=OFF -DRUN_LDCONFIG=OFF . && ninja && ninja install  && git clone --recursive --depth 1 --branch 4.0.5 "https://github.com/HaxeFoundation/haxe.git" /usr/src/haxe && cd /usr/src/haxe && mkdir -p $HAXE_STD_PATH && cp -r std/* $HAXE_STD_PATH && apk add --no-cache --virtual .haxe-build-deps bash pcre-dev zlib-dev mbedtls-dev make opam aspcud m4 unzip patch pkgconf rsync musl-dev perl-string-shellquote perl-ipc-system-simple ocaml-compiler-libs ocaml-ocamldoc && opam init --compiler=4.11.0 --disable-sandboxing && eval $(opam env) && opam pin add extlib 1.7.7 --no-action && opam install . --deps-only --no-depexts --yes   && make && eval $(opam env --revert) && mkdir -p /usr/local/bin && cp haxe haxelib /usr/local/bin && mkdir -p /haxelib && cd / && haxelib setup /haxelib  && runDeps="$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' | sort -u | xargs -r apk info --installed | sort -u )" && apk add --virtual .haxe-rundeps $runDeps && apk del .fetch-deps .neko-build-deps .haxe-build-deps && rm -rf ~/.opam && rm -rf /usr/src/neko /usr/src/haxe 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-enterprise-4.2.18-unix.tar.gz && echo "3436657e25d8bb945ebcf61e621f7b375845a208c1b70eb17d0654f82a396c02  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-community-4.2.18-unix.tar.gz && echo "ba477b1967844debc6bb25179894af6a5264f296eaa27d067ddbcc378423154b  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-enterprise-3.5.34-unix.tar.gz && echo "b038138a9226b7d056c7a57e5dc34549860815335d978ad43523ac52e6b0004b  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-community-3.5.34-unix.tar.gz && echo "ca56b8e9f4b63a4a25b59004c7bc59fbec00698b3ee71624d49bf50de65fd095  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-enterprise-4.3.14-unix.tar.gz && echo "04c878f55b955ea8cc5fa0640c8608a159c51eb6f6e5c2d9e248ebe48d4c0d09  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-community-4.3.14-unix.tar.gz && echo "8a0851c96f5591b89d18a1c1f0a5408ea9e9d795fb5bd44083a950f81e3a9301  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-enterprise-4.4.8-unix.tar.gz && echo "63300951e07d5dc90b01c456bdd029956e27b663ba2374b76e8097597325d2a3  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-community-4.4.8-unix.tar.gz && echo "34c8ce7edc2ab9f63a204f74f37621cac3427f12b0aef4c6ef47eaf4c2b90d66  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-community-4.2.17-unix.tar.gz && echo "631dcccbdc184e58d46893252996fc7e0fb9d5d0be3e76062dfb86b278b8d55d  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
apt update && apt install -y curl wget gosu jq tini && curl --fail --silent --show-error --location --remote-name https://dist.neo4j.org/neo4j-enterprise-4.2.17-unix.tar.gz && echo "ccaef8d82b9f0934b23a3c69627deb88c439b08d0b04c9a081c4bcd5faf9e852  ${NEO4J_TARBALL}" | sha256sum -c --strict --quiet && tar --extract --file ${NEO4J_TARBALL} --directory /var/lib && mv /var/lib/neo4j-* "${NEO4J_HOME}" && rm ${NEO4J_TARBALL} && mv "${NEO4J_HOME}"/data /data && mv "${NEO4J_HOME}"/logs /logs && chown -R neo4j:neo4j /data && chmod -R 777 /data && chown -R neo4j:neo4j /logs && chmod -R 777 /logs && chown -R neo4j:neo4j "${NEO4J_HOME}" && chmod -R 777 "${NEO4J_HOME}" && ln -s /data "${NEO4J_HOME}"/data && ln -s /logs "${NEO4J_HOME}"/logs && ln -s /startup/docker-entrypoint.sh /docker-entrypoint.sh && apt-get -y purge --auto-remove curl && rm -rf /var/lib/apt/lists/* 1
set -x && addgroup -g 101 -S nginx && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && apkArch="$(cat /etc/apk/arch)" && nginxPackages=" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} " && apk add --no-cache --virtual .checksum-deps openssl && case "$apkArch" in x86_64|aarch64) set -x && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin" && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then echo "key verification succeeded!"; mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; else echo "key verification failed!"; exit 1; fi && apk add -X "https://nginx.org/packages/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages ;; *) set -x && tempDir="$(mktemp -d)" && chown nobody:nobody $tempDir && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre2-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev bash alpine-sdk findutils && su nobody -s /bin/sh -c " export HOME=${tempDir} && cd ${tempDir} && curl -f -O https://hg.nginx.org/pkg-oss/archive/696.tar.gz && PKGOSSCHECKSUM=\"fabf394af60d935d7c3f5e36db65dddcced9595fd06d3dfdfabbb77aaea88a5b772ef9c1521531673bdbb2876390cdea3b81c51030d36ab76cf5bfc0bfe79230 *696.tar.gz\" && if [ \"\$(openssl sha512 -r 696.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then echo \"pkg-oss tarball checksum verification succeeded!\"; else echo \"pkg-oss tarball checksum verification failed!\"; exit 1; fi && tar xzvf 696.tar.gz && cd pkg-oss-696 && cd alpine && make all && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz " && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ && apk del .build-deps && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages ;; esac && apk del .checksum-deps && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi && if [ -n "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi && if [ -n "/etc/apk/keys/nginx_signing.rsa.pub" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi && apk add --no-cache --virtual .gettext gettext && mv /usr/bin/envsubst /tmp/  && runDeps="$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' | sort -u | xargs -r apk info --installed | sort -u )" && apk add --no-cache $runDeps && apk del .gettext && mv /tmp/envsubst /usr/local/bin/ && apk add --no-cache tzdata && apk add --no-cache curl ca-certificates && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -x && addgroup --system --gid 101 nginx && adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos "nginx user" --shell /bin/false --uid 101 nginx && apt-get update && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates && NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; found=''; for server in hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $NGINX_GPGKEY from $server"; apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* && dpkgArch="$(dpkg --print-architecture)" && nginxPackages=" nginx=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${PKG_RELEASE} " && case "$dpkgArch" in amd64|arm64) echo "deb https://nginx.org/packages/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list && apt-get update ;; *) echo "deb-src https://nginx.org/packages/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list  && tempDir="$(mktemp -d)" && chmod 777 "$tempDir"  && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get build-dep -y $nginxPackages && ( cd "$tempDir" && DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" apt-get source --compile $nginxPackages )  && apt-mark showmanual | xargs apt-mark auto > /dev/null && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && ls -lAFh "$tempDir" && ( cd "$tempDir" && dpkg-scanpackages . > Packages ) && grep '^Package: ' "$tempDir/Packages" && echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list && apt-get -o Acquire::GzipIndexes=false update ;; esac  && apt-get install --no-install-recommends --no-install-suggests -y $nginxPackages gettext-base curl && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list  && if [ -n "$tempDir" ]; then apt-get purge -y --auto-remove && rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; fi && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -x && addgroup --system --gid 101 nginx && adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos "nginx user" --shell /bin/false --uid 101 nginx && apt-get update && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates && NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; found=''; for server in hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $NGINX_GPGKEY from $server"; apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* && dpkgArch="$(dpkg --print-architecture)" && nginxPackages=" nginx=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${PKG_RELEASE} " && case "$dpkgArch" in amd64|arm64) echo "deb https://nginx.org/packages/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list && apt-get update ;; *) echo "deb-src https://nginx.org/packages/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list  && tempDir="$(mktemp -d)" && chmod 777 "$tempDir"  && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get build-dep -y $nginxPackages && ( cd "$tempDir" && DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" apt-get source --compile $nginxPackages )  && apt-mark showmanual | xargs apt-mark auto > /dev/null && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && ls -lAFh "$tempDir" && ( cd "$tempDir" && dpkg-scanpackages . > Packages ) && grep '^Package: ' "$tempDir/Packages" && echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list && apt-get -o Acquire::GzipIndexes=false update ;; esac  && apt-get install --no-install-recommends --no-install-suggests -y $nginxPackages gettext-base curl && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list  && if [ -n "$tempDir" ]; then apt-get purge -y --auto-remove && rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; fi && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -x && addgroup -g 101 -S nginx && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && apkArch="$(cat /etc/apk/arch)" && nginxPackages=" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} " && apk add --no-cache --virtual .checksum-deps openssl && case "$apkArch" in x86_64|aarch64) set -x && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin" && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then echo "key verification succeeded!"; mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; else echo "key verification failed!"; exit 1; fi && apk add -X "https://nginx.org/packages/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages ;; *) set -x && tempDir="$(mktemp -d)" && chown nobody:nobody $tempDir && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre2-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev bash alpine-sdk findutils && su nobody -s /bin/sh -c " export HOME=${tempDir} && cd ${tempDir} && curl -f -O https://hg.nginx.org/pkg-oss/archive/696.tar.gz && PKGOSSCHECKSUM=\"fabf394af60d935d7c3f5e36db65dddcced9595fd06d3dfdfabbb77aaea88a5b772ef9c1521531673bdbb2876390cdea3b81c51030d36ab76cf5bfc0bfe79230 *696.tar.gz\" && if [ \"\$(openssl sha512 -r 696.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then echo \"pkg-oss tarball checksum verification succeeded!\"; else echo \"pkg-oss tarball checksum verification failed!\"; exit 1; fi && tar xzvf 696.tar.gz && cd pkg-oss-696 && cd alpine && make all && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz " && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ && apk del .build-deps && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages ;; esac && apk del .checksum-deps && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi && if [ -n "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi && if [ -n "/etc/apk/keys/nginx_signing.rsa.pub" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi && apk add --no-cache --virtual .gettext gettext && mv /usr/bin/envsubst /tmp/  && runDeps="$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' | sort -u | xargs -r apk info --installed | sort -u )" && apk add --no-cache $runDeps && apk del .gettext && mv /tmp/envsubst /usr/local/bin/ && apk add --no-cache tzdata && apk add --no-cache curl ca-certificates && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -x && addgroup --system --gid 101 nginx && adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos "nginx user" --shell /bin/false --uid 101 nginx && apt-get update && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates && NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; found=''; for server in hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $NGINX_GPGKEY from $server"; apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* && dpkgArch="$(dpkg --print-architecture)" && nginxPackages=" nginx=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${PKG_RELEASE} " && case "$dpkgArch" in amd64|arm64) echo "deb https://nginx.org/packages/mainline/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list && apt-get update ;; *) echo "deb-src https://nginx.org/packages/mainline/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list  && tempDir="$(mktemp -d)" && chmod 777 "$tempDir"  && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get build-dep -y $nginxPackages && ( cd "$tempDir" && DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" apt-get source --compile $nginxPackages )  && apt-mark showmanual | xargs apt-mark auto > /dev/null && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && ls -lAFh "$tempDir" && ( cd "$tempDir" && dpkg-scanpackages . > Packages ) && grep '^Package: ' "$tempDir/Packages" && echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list && apt-get -o Acquire::GzipIndexes=false update ;; esac  && apt-get install --no-install-recommends --no-install-suggests -y $nginxPackages gettext-base curl && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list  && if [ -n "$tempDir" ]; then apt-get purge -y --auto-remove && rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; fi && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -x && addgroup --system --gid 101 nginx && adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos "nginx user" --shell /bin/false --uid 101 nginx && apt-get update && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates && NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; found=''; for server in hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $NGINX_GPGKEY from $server"; apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* && dpkgArch="$(dpkg --print-architecture)" && nginxPackages=" nginx=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${PKG_RELEASE} " && case "$dpkgArch" in amd64|arm64) echo "deb https://nginx.org/packages/mainline/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list && apt-get update ;; *) echo "deb-src https://nginx.org/packages/mainline/debian/ bullseye nginx" >> /etc/apt/sources.list.d/nginx.list  && tempDir="$(mktemp -d)" && chmod 777 "$tempDir"  && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get build-dep -y $nginxPackages && ( cd "$tempDir" && DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" apt-get source --compile $nginxPackages )  && apt-mark showmanual | xargs apt-mark auto > /dev/null && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && ls -lAFh "$tempDir" && ( cd "$tempDir" && dpkg-scanpackages . > Packages ) && grep '^Package: ' "$tempDir/Packages" && echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list && apt-get -o Acquire::GzipIndexes=false update ;; esac  && apt-get install --no-install-recommends --no-install-suggests -y $nginxPackages gettext-base curl && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list  && if [ -n "$tempDir" ]; then apt-get purge -y --auto-remove && rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; fi && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -x && addgroup -g 101 -S nginx && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && apkArch="$(cat /etc/apk/arch)" && nginxPackages=" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} " && apk add --no-cache --virtual .checksum-deps openssl && case "$apkArch" in x86_64|aarch64) set -x && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin" && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then echo "key verification succeeded!"; mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; else echo "key verification failed!"; exit 1; fi && apk add -X "https://nginx.org/packages/mainline/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages ;; *) set -x && tempDir="$(mktemp -d)" && chown nobody:nobody $tempDir && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre2-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev bash alpine-sdk findutils && su nobody -s /bin/sh -c " export HOME=${tempDir} && cd ${tempDir} && curl -f -O https://hg.nginx.org/pkg-oss/archive/688.tar.gz && PKGOSSCHECKSUM=\"a8ab6ff80ab67c6c9567a9103b52a42a5962e9c1bc7091b7710aaf553a3b484af61b0797dd9b048c518e371a6f69e34d474cfaaeaa116fd2824bffa1cd9d4718 *688.tar.gz\" && if [ \"\$(openssl sha512 -r 688.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then echo \"pkg-oss tarball checksum verification succeeded!\"; else echo \"pkg-oss tarball checksum verification failed!\"; exit 1; fi && tar xzvf 688.tar.gz && cd pkg-oss-688 && cd alpine && make all && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz " && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ && apk del .build-deps && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages ;; esac && apk del .checksum-deps && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi && if [ -n "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi && if [ -n "/etc/apk/keys/nginx_signing.rsa.pub" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi && apk add --no-cache --virtual .gettext gettext && mv /usr/bin/envsubst /tmp/  && runDeps="$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' | sort -u | xargs -r apk info --installed | sort -u )" && apk add --no-cache $runDeps && apk del .gettext && mv /tmp/envsubst /usr/local/bin/ && apk add --no-cache tzdata && apk add --no-cache curl ca-certificates && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -x && addgroup -g 101 -S nginx && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && apkArch="$(cat /etc/apk/arch)" && nginxPackages=" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} " && apk add --no-cache --virtual .checksum-deps openssl && case "$apkArch" in x86_64|aarch64) set -x && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin" && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then echo "key verification succeeded!"; mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; else echo "key verification failed!"; exit 1; fi && apk add -X "https://nginx.org/packages/mainline/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages ;; *) set -x && tempDir="$(mktemp -d)" && chown nobody:nobody $tempDir && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre2-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev bash alpine-sdk findutils && su nobody -s /bin/sh -c " export HOME=${tempDir} && cd ${tempDir} && curl -f -O https://hg.nginx.org/pkg-oss/archive/688.tar.gz && PKGOSSCHECKSUM=\"a8ab6ff80ab67c6c9567a9103b52a42a5962e9c1bc7091b7710aaf553a3b484af61b0797dd9b048c518e371a6f69e34d474cfaaeaa116fd2824bffa1cd9d4718 *688.tar.gz\" && if [ \"\$(openssl sha512 -r 688.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then echo \"pkg-oss tarball checksum verification succeeded!\"; else echo \"pkg-oss tarball checksum verification failed!\"; exit 1; fi && tar xzvf 688.tar.gz && cd pkg-oss-688 && cd alpine && make all && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz " && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ && apk del .build-deps && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages ;; esac && apk del .checksum-deps && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi && if [ -n "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi && if [ -n "/etc/apk/keys/nginx_signing.rsa.pub" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi && apk add --no-cache --virtual .gettext gettext && mv /usr/bin/envsubst /tmp/  && runDeps="$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' | sort -u | xargs -r apk info --installed | sort -u )" && apk add --no-cache $runDeps && apk del .gettext && mv /tmp/envsubst /usr/local/bin/ && apk add --no-cache tzdata && apk add --no-cache curl ca-certificates && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && mkdir /docker-entrypoint.d 1
set -ex && if [ "$ENABLED_MODULES" = "" ]; then echo "No additional modules enabled, exiting"; exit 1; fi 1
set -ex && apt update && apt install -y --no-install-suggests --no-install-recommends patch make wget mercurial devscripts debhelper dpkg-dev quilt lsb-release build-essential libxml2-utils xsltproc equivs git g++ && hg clone -r ${NGINX_VERSION}-${PKG_RELEASE%%~*} https://hg.nginx.org/pkg-oss/ && cd pkg-oss && mkdir /tmp/packages && for module in $ENABLED_MODULES; do echo "Building $module for nginx-$NGINX_VERSION"; if [ -d /modules/$module ]; then echo "Building $module from user-supplied sources"; if [ ! -s /modules/$module/source ]; then echo "No source file for $module in modules/$module/source, exiting"; exit 1; fi; if [ -f /modules/$module/build-deps ]; then echo "Installing $module build dependencies"; apt update && apt install -y --no-install-suggests --no-install-recommends $(cat /modules/$module/build-deps | xargs); fi; if [ -x /modules/$module/prebuild ]; then echo "Running prebuild script for $module"; /modules/$module/prebuild; fi; /pkg-oss/build_module.sh -v $NGINX_VERSION -f -y -o /tmp/packages -n $module $(cat /modules/$module/source); BUILT_MODULES="$BUILT_MODULES $(echo $module | tr '[A-Z]' '[a-z]' | tr -d '[/_\-\.\t ]')"; elif make -C /pkg-oss/debian list | grep -P "^$module\s+\d" > /dev/null; then echo "Building $module from pkg-oss sources"; cd /pkg-oss/debian; make rules-module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes" debuild-module-$module/nginx-$NGINX_VERSION/debian/control; make module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; find ../../ -maxdepth 1 -mindepth 1 -type f -name "*.deb" -exec mv -v {} /tmp/packages/ \;; BUILT_MODULES="$BUILT_MODULES $module"; else echo "Don't know how to build $module module, exiting"; exit 1; fi; done && echo "BUILT_MODULES=\"$BUILT_MODULES\"" > /tmp/packages/modules.env 1
set -ex && apt update && . /tmp/packages/modules.env && for module in $BUILT_MODULES; do apt install --no-install-suggests --no-install-recommends -y /tmp/packages/nginx-module-${module}_${NGINX_VERSION}*.deb; done && rm -rf /tmp/packages && rm -rf /var/lib/apt/lists/ 1
addgroup -g 1000 node && adduser -u 1000 -G node -s /bin/sh -D node && apk add --no-cache libstdc++ && apk add --no-cache --virtual .build-deps curl && ARCH= && alpineArch="$(apk --print-arch)" && case "${alpineArch##*-}" in x86_64) ARCH='x64' CHECKSUM="2a91d0d2fda04c267e2c1d956b24378d1c34fcec489ad82695f4b23af0e22c1d" ;; *) ;; esac && if [ -n "${CHECKSUM}" ]; then set -eu; curl -fsSLO --compressed "https://unofficial-builds.nodejs.org/download/release/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz"; echo "$CHECKSUM  node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" | sha256sum -c - && tar -xJf "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" -C /usr/local --strip-components=1 --no-same-owner && ln -s /usr/local/bin/node /usr/local/bin/nodejs; else echo "Building from source" && apk add --no-cache --virtual .build-deps-full binutils-gold g++ gcc gnupg libgcc linux-headers make python3 && for key in 4ED778F539E3634C779C87C6D7062848A1AB005C 141F07595B7B3FFE74309A937405533BE57C7D57 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 74F12602B6F1C4E913FAA37AD3A89613643B6201 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 61FC681DFB92A079F1685E77973F295594EC4689 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C DD8F2338BAE7501E3DD5AC78C273792F7D83545D A48C2BEE680E841632CD4E44F07496B3EB3C1762 108F52B48DB57BB0CC439B2997B01419BD92F80A B9E2F5981AA6E0CD28160D9FF13993A75599653C ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz" && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && grep " node-v$NODE_VERSION.tar.xz\$" SHASUMS256.txt | sha256sum -c - && tar -xf "node-v$NODE_VERSION.tar.xz" && cd "node-v$NODE_VERSION" && ./configure && make -j$(getconf _NPROCESSORS_ONLN) V= && make install && apk del .build-deps-full && cd .. && rm -Rf "node-v$NODE_VERSION" && rm "node-v$NODE_VERSION.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt; fi && rm -f "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" && apk del .build-deps && node --version && npm --version 1
ARCH= && dpkgArch="$(dpkg --print-architecture)" && case "${dpkgArch##*-}" in amd64) ARCH='x64';; ppc64el) ARCH='ppc64le';; s390x) ARCH='s390x';; arm64) ARCH='arm64';; armhf) ARCH='armv7l';; i386) ARCH='x86';; *) echo "unsupported architecture"; exit 1 ;; esac && set -ex && apt-get update && apt-get install -y ca-certificates curl wget gnupg dirmngr xz-utils libatomic1 --no-install-recommends && rm -rf /var/lib/apt/lists/* && for key in 4ED778F539E3634C779C87C6D7062848A1AB005C 141F07595B7B3FFE74309A937405533BE57C7D57 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 74F12602B6F1C4E913FAA37AD3A89613643B6201 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 61FC681DFB92A079F1685E77973F295594EC4689 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C DD8F2338BAE7501E3DD5AC78C273792F7D83545D A48C2BEE680E841632CD4E44F07496B3EB3C1762 108F52B48DB57BB0CC439B2997B01419BD92F80A B9E2F5981AA6E0CD28160D9FF13993A75599653C ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && grep " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt && apt-mark auto '.*' > /dev/null && find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && ln -s /usr/local/bin/node /usr/local/bin/nodejs && node --version && npm --version 1
set -ex && savedAptMark="$(apt-mark showmanual)" && apt-get update && apt-get install -y ca-certificates curl wget gnupg dirmngr --no-install-recommends && rm -rf /var/lib/apt/lists/* && for key in 6A010C5166006599AA17F08146C2130DFD2497F5 ; do gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; done && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz && mkdir -p /opt && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz && apt-mark auto '.*' > /dev/null && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; } && find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && yarn --version 1
apt-get update && apt-get install -y --no-install-recommends bzip2 ca-certificates curl dpkg-dev gcc libc6-dev make netbase patch zlib1g-dev xz-utils libssl-dev && curl -SL https://www.cpan.org/src/5.0/perl-5.34.1.tar.xz -o perl-5.34.1.tar.xz && echo '6d52cf833ff1af27bb5e986870a2c30cec73c044b41e3458cd991f94374039f7 *perl-5.34.1.tar.xz' | sha256sum -c - && tar --strip-components=1 -xaf perl-5.34.1.tar.xz -C /usr/src/perl && rm perl-5.34.1.tar.xz && cat *.patch | patch -p1 && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" && ./Configure -Darchname="$gnuArch" "$archFlag" -Duseshrplib -Dvendorprefix=/usr/local  -des && make -j$(nproc) && TEST_JOBS=$(nproc) make test_harness && make install && cd /usr/src && curl -LO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz && echo '3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862 *App-cpanminus-1.7046.tar.gz' | sha256sum -c - && tar -xzf App-cpanminus-1.7046.tar.gz && cd App-cpanminus-1.7046 && perl bin/cpanm . && cd /root && cpanm IO::Socket::SSL && cd /usr/local/bin && curl -LO https://raw.githubusercontent.com/skaji/cpm/0.997011/cpm && chmod +x cpm && savedPackages="ca-certificates make netbase zlib1g-dev libssl-dev" && apt-mark auto '.*' > /dev/null && apt-mark manual $savedPackages && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && rm -fr /var/cache/apt/* /var/lib/apt/lists/* && rm -fr ./cpanm /root/.cpanm /usr/src/perl /usr/src/App-cpanminus-1.7046* /tmp/* 1
apt-get update && apt-get install -y --no-install-recommends bzip2 ca-certificates curl dpkg-dev gcc libc6-dev make netbase patch zlib1g-dev xz-utils libssl-dev && curl -SL https://www.cpan.org/src/5.0/perl-5.36.0.tar.xz -o perl-5.36.0.tar.xz && echo '0f386dccbee8e26286404b2cca144e1005be65477979beb9b1ba272d4819bcf0 *perl-5.36.0.tar.xz' | sha256sum -c - && tar --strip-components=1 -xaf perl-5.36.0.tar.xz -C /usr/src/perl && rm perl-5.36.0.tar.xz && cat *.patch | patch -p1 && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" && ./Configure -Darchname="$gnuArch" "$archFlag" -Duseshrplib -Dvendorprefix=/usr/local  -des && make -j$(nproc) && TEST_JOBS=$(nproc) make test_harness && make install && cd /usr/src && curl -LO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz && echo '3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862 *App-cpanminus-1.7046.tar.gz' | sha256sum -c - && tar -xzf App-cpanminus-1.7046.tar.gz && cd App-cpanminus-1.7046 && perl bin/cpanm . && cd /root && cpanm IO::Socket::SSL && cd /usr/local/bin && curl -LO https://raw.githubusercontent.com/skaji/cpm/0.997011/cpm && chmod +x cpm && savedPackages="ca-certificates make netbase zlib1g-dev libssl-dev" && apt-mark auto '.*' > /dev/null && apt-mark manual $savedPackages && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && rm -fr /var/cache/apt/* /var/lib/apt/lists/* && rm -fr ./cpanm /root/.cpanm /usr/src/perl /usr/src/App-cpanminus-1.7046* /tmp/* 1
apt-get update && apt-get install -y --no-install-recommends bzip2 ca-certificates curl dpkg-dev gcc libc6-dev make netbase patch zlib1g-dev xz-utils libssl-dev && curl -SL https://www.cpan.org/src/5.0/perl-5.32.1.tar.xz -o perl-5.32.1.tar.xz && echo '57cc47c735c8300a8ce2fa0643507b44c4ae59012bfdad0121313db639e02309 *perl-5.32.1.tar.xz' | sha256sum -c - && tar --strip-components=1 -xaf perl-5.32.1.tar.xz -C /usr/src/perl && rm perl-5.32.1.tar.xz && cat *.patch | patch -p1 && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" && ./Configure -Darchname="$gnuArch" "$archFlag" -Dusethreads -Duseshrplib -Dvendorprefix=/usr/local  -des && make -j$(nproc) && TEST_JOBS=$(nproc) make test_harness && make install && cd /usr/src && curl -LO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz && echo '3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862 *App-cpanminus-1.7046.tar.gz' | sha256sum -c - && tar -xzf App-cpanminus-1.7046.tar.gz && cd App-cpanminus-1.7046 && perl bin/cpanm . && cd /root && cpanm IO::Socket::SSL && cd /usr/local/bin && curl -LO https://raw.githubusercontent.com/skaji/cpm/0.997011/cpm && chmod +x cpm && savedPackages="ca-certificates make netbase zlib1g-dev libssl-dev" && apt-mark auto '.*' > /dev/null && apt-mark manual $savedPackages && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && rm -fr /var/cache/apt/* /var/lib/apt/lists/* && rm -fr ./cpanm /root/.cpanm /usr/src/perl /usr/src/App-cpanminus-1.7046* /tmp/* 1
apt-get update && apt-get install -y --no-install-recommends bzip2 ca-certificates curl dpkg-dev gcc libc6-dev make netbase patch zlib1g-dev xz-utils libssl-dev && curl -SL https://www.cpan.org/src/5.0/perl-5.36.0.tar.xz -o perl-5.36.0.tar.xz && echo '0f386dccbee8e26286404b2cca144e1005be65477979beb9b1ba272d4819bcf0 *perl-5.36.0.tar.xz' | sha256sum -c - && tar --strip-components=1 -xaf perl-5.36.0.tar.xz -C /usr/src/perl && rm perl-5.36.0.tar.xz && cat *.patch | patch -p1 && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" && ./Configure -Darchname="$gnuArch" "$archFlag" -Dusethreads -Duseshrplib -Dvendorprefix=/usr/local  -des && make -j$(nproc) && TEST_JOBS=$(nproc) make test_harness && make install && cd /usr/src && curl -LO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz && echo '3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862 *App-cpanminus-1.7046.tar.gz' | sha256sum -c - && tar -xzf App-cpanminus-1.7046.tar.gz && cd App-cpanminus-1.7046 && perl bin/cpanm . && cd /root && cpanm IO::Socket::SSL && cd /usr/local/bin && curl -LO https://raw.githubusercontent.com/skaji/cpm/0.997011/cpm && chmod +x cpm && savedPackages="ca-certificates make netbase zlib1g-dev libssl-dev" && apt-mark auto '.*' > /dev/null && apt-mark manual $savedPackages && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && rm -fr /var/cache/apt/* /var/lib/apt/lists/* && rm -fr ./cpanm /root/.cpanm /usr/src/perl /usr/src/App-cpanminus-1.7046* /tmp/* 1
set -eux; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='ed7773edaf1d289656bdec2aacad12413b38ad0193fff54b2231f5140a4b07c5' ;; armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='7a7b9d246ad63358705d8d4a7d5c2ef1adfec24525d1d5c44a7739e1b867e84d' ;; arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='f80a0a792b3ab905ab4919474daf4d3f60e574fc6987e69bfba2fd877241a8de' ;; i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='4473c18286aa1831683a772706d9a5c98b87a61cc014d38063e00a63a480afef' ;; *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; esac; url="https://static.rust-lang.org/rustup/archive/1.23.1/${rustArch}/rustup-init"; wget "$url"; echo "${rustupSha256} *rustup-init" | sha256sum -c -; chmod +x rustup-init; ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; rm rustup-init; chmod -R a+w /usr/local/rustup $CARGO_HOME; rustup --version; cargo --version; rustc --version; 1
set -eux; apkArch="$(apk --print-arch)"; case "$apkArch" in x86_64) rustArch='x86_64-unknown-linux-musl'; rustupSha256='05c5c05ec76671d73645aac3afbccf2187352fce7e46fc85be859f52a42797f6' ;; aarch64) rustArch='aarch64-unknown-linux-musl'; rustupSha256='6a8a480d8d9e7f8c6979d7f8b12bc59da13db67970f7b13161ff409f0a771213' ;; *) echo >&2 "unsupported architecture: $apkArch"; exit 1 ;; esac; url="https://static.rust-lang.org/rustup/archive/1.23.1/${rustArch}/rustup-init"; wget "$url"; echo "${rustupSha256} *rustup-init" | sha256sum -c -; chmod +x rustup-init; ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; rm rustup-init; chmod -R a+w /usr/local/rustup $CARGO_HOME; rustup --version; cargo --version; rustc --version; 1
apt-get update && apt-get install -y tzdata && apt-get install -y apt-utils iputils-ping curl wget vim locales language-pack-en language-pack-fr procps net-tools zip unzip openjdk-11-jdk ffmpeg imagemagick ghostscript libreoffice ure gpgv && rm -rf /var/lib/apt/lists/* && update-ca-certificates -f 1
wget -nc https://www.silverpeas.org/files/swftools-bin-0.9.2.zip && echo 'd40bd091c84bde2872f2733a3c767b3a686c8e8477a3af3a96ef347cf05c5e43 *swftools-bin-0.9.2.zip' | sha256sum - && unzip swftools-bin-0.9.2.zip -d / && rm swftools-bin-0.9.2.zip 1
wget -nc https://www.silverpeas.org/files/pdf2json-bin-0.68.zip && echo 'eec849cdd75224f9d44c0999ed1fbe8764a773d8ab0cf7fff4bf922ab81c9f84 *pdf2json-bin-0.68.zip' | sha256sum - && unzip pdf2json-bin-0.68.zip -d / && rm pdf2json-bin-0.68.zip 1
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && echo "fr_FR.UTF-8 UTF-8" >> /etc/locale.gen && echo "de_DE.UTF-8 UTF-8" >> /etc/locale.gen && locale-gen && update-locale LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8 1
{ echo '#!/bin/sh'; echo 'set -e'; echo; echo 'dirname "$(dirname "$(readlink -f "$(which javac || which java)")")"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home 1
ln -svT "/usr/lib/jvm/java-11-openjdk-$(dpkg --print-architecture)" /docker-java-home 1
wget -nc https://www.silverpeas.org/files/silverpeas-6.2-wildfly${WILDFLY_VERSION%.?.?}.zip && wget -nc https://www.silverpeas.org/files/silverpeas-6.2-wildfly${WILDFLY_VERSION%.?.?}.zip.asc && gpg --keyserver keys.openpgp.org --recv-keys 3F4657EF9C591F2FEA458FEBC19391EB3DF442B6 && gpg --batch --verify silverpeas-6.2-wildfly${WILDFLY_VERSION%.?.?}.zip.asc silverpeas-6.2-wildfly${WILDFLY_VERSION%.?.?}.zip && wget -nc https://download.jboss.org/wildfly/20.0.1.Final/wildfly-20.0.1.Final.zip && unzip silverpeas-6.2-wildfly${WILDFLY_VERSION%.?.?}.zip -d /opt && unzip wildfly-20.0.1.Final.zip -d /opt && mv /opt/silverpeas-6.2-wildfly${WILDFLY_VERSION%.?.?} /opt/silverpeas && mv /opt/wildfly-20.0.1.Final /opt/wildfly && rm *.zip && mkdir -p /root/.m2 1
sed -i -e "s/SILVERPEAS_VERSION/6.2/g" ${SILVERPEAS_HOME}/bin/silverpeas.gradle && ./silverpeas construct && rm ../log/build-* && touch .install 1
set -ex; export GNUPGHOME="/tmp/gnupg_home"; mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"; echo "disable-ipv6" >> "$GNUPGHOME/dirmngr.conf"; for key in 902CC51935C140BF820230961FD5295281436075; do found=''; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ; do echo "  trying $server for $key"; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch $key from several disparate servers -- network issues?" && exit 1; done; exit 0 1
set -ex; export GNUPGHOME="/tmp/gnupg_home"; MAX_REDIRECTS=1; if [ -n "$SOLR_DOWNLOAD_URL" ]; then MAX_REDIRECTS=4; SKIP_GPG_CHECK=true; elif [ -n "$SOLR_DOWNLOAD_SERVER" ]; then SOLR_DOWNLOAD_URL="$SOLR_DOWNLOAD_SERVER/8.6.3/solr-8.6.3.tgz"; fi; for url in $SOLR_DOWNLOAD_URL $SOLR_CLOSER_URL $SOLR_DIST_URL $SOLR_ARCHIVE_URL; do if [ -f "/opt/solr-8.6.3.tgz" ]; then break; fi; echo "downloading $url"; if wget -t 10 --max-redirect $MAX_REDIRECTS --retry-connrefused -nv "$url" -O "/opt/solr-8.6.3.tgz"; then break; else rm -f "/opt/solr-8.6.3.tgz"; fi; done; if [ ! -f "/opt/solr-8.6.3.tgz" ]; then echo "failed all download attempts for solr-8.6.3.tgz"; exit 1; fi; if [ -z "$SKIP_GPG_CHECK" ]; then echo "downloading $SOLR_ARCHIVE_URL.asc"; wget -nv "$SOLR_ARCHIVE_URL.asc" -O "/opt/solr-8.6.3.tgz.asc"; echo "f040d4489118b655bd27451a717c1f22f180c398638d944a53889a1a449e7032b016cecbff1979c2e8bfd51fc037dd613f3b968254001d34fe0e8fc4f6761dcf */opt/solr-8.6.3.tgz" | sha512sum -c -; (>&2 ls -l "/opt/solr-8.6.3.tgz" "/opt/solr-8.6.3.tgz.asc"); gpg --batch --verify "/opt/solr-8.6.3.tgz.asc" "/opt/solr-8.6.3.tgz"; else echo "Skipping GPG validation due to non-Apache build"; fi; tar -C /opt --extract --file "/opt/solr-8.6.3.tgz"; (cd /opt; ln -s "solr-8.6.3" solr); rm "/opt/solr-8.6.3.tgz"*; rm -Rf /opt/solr/docs/ /opt/solr/dist/{solr-core-8.6.3.jar,solr-solrj-8.6.3.jar,solrj-lib,solr-test-framework-8.6.3.jar,test-framework}; mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d /opt/docker-solr; chown -R 0:0 "/opt/solr-8.6.3"; find "/opt/solr-8.6.3" -type d -print0 | xargs -0 chmod 0755; find "/opt/solr-8.6.3" -type f -print0 | xargs -0 chmod 0644; chmod -R 0755 "/opt/solr-8.6.3/bin" "/opt/solr-8.6.3/contrib/prometheus-exporter/bin/solr-exporter" /opt/solr-8.6.3/server/scripts/cloud-scripts; cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; chown root:0 /etc/default/solr.in.sh; chmod 0664 /etc/default/solr.in.sh; mkdir -p /var/solr/data /var/solr/logs; (cd /opt/solr/server/solr; cp solr.xml zoo.cfg /var/solr/data/); cp /opt/solr/server/resources/log4j2.xml /var/solr/log4j2.xml; find /var/solr -type d -print0 | xargs -0 chmod 0770; find /var/solr -type f -print0 | xargs -0 chmod 0660; sed -i -e "s/\"\$(whoami)\" == \"root\"/\$(id -u) == 0/" /opt/solr/bin/solr; sed -i -e 's/lsof -PniTCP:/lsof -t -PniTCP:/' /opt/solr/bin/solr; chown -R "0:0" /opt/solr-8.6.3 /docker-entrypoint-initdb.d /opt/docker-solr; chown -R "solr:0" /var/solr; { command -v gpgconf; gpgconf --kill all || :; }; rm -r "$GNUPGHOME" 1
set -ex; export GNUPGHOME="/tmp/gnupg_home"; mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"; echo "disable-ipv6" >> "$GNUPGHOME/dirmngr.conf"; for key in 7D8D90F8F64F23077AC87CF7CB77CB79928BB0EC; do found=''; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ; do echo "  trying $server for $key"; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch $key from several disparate servers -- network issues?" && exit 1; done; exit 0 1
set -ex; export GNUPGHOME="/tmp/gnupg_home"; MAX_REDIRECTS=1; if [ -n "$SOLR_DOWNLOAD_URL" ]; then MAX_REDIRECTS=4; SKIP_GPG_CHECK=true; elif [ -n "$SOLR_DOWNLOAD_SERVER" ]; then SOLR_DOWNLOAD_URL="$SOLR_DOWNLOAD_SERVER/8.7.0/solr-8.7.0.tgz"; fi; for url in $SOLR_DOWNLOAD_URL $SOLR_CLOSER_URL $SOLR_DIST_URL $SOLR_ARCHIVE_URL; do if [ -f "/opt/solr-8.7.0.tgz" ]; then break; fi; echo "downloading $url"; if wget -t 10 --max-redirect $MAX_REDIRECTS --retry-connrefused -nv "$url" -O "/opt/solr-8.7.0.tgz"; then break; else rm -f "/opt/solr-8.7.0.tgz"; fi; done; if [ ! -f "/opt/solr-8.7.0.tgz" ]; then echo "failed all download attempts for solr-8.7.0.tgz"; exit 1; fi; if [ -z "$SKIP_GPG_CHECK" ]; then echo "downloading $SOLR_ARCHIVE_URL.asc"; wget -nv "$SOLR_ARCHIVE_URL.asc" -O "/opt/solr-8.7.0.tgz.asc"; echo "15a3af83997e2cbc4bfed304f7d43efd260674d98059241605ff3cde0ae02d8bd1ccd56973c6cba1cc11895655bb76fcf1991bbb94b004e517ce15f728fa163f */opt/solr-8.7.0.tgz" | sha512sum -c -; (>&2 ls -l "/opt/solr-8.7.0.tgz" "/opt/solr-8.7.0.tgz.asc"); gpg --batch --verify "/opt/solr-8.7.0.tgz.asc" "/opt/solr-8.7.0.tgz"; else echo "Skipping GPG validation due to non-Apache build"; fi; tar -C /opt --extract --file "/opt/solr-8.7.0.tgz"; (cd /opt; ln -s "solr-8.7.0" solr); rm "/opt/solr-8.7.0.tgz"*; rm -Rf /opt/solr/docs/ /opt/solr/dist/{solr-core-8.7.0.jar,solr-solrj-8.7.0.jar,solrj-lib,solr-test-framework-8.7.0.jar,test-framework}; mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d /opt/docker-solr; chown -R 0:0 "/opt/solr-8.7.0"; find "/opt/solr-8.7.0" -type d -print0 | xargs -0 chmod 0755; find "/opt/solr-8.7.0" -type f -print0 | xargs -0 chmod 0644; chmod -R 0755 "/opt/solr-8.7.0/bin" "/opt/solr-8.7.0/contrib/prometheus-exporter/bin/solr-exporter" /opt/solr-8.7.0/server/scripts/cloud-scripts; cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; chown root:0 /etc/default/solr.in.sh; chmod 0664 /etc/default/solr.in.sh; mkdir -p /var/solr/data /var/solr/logs; (cd /opt/solr/server/solr; cp solr.xml zoo.cfg /var/solr/data/); cp /opt/solr/server/resources/log4j2.xml /var/solr/log4j2.xml; find /var/solr -type d -print0 | xargs -0 chmod 0770; find /var/solr -type f -print0 | xargs -0 chmod 0660; sed -i -e "s/\"\$(whoami)\" == \"root\"/\$(id -u) == 0/" /opt/solr/bin/solr; sed -i -e 's/lsof -PniTCP:/lsof -t -PniTCP:/' /opt/solr/bin/solr; chown -R "0:0" /opt/solr-8.7.0 /docker-entrypoint-initdb.d /opt/docker-solr; chown -R "solr:0" /var/solr; { command -v gpgconf; gpgconf --kill all || :; }; rm -r "$GNUPGHOME" 1
set -eux; addgroup -S -g 1000 sonarqube; adduser -S -D -u 1000 -G sonarqube sonarqube; apk add --no-cache --virtual build-dependencies gnupg unzip curl; apk add --no-cache bash su-exec ttf-dejavu openjdk11-jre; echo "networkaddress.cache.ttl=5" >> "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; sed --in-place --expression="s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g" "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; for server in $(shuf -e hkps://keys.openpgp.org hkps://keyserver.ubuntu.com) ; do gpg --batch --keyserver "${server}" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A && break || : ; done; mkdir --parents /opt; cd /opt; curl --fail --location --output sonarqube.zip --silent --show-error "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.5.0.56709.zip"; curl --fail --location --output sonarqube.zip.asc --silent --show-error "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.5.0.56709.zip.asc"; gpg --batch --verify sonarqube.zip.asc sonarqube.zip; unzip -q sonarqube.zip; mv "sonarqube-9.5.0.56709" sonarqube; rm sonarqube.zip*; rm -rf ${SONARQUBE_HOME}/bin/*; chown -R sonarqube:sonarqube ${SONARQUBE_HOME}; chmod -R 777 "${SQ_DATA_DIR}" "${SQ_EXTENSIONS_DIR}" "${SQ_LOGS_DIR}" "${SQ_TEMP_DIR}"; apk del --purge build-dependencies; 1
set -eux; addgroup -S -g 1000 sonarqube; adduser -S -D -u 1000 -G sonarqube sonarqube; apk add --no-cache --virtual build-dependencies gnupg unzip curl; apk add --no-cache bash su-exec ttf-dejavu openjdk11-jre; echo "networkaddress.cache.ttl=5" >> "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; sed --in-place --expression="s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g" "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; for server in $(shuf -e hkps://keys.openpgp.org hkps://keyserver.ubuntu.com) ; do gpg --batch --keyserver "${server}" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A && break || : ; done; mkdir --parents /opt; cd /opt; curl --fail --location --output sonarqube.zip --silent --show-error "https://binaries.sonarsource.com/CommercialDistribution/sonarqube-enterprise/sonarqube-enterprise-9.5.0.56709.zip"; curl --fail --location --output sonarqube.zip.asc --silent --show-error "https://binaries.sonarsource.com/CommercialDistribution/sonarqube-enterprise/sonarqube-enterprise-9.5.0.56709.zip.asc"; gpg --batch --verify sonarqube.zip.asc sonarqube.zip; unzip -q sonarqube.zip; mv "sonarqube-9.5.0.56709" sonarqube; rm sonarqube.zip*; rm -rf ${SONARQUBE_HOME}/bin/*; chown -R sonarqube:sonarqube ${SONARQUBE_HOME}; chmod -R 777 "${SQ_DATA_DIR}" "${SQ_EXTENSIONS_DIR}" "${SQ_LOGS_DIR}" "${SQ_TEMP_DIR}"; apk del --purge build-dependencies; cd "${SONARQUBE_HOME}/elasticsearch/bin" ; sed -i -e 's/\r$//' elasticsearch elasticsearch-env elasticsearch-env-from-file ; 1
set -eux; addgroup -S -g 1000 sonarqube; adduser -S -D -u 1000 -G sonarqube sonarqube; apk add --no-cache --virtual build-dependencies gnupg unzip curl; apk add --no-cache bash su-exec ttf-dejavu openjdk11-jre; echo "networkaddress.cache.ttl=5" >> "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; sed --in-place --expression="s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g" "/usr/lib/jvm/java-11-openjdk/conf/security/java.security"; for server in $(shuf -e hkps://keys.openpgp.org hkps://keyserver.ubuntu.com) ; do gpg --batch --keyserver "${server}" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A && break || : ; done; mkdir --parents /opt; cd /opt; curl --fail --location --output sonarqube.zip --silent --show-error "https://binaries.sonarsource.com/CommercialDistribution/sonarqube-developer/sonarqube-developer-9.5.0.56709.zip"; curl --fail --location --output sonarqube.zip.asc --silent --show-error "https://binaries.sonarsource.com/CommercialDistribution/sonarqube-developer/sonarqube-developer-9.5.0.56709.zip.asc"; gpg --batch --verify sonarqube.zip.asc sonarqube.zip; unzip -q sonarqube.zip; mv "sonarqube-9.5.0.56709" sonarqube; rm sonarqube.zip*; rm -rf ${SONARQUBE_HOME}/bin/*; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 "${SQ_DATA_DIR}" "${SQ_EXTENSIONS_DIR}" "${SQ_LOGS_DIR}" "${SQ_TEMP_DIR}" ; apk del --purge build-dependencies; 1
set -x && addgroup -S spiped && adduser -S -G spiped spiped 1
apk add --no-cache libssl1.1 1
set -x && apk add --no-cache --virtual .build-deps curl gcc make musl-dev openssl-dev tar && curl -fsSL "https://www.tarsnap.com/spiped/spiped-1.6.2.tgz" -o spiped.tar.gz && echo "05d4687d12d11d7f9888d43f3d80c541b7721c987038d085f71c91bb06204567 *spiped.tar.gz" |sha256sum -c - && mkdir -p /usr/local/src/spiped && tar xzf "spiped.tar.gz" -C /usr/local/src/spiped --strip-components=1 && rm "spiped.tar.gz" && CC=gcc make -C /usr/local/src/spiped && make -C /usr/local/src/spiped install && rm -rf /usr/local/src/spiped && apk del --no-network .build-deps 1
set -x && groupadd -r spiped && useradd -r -g spiped spiped 1
export DEBIAN_FRONTEND="noninteractive" && set -x && apt-get update && apt-get install -y libssl1.1 --no-install-recommends && rm -rf /var/lib/apt/lists/* 1
export DEBIAN_FRONTEND="noninteractive" && set -x && buildDeps='libssl-dev libc-dev gcc make curl ca-certificates' && apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* && curl -fsSL "https://www.tarsnap.com/spiped/spiped-1.6.2.tgz" -o spiped.tar.gz && echo "05d4687d12d11d7f9888d43f3d80c541b7721c987038d085f71c91bb06204567 *spiped.tar.gz" |sha256sum -c - && mkdir -p /usr/local/src/spiped && tar xzf "spiped.tar.gz" -C /usr/local/src/spiped --strip-components=1 && rm "spiped.tar.gz" && CC=gcc make -C /usr/local/src/spiped && make -C /usr/local/src/spiped install && rm -rf /usr/local/src/spiped && apt-get purge -y --auto-remove $buildDeps 1
apt-get update && apt-get install -y --no-install-recommends libtcmalloc-minimal4 libarchive13 libyaml-dev libgmp10 libossp-uuid16 libssl1.1 ca-certificates libdb5.3 libpcre2-8-0 libedit2 libgeos-3.9.0 libspatialindex6 unixodbc odbc-postgresql tdsodbc libmariadbclient-dev-compat libsqlite3-0 libserd-0-0 libraptor2-0 && dpkgArch="$(dpkg --print-architecture)" && rm -rf /var/lib/apt/lists/* 1
set -eux; SWIPL_VER=8.5.10; SWIPL_CHECKSUM=84f64194d08028f46ff296d04770a29ebb3aae2b33a5828eb4249393d490588a; BUILD_DEPS='make cmake ninja-build gcc g++ wget git autoconf libarchive-dev libgmp-dev libossp-uuid-dev libpcre2-dev libreadline-dev libedit-dev libssl-dev zlib1g-dev libdb-dev unixodbc-dev libsqlite3-dev libserd-dev libraptor2-dev libgeos++-dev libspatialindex-dev libgoogle-perftools-dev libgeos-dev libspatialindex-dev'; dpkgArch="$(dpkg --print-architecture)"; apt-get update; apt-get install -y --no-install-recommends $BUILD_DEPS; rm -rf /var/lib/apt/lists/*; mkdir /tmp/src; cd /tmp/src; wget -q https://www.swi-prolog.org/download/devel/src/swipl-$SWIPL_VER.tar.gz; echo "$SWIPL_CHECKSUM  swipl-$SWIPL_VER.tar.gz" >> swipl-$SWIPL_VER.tar.gz-CHECKSUM; sha256sum -c swipl-$SWIPL_VER.tar.gz-CHECKSUM; tar -xzf swipl-$SWIPL_VER.tar.gz; mkdir swipl-$SWIPL_VER/build; cd swipl-$SWIPL_VER/build; cmake -DCMAKE_BUILD_TYPE=PGO -DSWIPL_PACKAGES_X=OFF -DSWIPL_PACKAGES_JAVA=OFF -DCMAKE_INSTALL_PREFIX=/usr -G Ninja ..; ninja; ninja install; rm -rf /tmp/src; mkdir -p /usr/share/swi-prolog/pack; cd /usr/share/swi-prolog/pack; install_addin () { git clone "$2" "$1"; git -C "$1" checkout -q "$3"; if [ "$1" = 'prosqlite' ]; then rm -rf "$1/lib"; fi; swipl -g "pack_rebuild($1)" -t halt; find "$1" -mindepth 1 -maxdepth 1 ! -name lib ! -name prolog ! -name pack.pl -exec rm -rf {} +; find "$1" -name .git -exec rm -rf {} +; find "$1" -name '*.so' -exec strip {} +; }; dpkgArch="$(dpkg --print-architecture)"; install_addin space https://github.com/JanWielemaker/space.git fce744508d475768d11f4e0f3c81a450ff5a9c53; install_addin prosqlite https://github.com/nicos-angelopoulos/prosqlite.git cfd2f68709f5fb61833c0e2f8e9c6546e542009c; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] || install_addin rocksdb https://github.com/JanWielemaker/rocksdb.git f110766ee97cfbc6fddd4c33b7238f00e76ecc18; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] ||  install_addin hdt https://github.com/JanWielemaker/hdt.git e0a0eff87fc3318434cb493690c570e1255ed30e; install_addin rserve_client https://github.com/JanWielemaker/rserve_client.git 48a46160bc2768182be757ab179c26935db41de7; apt-get purge -y --auto-remove $BUILD_DEPS 1
set -eux; SWIPL_VER=8.4.2; SWIPL_CHECKSUM=be21bd3d6d1c9f3e9b0d8947ca6f3f5fd56922a3819cae03251728f3e1a6f389; BUILD_DEPS='make cmake ninja-build gcc g++ wget git autoconf libarchive-dev libgmp-dev libossp-uuid-dev libpcre3-dev libreadline-dev libedit-dev libssl-dev zlib1g-dev libdb-dev unixodbc-dev libsqlite3-dev libserd-dev libraptor2-dev libgeos++-dev libspatialindex-dev libgoogle-perftools-dev libgeos-dev libspatialindex-dev'; dpkgArch="$(dpkg --print-architecture)"; apt-get update; apt-get install -y --no-install-recommends $BUILD_DEPS; rm -rf /var/lib/apt/lists/*; mkdir /tmp/src; cd /tmp/src; wget -q https://www.swi-prolog.org/download/stable/src/swipl-$SWIPL_VER.tar.gz; echo "$SWIPL_CHECKSUM  swipl-$SWIPL_VER.tar.gz" >> swipl-$SWIPL_VER.tar.gz-CHECKSUM; sha256sum -c swipl-$SWIPL_VER.tar.gz-CHECKSUM; tar -xzf swipl-$SWIPL_VER.tar.gz; mkdir swipl-$SWIPL_VER/build; cd swipl-$SWIPL_VER/build; cmake -DCMAKE_BUILD_TYPE=PGO -DSWIPL_PACKAGES_X=OFF -DSWIPL_PACKAGES_JAVA=OFF -DCMAKE_INSTALL_PREFIX=/usr -G Ninja ..; ninja; ninja install; rm -rf /tmp/src; mkdir -p /usr/share/swi-prolog/pack; cd /usr/share/swi-prolog/pack; install_addin () { git clone "$2" "$1"; git -C "$1" checkout -q "$3"; if [ "$1" = 'prosqlite' ]; then rm -rf "$1/lib"; fi; swipl -g "pack_rebuild($1)" -t halt; find "$1" -mindepth 1 -maxdepth 1 ! -name lib ! -name prolog ! -name pack.pl -exec rm -rf {} +; find "$1" -name .git -exec rm -rf {} +; find "$1" -name '*.so' -exec strip {} +; }; dpkgArch="$(dpkg --print-architecture)"; install_addin space https://github.com/JanWielemaker/space.git fce744508d475768d11f4e0f3c81a450ff5a9c53; install_addin prosqlite https://github.com/nicos-angelopoulos/prosqlite.git cfd2f68709f5fb61833c0e2f8e9c6546e542009c; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] || install_addin rocksdb https://github.com/JanWielemaker/rocksdb.git f110766ee97cfbc6fddd4c33b7238f00e76ecc18; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] ||  install_addin hdt https://github.com/JanWielemaker/hdt.git e0a0eff87fc3318434cb493690c570e1255ed30e; install_addin rserve_client https://github.com/JanWielemaker/rserve_client.git 48a46160bc2768182be757ab179c26935db41de7; apt-get purge -y --auto-remove $BUILD_DEPS 1
set -eux; SWIPL_VER=8.5.5; SWIPL_CHECKSUM=785359d543370f793ed171e108ce1b5e06a11e9e4cb0b0e14d00d79e848fa2c2; BUILD_DEPS='make cmake ninja-build gcc g++ wget git autoconf libarchive-dev libgmp-dev libossp-uuid-dev libpcre3-dev libreadline-dev libedit-dev libssl-dev zlib1g-dev libdb-dev unixodbc-dev libsqlite3-dev libserd-dev libraptor2-dev libgeos++-dev libspatialindex-dev libgoogle-perftools-dev libgeos-dev libspatialindex-dev'; dpkgArch="$(dpkg --print-architecture)"; apt-get update; apt-get install -y --no-install-recommends $BUILD_DEPS; rm -rf /var/lib/apt/lists/*; mkdir /tmp/src; cd /tmp/src; wget -q https://www.swi-prolog.org/download/devel/src/swipl-$SWIPL_VER.tar.gz; echo "$SWIPL_CHECKSUM  swipl-$SWIPL_VER.tar.gz" >> swipl-$SWIPL_VER.tar.gz-CHECKSUM; sha256sum -c swipl-$SWIPL_VER.tar.gz-CHECKSUM; tar -xzf swipl-$SWIPL_VER.tar.gz; mkdir swipl-$SWIPL_VER/build; cd swipl-$SWIPL_VER/build; cmake -DCMAKE_BUILD_TYPE=PGO -DSWIPL_PACKAGES_X=OFF -DSWIPL_PACKAGES_JAVA=OFF -DCMAKE_INSTALL_PREFIX=/usr -G Ninja ..; ninja; ninja install; rm -rf /tmp/src; mkdir -p /usr/share/swi-prolog/pack; cd /usr/share/swi-prolog/pack; install_addin () { git clone "$2" "$1"; git -C "$1" checkout -q "$3"; if [ "$1" = 'prosqlite' ]; then rm -rf "$1/lib"; fi; swipl -g "pack_rebuild($1)" -t halt; find "$1" -mindepth 1 -maxdepth 1 ! -name lib ! -name prolog ! -name pack.pl -exec rm -rf {} +; find "$1" -name .git -exec rm -rf {} +; find "$1" -name '*.so' -exec strip {} +; }; dpkgArch="$(dpkg --print-architecture)"; install_addin space https://github.com/JanWielemaker/space.git fce744508d475768d11f4e0f3c81a450ff5a9c53; install_addin prosqlite https://github.com/nicos-angelopoulos/prosqlite.git cfd2f68709f5fb61833c0e2f8e9c6546e542009c; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] || install_addin rocksdb https://github.com/JanWielemaker/rocksdb.git f110766ee97cfbc6fddd4c33b7238f00e76ecc18; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] ||  install_addin hdt https://github.com/JanWielemaker/hdt.git e0a0eff87fc3318434cb493690c570e1255ed30e; install_addin rserve_client https://github.com/JanWielemaker/rserve_client.git 48a46160bc2768182be757ab179c26935db41de7; apt-get purge -y --auto-remove $BUILD_DEPS 1
set -eux; SWIPL_VER=8.5.3; SWIPL_CHECKSUM=49ff9f3644c0d9f51d39bd4bb4e81bfc03ab48084fb98cbe4737f02a202e7d9b; BUILD_DEPS='make cmake ninja-build gcc g++ wget git autoconf libarchive-dev libgmp-dev libossp-uuid-dev libpcre3-dev libreadline-dev libedit-dev libssl-dev zlib1g-dev libdb-dev unixodbc-dev libsqlite3-dev libserd-dev libraptor2-dev libgeos++-dev libspatialindex-dev libgoogle-perftools-dev libgeos-dev libspatialindex-dev'; dpkgArch="$(dpkg --print-architecture)"; apt-get update; apt-get install -y --no-install-recommends $BUILD_DEPS; rm -rf /var/lib/apt/lists/*; mkdir /tmp/src; cd /tmp/src; wget -q https://www.swi-prolog.org/download/devel/src/swipl-$SWIPL_VER.tar.gz; echo "$SWIPL_CHECKSUM  swipl-$SWIPL_VER.tar.gz" >> swipl-$SWIPL_VER.tar.gz-CHECKSUM; sha256sum -c swipl-$SWIPL_VER.tar.gz-CHECKSUM; tar -xzf swipl-$SWIPL_VER.tar.gz; mkdir swipl-$SWIPL_VER/build; cd swipl-$SWIPL_VER/build; cmake -DCMAKE_BUILD_TYPE=PGO -DSWIPL_PACKAGES_X=OFF -DSWIPL_PACKAGES_JAVA=OFF -DCMAKE_INSTALL_PREFIX=/usr -G Ninja ..; ninja; ninja install; rm -rf /tmp/src; mkdir -p /usr/share/swi-prolog/pack; cd /usr/share/swi-prolog/pack; install_addin () { git clone "$2" "$1"; git -C "$1" checkout -q "$3"; if [ "$1" = 'prosqlite' ]; then rm -rf "$1/lib"; fi; swipl -g "pack_rebuild($1)" -t halt; find "$1" -mindepth 1 -maxdepth 1 ! -name lib ! -name prolog ! -name pack.pl -exec rm -rf {} +; find "$1" -name .git -exec rm -rf {} +; find "$1" -name '*.so' -exec strip {} +; }; dpkgArch="$(dpkg --print-architecture)"; install_addin space https://github.com/JanWielemaker/space.git fce744508d475768d11f4e0f3c81a450ff5a9c53; install_addin prosqlite https://github.com/nicos-angelopoulos/prosqlite.git cfd2f68709f5fb61833c0e2f8e9c6546e542009c; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] || install_addin rocksdb https://github.com/JanWielemaker/rocksdb.git f110766ee97cfbc6fddd4c33b7238f00e76ecc18; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] ||  install_addin hdt https://github.com/JanWielemaker/hdt.git e0a0eff87fc3318434cb493690c570e1255ed30e; install_addin rserve_client https://github.com/JanWielemaker/rserve_client.git 48a46160bc2768182be757ab179c26935db41de7; apt-get purge -y --auto-remove $BUILD_DEPS 1
set -eux; SWIPL_VER=8.4.1; SWIPL_CHECKSUM=30bb6542b7767e47b94bd92e8e8a7d7a8a000061044046edf45fc864841b69c4; BUILD_DEPS='make cmake ninja-build gcc g++ wget git autoconf libarchive-dev libgmp-dev libossp-uuid-dev libpcre3-dev libreadline-dev libedit-dev libssl-dev zlib1g-dev libdb-dev unixodbc-dev libsqlite3-dev libserd-dev libraptor2-dev libgeos++-dev libspatialindex-dev libgoogle-perftools-dev libgeos-dev libspatialindex-dev'; dpkgArch="$(dpkg --print-architecture)"; apt-get update; apt-get install -y --no-install-recommends $BUILD_DEPS; rm -rf /var/lib/apt/lists/*; mkdir /tmp/src; cd /tmp/src; wget -q https://www.swi-prolog.org/download/stable/src/swipl-$SWIPL_VER.tar.gz; echo "$SWIPL_CHECKSUM  swipl-$SWIPL_VER.tar.gz" >> swipl-$SWIPL_VER.tar.gz-CHECKSUM; sha256sum -c swipl-$SWIPL_VER.tar.gz-CHECKSUM; tar -xzf swipl-$SWIPL_VER.tar.gz; mkdir swipl-$SWIPL_VER/build; cd swipl-$SWIPL_VER/build; cmake -DCMAKE_BUILD_TYPE=PGO -DSWIPL_PACKAGES_X=OFF -DSWIPL_PACKAGES_JAVA=OFF -DCMAKE_INSTALL_PREFIX=/usr -G Ninja ..; ninja; ninja install; rm -rf /tmp/src; mkdir -p /usr/share/swi-prolog/pack; cd /usr/share/swi-prolog/pack; install_addin () { git clone "$2" "$1"; git -C "$1" checkout -q "$3"; if [ "$1" = 'prosqlite' ]; then rm -rf "$1/lib"; fi; swipl -g "pack_rebuild($1)" -t halt; find "$1" -mindepth 1 -maxdepth 1 ! -name lib ! -name prolog ! -name pack.pl -exec rm -rf {} +; find "$1" -name .git -exec rm -rf {} +; find "$1" -name '*.so' -exec strip {} +; }; dpkgArch="$(dpkg --print-architecture)"; install_addin space https://github.com/JanWielemaker/space.git fce744508d475768d11f4e0f3c81a450ff5a9c53; install_addin prosqlite https://github.com/nicos-angelopoulos/prosqlite.git cfd2f68709f5fb61833c0e2f8e9c6546e542009c; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] || install_addin rocksdb https://github.com/JanWielemaker/rocksdb.git f110766ee97cfbc6fddd4c33b7238f00e76ecc18; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] ||  install_addin hdt https://github.com/JanWielemaker/hdt.git e0a0eff87fc3318434cb493690c570e1255ed30e; install_addin rserve_client https://github.com/JanWielemaker/rserve_client.git 48a46160bc2768182be757ab179c26935db41de7; apt-get purge -y --auto-remove $BUILD_DEPS 1
set -eux; SWIPL_VER=8.5.2; SWIPL_CHECKSUM=4f582b70e5aef59ca95338a1cac3630360f3c2fe6623a0701bd49b46079a5aa4; BUILD_DEPS='make cmake ninja-build gcc g++ wget git autoconf libarchive-dev libgmp-dev libossp-uuid-dev libpcre3-dev libreadline-dev libedit-dev libssl-dev zlib1g-dev libdb-dev unixodbc-dev libsqlite3-dev libserd-dev libraptor2-dev libgeos++-dev libspatialindex-dev libgoogle-perftools-dev libgeos-dev libspatialindex-dev'; dpkgArch="$(dpkg --print-architecture)"; apt-get update; apt-get install -y --no-install-recommends $BUILD_DEPS; rm -rf /var/lib/apt/lists/*; mkdir /tmp/src; cd /tmp/src; wget -q https://www.swi-prolog.org/download/devel/src/swipl-$SWIPL_VER.tar.gz; echo "$SWIPL_CHECKSUM  swipl-$SWIPL_VER.tar.gz" >> swipl-$SWIPL_VER.tar.gz-CHECKSUM; sha256sum -c swipl-$SWIPL_VER.tar.gz-CHECKSUM; tar -xzf swipl-$SWIPL_VER.tar.gz; mkdir swipl-$SWIPL_VER/build; cd swipl-$SWIPL_VER/build; cmake -DCMAKE_BUILD_TYPE=PGO -DSWIPL_PACKAGES_X=OFF -DSWIPL_PACKAGES_JAVA=OFF -DCMAKE_INSTALL_PREFIX=/usr -G Ninja ..; ninja; ninja install; rm -rf /tmp/src; mkdir -p /usr/share/swi-prolog/pack; cd /usr/share/swi-prolog/pack; install_addin () { git clone "$2" "$1"; git -C "$1" checkout -q "$3"; if [ "$1" = 'prosqlite' ]; then rm -rf "$1/lib"; fi; swipl -g "pack_rebuild($1)" -t halt; find "$1" -mindepth 1 -maxdepth 1 ! -name lib ! -name prolog ! -name pack.pl -exec rm -rf {} +; find "$1" -name .git -exec rm -rf {} +; find "$1" -name '*.so' -exec strip {} +; }; dpkgArch="$(dpkg --print-architecture)"; install_addin space https://github.com/JanWielemaker/space.git fce744508d475768d11f4e0f3c81a450ff5a9c53; install_addin prosqlite https://github.com/nicos-angelopoulos/prosqlite.git cfd2f68709f5fb61833c0e2f8e9c6546e542009c; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] || install_addin rocksdb https://github.com/JanWielemaker/rocksdb.git f110766ee97cfbc6fddd4c33b7238f00e76ecc18; [ "$dpkgArch" = 'armhf' ] || [ "$dpkgArch" = 'armel' ] ||  install_addin hdt https://github.com/JanWielemaker/hdt.git e0a0eff87fc3318434cb493690c570e1255ed30e; install_addin rserve_client https://github.com/JanWielemaker/rserve_client.git 48a46160bc2768182be757ab179c26935db41de7; apt-get purge -y --auto-remove $BUILD_DEPS 1
set -e; BASE_PKGS="curl dpkg-dev debhelper devscripts equivs git pkg-config apt-utils fakeroot sbuild"; export DEBIAN_FRONTEND=noninteractive; export DEBCONF_NONINTERACTIVE_SEEN=true; mkdir -p /work/varnish /pkgs; apt-get update; apt-get install -y $BASE_PKGS; cd /work/varnish; git clone https://github.com/varnishcache/pkg-varnish-cache.git; cd pkg-varnish-cache; git checkout 3ba24a8eee8cc5c082714034145b907402bbdb83; rm -rf .git; curl -f https://varnish-cache.org/downloads/varnish-7.1.0.tgz -o $tmpdir/orig.tgz; echo "ad9ce0cdc759976fcb7044914d28863edd197167f583fab2d1bc57f4e5b86c224b7c948faf1f7364a2a16bde9c415375d011462bdc43026c5f7a60e65bd21f73  $tmpdir/orig.tgz" | sha512sum -c -; tar xavf $tmpdir/orig.tgz --strip 1; sed -i -e "s|@VERSION@|7.1.0|"  "debian/changelog"; mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --yes" debian/control; sed -i '' debian/varnish*; dpkg-buildpackage -us -uc -j"$(nproc)"; apt-get -y install ../*.deb; mv ../*dev*.deb /pkgs;  git clone https://github.com/varnish/toolbox.git; cd toolbox; git checkout 96bab07cf58b6e04824ffec608199f1780ff0d04; cp install-vmod/install-vmod /usr/local/bin/;  install-vmod https://github.com/varnish/varnish-modules/releases/download/0.20.0/varnish-modules-0.20.0.tar.gz e63d6da8f63a5ce56bc7a5a1dd1a908e4ab0f6a36b5bdc5709dca2aa9c0b474bd8a06491ed3dee23636d335241ced4c7ef017b57413b05792ad382f6306a0b36;  install-vmod https://github.com/nigoroll/libvmod-dynamic/archive/025e9918f6cba33135e16e0fb0d86b4c34b6dd5a.tar.gz 89b7251529c4c63c408b83c59e32b54b94b0f31f83614a34b3ffc4fb96ebdac5b6f8b5fe5b95056d5952a3c0a0217c935c5073c38415f7680af748e58c041816;  apt-get -y purge --auto-remove varnish-build-deps $BASE_PKGS; rm -rf /var/lib/apt/lists/* /work/ /usr/lib/varnish/vmods/libvmod_*.la; chown varnish /var/lib/varnish; 1
set -e BASE_PKGS="tar alpine-sdk  py3-docutils python3 autoconf automake libtool"; apk add --virtual varnish-build-deps -q --no-progress --update $BASE_PKGS; adduser -D builder; echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/ers.d/builder; addgroup builder abuild; su builder -c "abuild-keygen -nai";  git clone https://github.com/varnishcache/pkg-varnish-cache.git; cd pkg-varnish-cache/alpine; git checkout 3ba24a8eee8cc5c082714034145b907402bbdb83; sed -i APKBUILD -e "s/pkgver=@VERSION@/pkgver=7.1.0/" -e 's@^source=.*@source="http://varnish-cache.org/_downloads/varnish-$pkgver.tgz"@' -e "s/^sha512sums=.*/sha512sums=\"ad9ce0cdc759976fcb7044914d28863edd197167f583fab2d1bc57f4e5b86c224b7c948faf1f7364a2a16bde9c415375d011462bdc43026c5f7a60e65bd21f73  varnish-\$pkgver.tgz\"/";  chown builder -R .; su builder -c "abuild -r"; apk add --allow-untrusted ~builder/packages/pkg-varnish-cache/*/*.apk; echo -e 'vcl 4.1;\nbackend default none;' > /etc/varnish/default.vcl;  git clone https://github.com/varnish/toolbox.git; cd toolbox; git checkout 96bab07cf58b6e04824ffec608199f1780ff0d04; cp install-vmod/install-vmod /usr/local/bin/;  install-vmod https://github.com/varnish/varnish-modules/releases/download/0.20.0/varnish-modules-0.20.0.tar.gz e63d6da8f63a5ce56bc7a5a1dd1a908e4ab0f6a36b5bdc5709dca2aa9c0b474bd8a06491ed3dee23636d335241ced4c7ef017b57413b05792ad382f6306a0b36;  install-vmod https://github.com/nigoroll/libvmod-dynamic/archive/025e9918f6cba33135e16e0fb0d86b4c34b6dd5a.tar.gz 89b7251529c4c63c408b83c59e32b54b94b0f31f83614a34b3ffc4fb96ebdac5b6f8b5fe5b95056d5952a3c0a0217c935c5073c38415f7680af748e58c041816;  apk del --no-network varnish-build-deps; rm -rf ~builder /pkg-varnish-cache /varnish-modules /vmod-dynamic /etc/ers.d/builder; deluser --remove-home builder; chown varnish /var/lib/varnish; 1
set -e BASE_PKGS="tar alpine-sdk  py3-docutils python3 autoconf automake libtool"; apk add --virtual varnish-build-deps -q --no-progress --update $BASE_PKGS; adduser -D builder; echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/ers.d/builder; addgroup builder abuild; su builder -c "abuild-keygen -nai";  git clone https://github.com/varnishcache/pkg-varnish-cache.git; cd pkg-varnish-cache/alpine; git checkout 3ba24a8eee8cc5c082714034145b907402bbdb83; sed -i APKBUILD -e "s/pkgver=@VERSION@/pkgver=7.1.0/" -e 's@^source=.*@source="http://varnish-cache.org/_downloads/varnish-$pkgver.tgz"@' -e "s/^sha512sums=.*/sha512sums=\"ad9ce0cdc759976fcb7044914d28863edd197167f583fab2d1bc57f4e5b86c224b7c948faf1f7364a2a16bde9c415375d011462bdc43026c5f7a60e65bd21f73  varnish-\$pkgver.tgz\"/";  chown builder -R .; su builder -c "abuild -r"; apk add --allow-untrusted ~builder/packages/pkg-varnish-cache/*/*.apk; echo -e 'vcl 4.1;\nbackend default none;' > /etc/varnish/default.vcl;  mkdir -p /work/varnish-modules; cd /work/varnish-modules; curl -fLo src.tar.gz https://github.com/varnish/varnish-modules/releases/download/0.20.0/varnish-modules-0.20.0.tar.gz; echo "e63d6da8f63a5ce56bc7a5a1dd1a908e4ab0f6a36b5bdc5709dca2aa9c0b474bd8a06491ed3dee23636d335241ced4c7ef017b57413b05792ad382f6306a0b36  src.tar.gz" | sha512sum -c -; tar xavf src.tar.gz --strip 1; ./configure --libdir=/usr/lib; make -j"$(nproc)" install; make -j"$(nproc)" check;  mkdir /work/vmod-dynamic; cd /work/vmod-dynamic; curl -fLo src.tar.gz https://github.com/nigoroll/libvmod-dynamic/archive/9666973952f62110c872d720af3dae0b85b4b597.tar.gz; echo "e62f1ee801ab2c9e22f5554bbe40c239257e2c46ea3d2ae19b465b1c82edad6f675417be8f7351d4f9eddafc9ad6c0149f88edc44dd0b922ad82e5d75b6b15a5  src.tar.gz" | sha512sum -c -; tar xavf src.tar.gz --strip 1; ./autogen.sh; ./configure --libdir=/usr/lib; make -j"$(nproc)" install; make -j"$(nproc)" check;  apk del --no-network varnish-build-deps; rm -rf ~builder /pkg-varnish-cache /varnish-modules /vmod-dynamic /etc/ers.d/builder; deluser --remove-home builder; chown varnish /var/lib/varnish; 1
set -e; BASE_PKGS="curl dpkg-dev debhelper devscripts equivs git pkg-config apt-utils fakeroot sbuild"; export DEBIAN_FRONTEND=noninteractive; export DEBCONF_NONINTERACTIVE_SEEN=true; mkdir -p /work/varnish /pkgs; apt-get update; apt-get install -y $BASE_PKGS; cd /work/varnish; git clone https://github.com/varnishcache/pkg-varnish-cache.git; cd pkg-varnish-cache; git checkout 3ba24a8eee8cc5c082714034145b907402bbdb83; rm -rf .git; curl -f https://varnish-cache.org/downloads/varnish-7.1.0.tgz -o $tmpdir/orig.tgz; echo "ad9ce0cdc759976fcb7044914d28863edd197167f583fab2d1bc57f4e5b86c224b7c948faf1f7364a2a16bde9c415375d011462bdc43026c5f7a60e65bd21f73  $tmpdir/orig.tgz" | sha512sum -c -; tar xavf $tmpdir/orig.tgz --strip 1; sed -i -e "s|@VERSION@|7.1.0|"  "debian/changelog"; mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --yes" debian/control; sed -i '' debian/varnish*; dpkg-buildpackage -us -uc -j"$(nproc)"; apt-get -y install ../*.deb; mv ../*dev*.deb /pkgs;  mkdir /work/varnish-modules; cd /work/varnish-modules; curl -fLo src.tar.gz https://github.com/varnish/varnish-modules/releases/download/0.20.0/varnish-modules-0.20.0.tar.gz; echo "e63d6da8f63a5ce56bc7a5a1dd1a908e4ab0f6a36b5bdc5709dca2aa9c0b474bd8a06491ed3dee23636d335241ced4c7ef017b57413b05792ad382f6306a0b36  src.tar.gz" | sha512sum -c -; tar xavf src.tar.gz --strip 1; ./configure --libdir=/usr/lib; make -j"$(nproc)" install; make -j"$(nproc)" check;  mkdir /work/vmod-dynamic; cd /work/vmod-dynamic; curl -fLo src.tar.gz https://github.com/nigoroll/libvmod-dynamic/archive/9666973952f62110c872d720af3dae0b85b4b597.tar.gz; echo "e62f1ee801ab2c9e22f5554bbe40c239257e2c46ea3d2ae19b465b1c82edad6f675417be8f7351d4f9eddafc9ad6c0149f88edc44dd0b922ad82e5d75b6b15a5  src.tar.gz" | sha512sum -c -; tar xavf src.tar.gz --strip 1; ./autogen.sh; ./configure --libdir=/usr/lib; make -j"$(nproc)" install; make -j"$(nproc)" check; apt-get -y purge --auto-remove varnish-build-deps $BASE_PKGS; rm -rf /var/lib/apt/lists/* /work/ /usr/lib/varnish/vmods/libvmod_*.la; chown varnish /var/lib/varnish; 1
set -e; BASE_PKGS="curl dpkg-dev debhelper devscripts equivs git pkg-config apt-utils fakeroot"; export DEBIAN_FRONTEND=noninteractive; export DEBCONF_NONINTERACTIVE_SEEN=true; tmpdir="$(mktemp -d)"; cd "$tmpdir"; apt-get update; apt-get install -y $BASE_PKGS; git clone https://github.com/varnishcache/pkg-varnish-cache.git; cd pkg-varnish-cache; git checkout d3e6a3fad7d4c2ac781ada92dcc246e7eef9d129; rm -rf .git; curl -f https://varnish-cache.org/downloads/varnish-7.0.2.tgz -o $tmpdir/orig.tgz; echo "5eb08345c95152639266b7ad241185188477f8fd04e88e4dfda1579719a1a413790a0616f25d70994f6d3b8f7640ea80926ece7c547555dad856fd9f6960c9a3  $tmpdir/orig.tgz" | sha512sum -c -; tar xavf $tmpdir/orig.tgz --strip 1; sed -i -e "s|@VERSION@|7.0.2|"  "debian/changelog"; mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --yes" debian/control; sed -i '' debian/varnish*; dpkg-buildpackage -us -uc -j"$(nproc)"; apt-get -y install ../*.deb; apt-get -y purge --auto-remove varnish-build-deps $BASE_PKGS; mkdir /pkgs; mv ../*dev*.deb /pkgs; rm -rf /var/lib/apt/lists/* "$tmpdir"; 1
set -e BASE_PKGS="tar alpine-sdk  git"; apk add --virtual varnish-build-deps -q --no-progress --update $BASE_PKGS; git clone https://github.com/varnishcache/pkg-varnish-cache.git; cd pkg-varnish-cache/alpine; git checkout d3e6a3fad7d4c2ac781ada92dcc246e7eef9d129; sed -i APKBUILD -e "s/pkgver=@VERSION@/pkgver=7.0.2/" -e 's@^source=.*@source="https://varnish-cache.org/downloads/varnish-$pkgver.tgz"@' -e "s/^sha512sums=.*/sha512sums=\"5eb08345c95152639266b7ad241185188477f8fd04e88e4dfda1579719a1a413790a0616f25d70994f6d3b8f7640ea80926ece7c547555dad856fd9f6960c9a3  varnish-\$pkgver.tgz\"/"; adduser -D builder; echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/ers; addgroup builder abuild; su builder -c "abuild-keygen -nai"; chown builder -R .; su builder -c "abuild -r" apk add --allow-untrusted ~builder/packages/pkg-varnish-cache/*/*.apk; echo -e 'vcl 4.1;\nbackend default none;' > /etc/varnish/default.vcl; apk del --no-network varnish-build-deps; rm -rf ~builder /pkg-varnish-cache; sed -i '/^builder/d' /etc/ers; deluser --remove-home builder; 1
set -e; BASE_PKGS="curl dpkg-dev debhelper devscripts equivs git pkg-config apt-utils fakeroot"; export DEBIAN_FRONTEND=noninteractive; export DEBCONF_NONINTERACTIVE_SEEN=true; tmpdir="$(mktemp -d)"; cd "$tmpdir"; apt-get update; apt-get install -y $BASE_PKGS; git clone https://github.com/varnishcache/pkg-varnish-cache.git; cd pkg-varnish-cache; git checkout 10da6a585eb7d8defe9d273a51df5b133500eb6b; rm -rf .git; curl -f https://varnish-cache.org/downloads/varnish-6.0.10.tgz -o $tmpdir/orig.tgz; echo "b89ac4465aacde2fde963642727d20d7d33d04f89c0764c43d59fe13e70fe729079fef44da28cc0090fa153ec584a0fe9723fd2ce976e8e9021410a5f73eadd2  $tmpdir/orig.tgz" | sha512sum -c -; tar xavf $tmpdir/orig.tgz --strip 1; sed -i -e "s|@VERSION@|6.0.10|"  "debian/changelog"; mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --yes" debian/control; sed -i '' debian/varnish*; dpkg-buildpackage -us -uc -j"$(nproc)"; apt-get -y install ../*.deb; apt-get -y purge --auto-remove varnish-build-deps $BASE_PKGS; mkdir /pkgs; mv ../*dev*.deb /pkgs; rm -rf /var/lib/apt/lists/* "$tmpdir"; 1
set -eux; apk add --no-cache ca-certificates gnupg openssl libcap su-exec dumb-init tzdata && apkArch="$(apk --print-arch)"; case "$apkArch" in armhf) ARCH='arm' ;; aarch64) ARCH='arm64' ;; x86_64) ARCH='amd64' ;; x86) ARCH='386' ;; *) echo >&2 "error: unsupported architecture: $apkArch"; exit 1 ;; esac && VAULT_GPGKEY=C874011F0AB405110D02105534365D9472D7468F; found=''; for server in hkps://keys.openpgp.org hkps://keyserver.ubuntu.com hkps://pgp.mit.edu ; do echo "Fetching GPG key $VAULT_GPGKEY from $server"; gpg --batch --keyserver "$server" --recv-keys "$VAULT_GPGKEY" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $VAULT_GPGKEY" && exit 1; mkdir -p /tmp/build && cd /tmp/build && wget https://releases.hashicorp.com/vault/1.11.0-rc1/vault_1.11.0-rc1_linux_${ARCH}.zip && wget https://releases.hashicorp.com/vault/1.11.0-rc1/vault_1.11.0-rc1_SHA256SUMS && wget https://releases.hashicorp.com/vault/1.11.0-rc1/vault_1.11.0-rc1_SHA256SUMS.sig && gpg --batch --verify vault_1.11.0-rc1_SHA256SUMS.sig vault_1.11.0-rc1_SHA256SUMS && grep vault_1.11.0-rc1_linux_${ARCH}.zip vault_1.11.0-rc1_SHA256SUMS | sha256sum -c && unzip -d /tmp/build vault_1.11.0-rc1_linux_${ARCH}.zip && cp /tmp/build/vault /bin/vault && if [ -f /tmp/build/EULA.txt ]; then mkdir -p /usr/share/doc/vault; mv /tmp/build/EULA.txt /usr/share/doc/vault/EULA.txt; fi && if [ -f /tmp/build/TermsOfEvaluation.txt ]; then mkdir -p /usr/share/doc/vault; mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/vault/TermsOfEvaluation.txt; fi && cd /tmp && rm -rf /tmp/build && gpgconf --kill dirmngr && gpgconf --kill gpg-agent && apk del gnupg openssl && rm -rf /root/.gnupg 1
{ echo 'deb http://neuro.debian.net/debian bionic main'; echo 'deb http://neuro.debian.net/debian data main'; echo '#deb-src http://neuro.debian.net/debian-devel bionic main'; } > /etc/apt/sources.list.d/neurodebian.sources.list 1
{ echo 'deb http://neuro.debian.net/debian xenial main'; echo 'deb http://neuro.debian.net/debian data main'; echo '#deb-src http://neuro.debian.net/debian-devel xenial main'; } > /etc/apt/sources.list.d/neurodebian.sources.list 1
sed -i -e 's,main *$,main contrib non-free,g' /etc/apt/sources.list.d/neurodebian.sources.list /etc/apt/sources.list 1
apt-get update && apt-get install --no-install-recommends -y build-essential git python3-colcon-common-extensions python3-colcon-mixin python3-rosdep python3-vcstool && rm -rf /var/lib/apt/lists/* 1
rosdep init && rosdep update --rosdistro $ROS_DISTRO 1
colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && colcon mixin update && colcon metadata add default https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && colcon metadata update 1
apt-get update && apt-get install -y --no-install-recommends ros-rolling-ros-base=0.10.0-1* && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -q -y --no-install-recommends dirmngr gnupg2 && rm -rf /var/lib/apt/lists/* 1
echo "deb http://packages.ros.org/ros2/ubuntu jammy main" > /etc/apt/sources.list.d/ros2-latest.list 1
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 1
apt-get update && apt-get install -y --no-install-recommends ros-rolling-ros-core=0.10.0-1* && rm -rf /var/lib/apt/lists/* 1
npm i --registry=https://registry.npmmirror.com && rm -rf ~/.npm 1
set -x ; cd /app && npm install --registry=https://registry.npm.taobao.org 1
set -x ; cd /app && touch artisan && mkdir -p public && npm run production 1
set -x ; cd /app && composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ && composer install --ignore-platform-reqs --no-interaction --no-plugins --no-scripts --prefer-dist 1
set -x ; cd /app/laravel && mkdir -p storage && mkdir -p storage/framework/cache && mkdir -p storage/framework/sessions && mkdir -p storage/framework/testing && mkdir -p storage/framework/views && mkdir -p storage/logs && chmod -R 777 storage && php artisan package:discover 1
go get -d -v github.com/go-sql-driver/mysql 1
CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . 1
uname -a > /os.txt 1
npm ci --no-optional --registry https://registry.npmjs.org/ 1
rm package-lock.json 1
npx playwright install 1
addgroup --gid 200 dokku && adduser --uid 200 --gid 200 --disabled-password --gecos "" "dokku" 1
echo "dokku dokku/hostname string dokku.invalid" | debconf-set-selections && echo "dokku dokku/skip_key_file boolean true" | debconf-set-selections && echo "dokku dokku/vhost_enable boolean false" | debconf-set-selections && curl -sSL https://packagecloud.io/dokku/dokku/gpgkey | apt-key add - && echo "deb https://packagecloud.io/dokku/dokku/ubuntu/ focal main" | tee /etc/apt/sources.list.d/dokku.list && mkdir -p /etc/nginx/ && cp /tmp/dhparam.pem /etc/nginx/dhparam.pem && apt-get update && apt-get upgrade -y && apt-get -y --no-install-recommends --only-upgrade install openssl openssh-server && apt-get -y --no-install-recommends install rsync "/tmp/dokku-$(dpkg --print-architecture).deb" && apt-get purge -y syslog-ng-core && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
rsync -a /tmp/ / && rm -rf /tmp/* && rm /etc/runit/runsvdir/default/sshd/down && chown -R dokku:dokku /home/dokku/ && mkdir -p /skel/etc /skel/home /skel/var/lib/dokku /var/log/services && mv /etc/ssh /skel/etc/ssh && mv /home/dokku /skel/home/dokku && mv /var/lib/dokku/config /skel/var/lib/dokku/config && mv /var/lib/dokku/data /skel/var/lib/dokku/data && ln -sf /mnt/dokku/etc/ssh /etc/ssh && ln -sf /mnt/dokku/home/dokku /home/dokku && ln -sf /mnt/dokku/var/lib/dokku/config /var/lib/dokku/config && ln -sf /mnt/dokku/var/lib/dokku/data /var/lib/dokku/data && mv /etc/my_init.d/00_regen_ssh_host_keys.sh /etc/my_init.d/15_regen_ssh_host_keys && rm -f /etc/nginx/sites-enabled/default /usr/share/nginx/html/index.html /etc/my_init.d/10_syslog-ng.init && rm -f /usr/local/openresty/nginx/conf/sites-enabled/default /usr/share/openresty/html/index.html && sed -i '/imklog/d' /etc/rsyslog.conf && rm -f /var/log/btmp /var/log/wtmp /var/log/*log /var/log/apt/* /var/log/dokku/*.log /var/log/nginx/* /var/log/openresty/* 1
apt-get install --no-install-recommends -y build-essential file nano && apt-get install --no-install-recommends -y help2man shellcheck uuid-runtime wget xmlstarlet && apt-get clean autoclean && apt-get autoremove --yes && rm -rf /var/lib/apt/lists/* 1
wget https://dl.google.com/go/go1.17.9.linux-amd64.tar.gz && tar -xvf go1.17.9.linux-amd64.tar.gz && mv go /usr/local 1
GOROOT=/usr/local/go /usr/local/go/bin/go install golang.org/x/tools/gopls@latest 2>&1 1
make ci-dependencies 1
curl -s https://archive.apache.org/dist/hadoop/core/hadoop-2.8.5/hadoop-2.8.5.tar.gz | tar -xz -C /usr/local/ 1
cd /usr/local && ln -s ./hadoop-2.8.5 hadoop 1
sed -i '/^export JAVA_HOME/ s:.*:export JAVA_HOME=/usr/lib/jvm/zulu8\nexport HADOOP_PREFIX=/usr/local/hadoop\nexport HADOOP_HOME=/usr/local/hadoop\n:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh 1
sed -i '/^export HADOOP_CONF_DIR/ s:.*:export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop/:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh 1
mkdir $HADOOP_PREFIX/input 1
cp $HADOOP_PREFIX/etc/hadoop/*.xml $HADOOP_PREFIX/input 1
$HADOOP_PREFIX/bin/hdfs namenode -format 1
start_sshd && $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh && $HADOOP_PREFIX/sbin/start-dfs.sh && $HADOOP_PREFIX/bin/hdfs dfs -mkdir -p /user/root 1
start_sshd && $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh && $HADOOP_PREFIX/sbin/start-dfs.sh && $HADOOP_PREFIX/bin/hdfs dfs -put $HADOOP_PREFIX/etc/hadoop/ input 1
curl -s https://archive.apache.org/dist/hadoop/core/hadoop-3.3.1/hadoop-3.3.1.tar.gz | tar -xz -C /usr/local/ 1
cd /usr/local && ln -s ./hadoop-3.3.1 hadoop 1
sed -i '$ a export JAVA_HOME=/usr/lib/jvm/zulu8' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
sed -i '$ a export HADOOP_HOME=/usr/local/hadoop' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
sed -i '$ a export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop/' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
sed -i '$ a export HDFS_NAMENODE_USER=root' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
sed -i '$ a export HDFS_DATANODE_USER=root' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
sed -i '$ a export HDFS_SECONDARYNAMENODE_USER=root' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
sed -i '$ a export YARN_RESOURCEMANAGER_USER=root' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
sed -i '$ a export YARN_NODEMANAGER_USER=root' $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
cat $HADOOP_HOME/etc/hadoop/hadoop-env.sh 1
mkdir $HADOOP_HOME/input 1
cp $HADOOP_HOME/etc/hadoop/*.xml $HADOOP_HOME/input 1
$HADOOP_HOME/bin/hdfs namenode -format 1
APACHE_ARCHIVE_MIRROR_HOST=https://archive.apache.org /root/base-setup.sh && rm -f /root/base-setup.sh 1
java -version 1
echo "[mysqld]\ncharacter-set-server=utf8\ncollation-server=utf8_bin\n" >> /etc/mysql/my.cnf 1
find /var/lib/mysql -type f -exec touch {} \; && /etc/init.d/mysql start && echo "CREATE USER 'druid'@'%' IDENTIFIED BY 'diurd'; GRANT ALL ON druid.* TO 'druid'@'%'; CREATE database druid DEFAULT CHARACTER SET utf8mb4;" | mysql -u root && /etc/init.d/mysql stop 1
if [ "com.mysql.jdbc.Driver" = "com.mysql.jdbc.Driver" ] ; then wget -q "https://repo1.maven.org/maven2/mysql/mysql-connector-java/$MYSQL_VERSION/mysql-connector-java-$MYSQL_VERSION.jar" -O /usr/local/druid/lib/mysql-connector-java.jar; elif [ "com.mysql.jdbc.Driver" = "org.mariadb.jdbc.Driver" ] ; then wget -q "https://repo1.maven.org/maven2/org/mariadb/jdbc/mariadb-java-client/$MARIA_VERSION/mariadb-java-client-$MARIA_VERSION.jar" -O /usr/local/druid/lib/mysql-connector-java.jar; fi 1
wget -q "https://packages.confluent.io/maven/io/confluent/kafka-protobuf-provider/$CONFLUENT_VERSION/kafka-protobuf-provider-$CONFLUENT_VERSION.jar" -O /usr/local/druid/lib/kafka-protobuf-provider.jar 1
find /var/lib/mysql -type f -exec touch {} \; && service mysql start && java -cp "/usr/local/druid/lib/*" -Ddruid.extensions.directory=/usr/local/druid/extensions -Ddruid.extensions.loadList='["mysql-metadata-storage"]' -Ddruid.metadata.storage.type=mysql -Ddruid.metadata.mysql.driver.driverClassName=com.mysql.jdbc.Driver org.apache.druid.cli.Main tools metadata-init --connectURI="jdbc:mysql://localhost:3306/druid" --user=druid --password=diurd && /etc/init.d/mysql stop 1
perl -pi -e "s/#listeners=.*/listeners=INTERNAL:\/\/172.172.172.2:9092,EXTERNAL:\/\/172.172.172.2:9093/" /usr/local/kafka/config/server.properties 1
perl -pi -e "s/#advertised.listeners=.*/advertised.listeners=INTERNAL:\/\/172.172.172.2:9092,EXTERNAL:\/\/$(cat docker_ip):9093/" /usr/local/kafka/config/server.properties 1
perl -pi -e "s/#listener.security.protocol.map=.*/listener.security.protocol.map=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\ninter.broker.listener.name=INTERNAL/" /usr/local/kafka/config/server.properties 1
perl 1
apt-get update && apt-get install -y gcc zlib1g-dev libstdc++-10-dev && curl -L -o /opt/graalvm-ce.tar.gz "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-linux-amd64-21.1.0.tar.gz" && tar -xf graalvm-ce.tar.gz && /opt/graalvm-ce-java11-21.1.0/bin/gu install native-image && rm graalvm-ce.tar.gz 1
apk --update add --no-cache bash openssl 1
apk --update add --no-cache --virtual egg-deps wget ca-certificates make tar gpgme build-base openssl-dev && wget "https://prdownloads.sourceforge.net/tcl/tcl8.6.12-src.tar.gz" -O tcl8.6.12-src.tar.gz && tar -zxf tcl8.6.12-src.tar.gz && ( cd tcl8.6.12 && sed -i "/define TCL_UTF_MAX/c\#define TCL_UTF_MAX 6" generic/tcl.h && cd unix && ./configure && make && make install ) && wget "https://github.com/eggheads/eggdrop/archive/$EGGDROP_COMMIT.tar.gz" -O develop.tar.gz && echo "$EGGDROP_SHA256 *develop.tar.gz" | sha256sum -c - && tar -zxf develop.tar.gz && rm develop.tar.gz && ( cd eggdrop-$EGGDROP_COMMIT && ./configure && make config && make && make install DEST=/home/eggdrop/eggdrop ) && rm -rf eggdrop-$EGGDROP_COMMIT && mkdir /home/eggdrop/eggdrop/data && chown -R eggdrop /home/eggdrop/eggdrop && apk del egg-deps 1
apk add --no-cache --virtual egg-deps tcl-dev wget ca-certificates make tar gpgme build-base openssl-dev && wget ftp://ftp.eggheads.org/pub/eggdrop/source/1.9/eggdrop-1.9.2.tar.gz && wget ftp://ftp.eggheads.org/pub/eggdrop/source/1.9/eggdrop-1.9.2.tar.gz.asc && gpg --keyserver keyserver.ubuntu.com --recv-key E01C240484DE7DBE190FE141E7667DE1D1A39AFF && gpg --batch --verify eggdrop-1.9.2.tar.gz.asc eggdrop-1.9.2.tar.gz && command -v gpgconf > /dev/null && gpgconf --kill all && rm eggdrop-1.9.2.tar.gz.asc && tar -zxvf eggdrop-1.9.2.tar.gz && rm eggdrop-1.9.2.tar.gz && ( cd eggdrop-1.9.2 && ./configure && make config && make && make install DEST=/home/eggdrop/eggdrop ) && rm -rf eggdrop-1.9.2 && mkdir /home/eggdrop/eggdrop/data && chown -R eggdrop /home/eggdrop/eggdrop && apk del egg-deps 1
apk add --no-cache tcl bash openssl sqlite-tcl mariadb-connector-c-dev tcl-tls && apk add --no-cache tcl-lib --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted && apk add --no-cache --virtual egg-deps tcl-dev wget ca-certificates make tar gpgme build-base openssl-dev && wget ftp://ftp.eggheads.org/pub/eggdrop/source/1.9/eggdrop-1.9.1.tar.gz && wget ftp://ftp.eggheads.org/pub/eggdrop/source/1.9/eggdrop-1.9.1.tar.gz.asc && gpg --keyserver keyserver.ubuntu.com --recv-key E01C240484DE7DBE190FE141E7667DE1D1A39AFF && gpg --batch --verify eggdrop-1.9.1.tar.gz.asc eggdrop-1.9.1.tar.gz && command -v gpgconf > /dev/null && gpgconf --kill all && rm eggdrop-1.9.1.tar.gz.asc && tar -zxvf eggdrop-1.9.1.tar.gz && rm eggdrop-1.9.1.tar.gz && ( cd eggdrop-1.9.1 && ./configure && make config && make && make install DEST=/home/eggdrop/eggdrop ) && rm -rf eggdrop-1.9.1 && mkdir /home/eggdrop/eggdrop/data && chown -R eggdrop /home/eggdrop/eggdrop 1
wget http://www.xdobry.de/mysqltcl/mysqltcl-3.052.tar.gz && tar -zxvf mysqltcl-3.052.tar.gz && rm mysqltcl-3.052.tar.gz && ( cd mysqltcl-3.052 && ./configure && make && make install ) && rm -rf mysqltcl-3.052 && apk del egg-deps 1
apk add --no-cache --virtual egg-deps tcl-dev wget ca-certificates make tar gpgme build-base openssl-dev && wget ftp://ftp.eggheads.org/pub/eggdrop/source/1.8/eggdrop-1.8.4.tar.gz && wget ftp://ftp.eggheads.org/pub/eggdrop/source/1.8/eggdrop-1.8.4.tar.gz.asc && gpg --keyserver ha.pool.sks-keyservers.net --recv-key E01C240484DE7DBE190FE141E7667DE1D1A39AFF && gpg --batch --verify eggdrop-1.8.4.tar.gz.asc eggdrop-1.8.4.tar.gz && command -v gpgconf > /dev/null && gpgconf --kill all && rm eggdrop-1.8.4.tar.gz.asc && tar -zxvf eggdrop-1.8.4.tar.gz && rm eggdrop-1.8.4.tar.gz && ( cd eggdrop-1.8.4 && ./configure && make config && make && make install DEST=/home/eggdrop/eggdrop ) && rm -rf eggdrop-1.8.4 && mkdir /home/eggdrop/eggdrop/data && chown -R eggdrop /home/eggdrop/eggdrop && apk del egg-deps 1
curl -L https://yarnpkg.com/latest.tar.gz | tar xvz && mv yarn-* /yarn && ln -s /yarn/bin/yarn /usr/bin/yarn 1
apt-get -qq update && apt-get -qq dist-upgrade && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && apt-get -qq install --no-install-recommends qtbase5-dev build-essential autoconf libssl-dev gcc-multilib g++-multilib lzip rpm python3.10 libcurl4 git git-lfs ssh unzip libarchive-tools libxtst6 libsecret-1-dev libopenjp2-tools liblzo2-2 && git lfs install && apt-get purge -y --auto-remove && rm -rf /var/lib/apt/lists/* 1
dpkg --add-architecture i386 && curl -Lo /usr/share/keyrings/winehq.asc https://dl.winehq.org/wine-builds/winehq.key && echo 'deb [signed-by=/usr/share/keyrings/winehq.asc] https://dl.winehq.org/wine-builds/ubuntu/ impish main' > /etc/apt/sources.list.d/winehq.list && apt-get update && apt-get install -y --no-install-recommends winehq-stable=6.0.4~impish-1  wine-stable=6.0.4~impish-1  wine-stable-i386=6.0.4~impish-1  wine-stable-amd64=6.0.4~impish-1  && apt-get clean && rm -rf /var/lib/apt/lists/* 1
curl -L https://github.com/electron-userland/electron-builder-binaries/releases/download/wine-2.0.3-mac-10.13/wine-home.zip > /tmp/wine-home.zip && unzip /tmp/wine-home.zip -d /root/.wine && unlink /tmp/wine-home.zip 1
curl -L https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz | tar xz -C /usr/local --strip-components=1 && unlink /usr/local/CHANGELOG.md && unlink /usr/local/LICENSE && unlink /usr/local/README.md && npm config set unsafe-perm true 1
apt-get update -y && apt-get install -y --no-install-recommends mono-devel ca-certificates-mono && apt-get clean && rm -rf /var/lib/apt/lists/* 1
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list && apt-get update -y && apt-get install -y --no-install-recommends xvfb google-chrome-stable libgconf-2-4 && apt-get clean && rm -rf /var/lib/apt/lists/* 1
set -eu; apt-get update; apt-get install -y --no-install-recommends curl unzip ca-certificates; rm -rf /var/lib/apt/lists/* 1
set -eu; arch=$(dpkg --print-architecture); if [ ${arch} = "amd64" ]; then sha256="559706c593e50a26642bb1f402b30d663ac58f2ed15dba8380a588a26e0d8eaa"; fi; if [ ${arch} = "arm64" ]; then sha256="8ff6ce7cf33306ded9e1c240982b9c15ca077db1cb36b645fa983dabb262ae53"; fi; ID="$(sed -n '/^ID=/p' /etc/os-release | sed -r 's/ID=(.*)/\1/g' | sed 's/\"//g')"; VERSION_ID="$(sed -n '/^VERSION_ID=/p' /etc/os-release | sed -r 's/VERSION_ID=(.*)/\1/g' | sed 's/\"//g')"; pkg="emqx-${EMQX_VERSION}-${OTP}-${ID}${VERSION_ID}-${arch}.zip"; curl -f -O -L https://www.emqx.com/en/downloads/broker/${EMQX_VERSION}/${pkg}; echo "$sha256 *$pkg" | sha256sum -c || exit 1; unzip -q -d /opt $pkg; ln -s /opt/emqx/bin/* /usr/local/bin/; rm -rf $pkg 1
set -eu; groupadd -r -g 1000 emqx; useradd -r -m -u 1000 -g emqx emqx; chgrp -Rf emqx /opt/emqx; chmod -Rf g+w /opt/emqx; chown -Rf emqx /opt/emqx 1
groupadd -r -g 1000 emqx && useradd -r -m -u 1000 -g emqx emqx 1
set -eu; apt-get update; apt-get install -y --no-install-recommends ca-certificates curl gnupg; rm -rf /var/lib/apt/lists/* 1
set -eu; key='FC841BA637755CA8487B1E3CC0B409463E640D53'; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; mkdir -p /etc/apt/keyrings; gpg --batch --export "$key" > /etc/apt/keyrings/emqx.gpg; gpgconf --kill all; rm -rf "$GNUPGHOME" 1
set -eu; echo "deb [signed-by=/etc/apt/keyrings/emqx.gpg] https://repos.emqx.io/emqx-ce/deb/debian/ ./buster stable" >> /etc/apt/sources.list.d/emqx.list; apt-get update; apt-get install -y --no-install-recommends emqx="$EMQX_VERSION"; rm -rf /var/lib/apt/lists/* 1
pip3 install -r /tmp/flask-requirements.txt 1
chmod go+r /etc/envoy.yaml && chmod go+x /certs && chmod go+r /certs/* 1
pip install --require-hashes -r /client/requirements.txt 1
chmod a+x /client/grpc-kv-client.py 1
apk --no-cache add make 1
make -C /app/grpc-service 1
yum update -y && yum install -y epel-release  && yum --enablerepo=extras install -y which git autoconf automake libtool make bzip2 && yum --enablerepo=extras install -y  graphviz bzip2-devel openssl-devel gmp-devel && yum --enablerepo=extras install -y  file libusbx-devel && yum --enablerepo=extras install -y libcurl-devel patch vim-common jq && yum install -y python3 python3-devel clang llvm-devel llvm-static procps-ng util-linux  libstdc++ glibc-locale-source glibc-langpack-en && yum clean all && rm -rf /var/cache/yum 1
dnf install -y  https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && dnf group install -y  "Development Tools" && dnf --enablerepo=powertools install -y doxygen ocaml 1
curl -LO https://github.com/Kitware/CMake/releases/download/v3.18.0/cmake-3.18.0.tar.gz && tar -xzf cmake-3.18.0.tar.gz && cd cmake-3.18.0 && ./bootstrap --prefix=/usr/local && make -j$(nproc) && make install && rm -rf cmake-3.18.0.tar.gz cmake-3.18.2 1
curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.72.0/source/boost_1_72_0.tar.bz2 && tar -xjf boost_1_72_0.tar.bz2 && cd boost_1_72_0 && ./bootstrap.sh --prefix=/usr/local && ./b2 --with-iostreams --with-date_time --with-filesystem --with-system --with-program_options --with-chrono --with-test -q -j$(nproc) install && cd / && rm -rf boost_1_72_0.tar.bz2 /boost_1_72_0 1
curl -L https://github.com/jtv/libpqxx/archive/7.2.1.tar.gz | tar zxvf - && cd  libpqxx-7.2.1  && cmake -DSKIP_BUILD_TEST=ON -DCMAKE_BUILD_TYPE=Release -S . -B build && cmake --build build && cmake --install build && cd .. && rm -rf libpqxx-7.2.1 1
ln -s /usr/lib64/libtinfo.so.6 /usr/local/lib/libtinfo.so 1
apt-get update && apt-get upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install -y git make bzip2 automake libbz2-dev libssl-dev doxygen graphviz libgmp3-dev autotools-dev python2.7 python2.7-dev python3 python3-dev python-configparser python-requests python-pip autoconf libtool g++ gcc curl zlib1g-dev  ruby libusb-1.0-0-de libcurl4-gnutls-dev pkg-config patch vim-common jq && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install -y git make bzip2 automake libbz2-dev libssl-dev doxygen graphviz libgmp3-dev autotools-dev python2.7 python2.7-dev python3 python3-dev python-configparser autoconf libtool g++ gcc curl zlib1g-dev  ruby libusb-1.0-0-dev libcurl4-gnutls-dev pkg-config patch vim-common jq gnupg && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install -y git make bzip2 automake libbz2-dev libssl-dev doxygen graphviz libgmp3-dev autotools-dev python2.7 python2.7-dev python3 python3-dev autoconf libtool curl zlib1g-dev  ruby libusb-1.0-0-dev libcurl4-gnutls-dev pkg-config patch llvm-7-dev clang-7 vim-common jq && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get install -y nodejs && apt-get clean && rm -rf /var/lib/apt/lists/* 1
yum update -y && yum install -y epel-release  && yum --enablerepo=extras install -y which git autoconf automake libtool make bzip2 && yum --enablerepo=extras install -y  graphviz bzip2-devel openssl-devel gmp-devel && yum --enablerepo=extras install -y  file libusbx-devel && yum --enablerepo=extras install -y libcurl-devel patch vim-common jq && yum install -y python3 glibc-locale-source glibc-langpack-en && yum clean all && rm -rf /var/cache/yum 1
dnf install -y  https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && dnf group install -y  "Development Tools"  && dnf --enablerepo=powertools install -y doxygen ocaml 1
curl -LO https://github.com/Kitware/CMake/releases/download/v3.18.0/cmake-3.18.0.tar.gz && tar -xzf cmake-3.18.0.tar.gz && cd cmake-3.18.0 && ./bootstrap --prefix=/usr/local && make -j$(nproc)  && make install && rm -rf cmake-3.18.0.tar.gz cmake-3.18.2 1
git clone --single-branch --branch llvmorg-10.0.0 https://github.com/llvm/llvm-project clang10 && mkdir /clang10/build && cd /clang10/build && cmake -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX='/usr/local' -DLLVM_ENABLE_PROJECTS='lld;polly;clang;clang-tools-extra;libcxx;libcxxabi;libunwind;compiler-rt' -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_INCLUDE_DOCS=OFF -DLLVM_TARGETS_TO_BUILD=host -DCMAKE_BUILD_TYPE=Release ../llvm   && make -j$(nproc) && make install && cd / && rm -rf /clang10 1
git clone --depth 1 --single-branch --branch llvmorg-10.0.0 https://github.com/llvm/llvm-project llvm && cd llvm/llvm && mkdir build && cd build && cmake -G 'Unix Makefiles' -DLLVM_TARGETS_TO_BUILD=host -DLLVM_BUILD_TOOLS=false -DLLVM_ENABLE_RTTI=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_TOOLCHAIN_FILE='/tmp/clang.cmake' -DCMAKE_EXE_LINKER_FLAGS=-pthread -DCMAKE_SHARED_LINKER_FLAGS=-pthread -DLLVM_ENABLE_PIC=NO -DLLVM_ENABLE_TERMINFO=OFF .. && make -j$(nproc)  && make install && cd / && rm -rf /llvm 1
curl -L https://github.com/jtv/libpqxx/archive/7.2.1.tar.gz | tar zxvf - && cd  libpqxx-7.2.1  && cmake -DCMAKE_TOOLCHAIN_FILE=/tmp/clang.cmake -DSKIP_BUILD_TEST=ON -DCMAKE_BUILD_TYPE=Release -S . -B build && cmake --build build && cmake --install build && cd .. && rm -rf libpqxx-7.2.1 1
apt-get update && apt-get upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential git automake libbz2-dev libssl-dev doxygen graphviz libgmp3-dev autotools-dev python2.7 python2.7-dev python3 python3-dev autoconf libtool curl zlib1g-dev  ruby libusb-1.0-0-dev libcurl4-gnutls-dev pkg-config apt-transport-https vim-common jq 1
git clone --depth 1 --single-branch --branch llvmorg-10.0.0 https://github.com/llvm/llvm-project llvm && cd llvm/llvm && mkdir build && cd build && cmake -DLLVM_TARGETS_TO_BUILD=host -DLLVM_BUILD_TOOLS=false -DLLVM_ENABLE_RTTI=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_TOOLCHAIN_FILE='/tmp/clang.cmake' -DCMAKE_EXE_LINKER_FLAGS=-pthread -DCMAKE_SHARED_LINKER_FLAGS=-pthread -DLLVM_ENABLE_PIC=NO -DLLVM_ENABLE_TERMINFO=OFF .. && make -j$(nproc) && make install && cd / && rm -rf /llvm 1
ln -snf /usr/share/zoneinfo/America/Chicago /etc/localtime && echo America/Chicago > /etc/timezone && echo "deb http://apt.postgresql.org/pub/repos/apt xenial-pgdg main" > /etc/apt/sources.list.d/pgdg.list && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && apt-get update && apt-get -y install libpq-dev postgresql-13 && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install -y git make bzip2 automake libbz2-dev libssl-dev doxygen graphviz libgmp3-dev autotools-dev python2.7 python2.7-dev python3 python3-dev autoconf libtool curl zlib1g-dev  ruby libusb-1.0-0-dev libcurl4-gnutls-dev pkg-config patch llvm-7-dev clang-7 vim-common jq g++ gnupg && apt-get clean && rm -rf /var/lib/apt/lists/* 1
dotnet publish -c Release -o /app 1
apt-get -y update && apt-get -y install build-essential gcc apt-utils pkg-config software-properties-common apt-transport-https libssl-dev  bash curl tar git netcat bind9 dnsutils lsof && apt-get -y update && apt-get -y upgrade && apt-get -y autoremove && apt-get -y autoclean 1
[ -z "" ] || { ln -sf /usr/share/zoneinfo/"${TIMEZONE#/usr/share/zoneinfo/}" /etc/localtime; dpkg-reconfigure -f noninteractive tzdata; } 1
groupadd --system ${EP_GID:+--gid "0" --non-unique} etherpad && useradd --system ${EP_UID:+--uid "5001" --non-unique} --gid etherpad ${EP_HOME:+--home-dir ""} --create-home ${EP_SHELL:+--shell ""} etherpad 1
mkdir -p "/opt/etherpad-lite" && chown etherpad:etherpad "/opt/etherpad-lite" 1
export DEBIAN_FRONTEND=noninteractive; mkdir -p /usr/share/man/man1 && apt-get -qq update && apt-get -qq dist-upgrade && apt-get -qq --no-install-recommends install ca-certificates git ${INSTALL_ABIWORD:+abiword} ${INSTALL_SOFFICE:+libreoffice} && apt-get -qq clean && rm -rf /var/lib/apt/lists/* 1
{ [ -z "" ] || npm install --no-save --legacy-peer-deps ; } && src/bin/installDeps.sh && rm -rf ~/.npm 1
chmod -R g=u . 1
cd src && npm link 1
pip install Flask gunicorn 1
yarn --ignore-optional 1
yarn build:app:docker 1
apt-get -y update && apt-get install -y --fix-missing build-essential cmake gfortran git wget curl graphicsmagick libgraphicsmagick1-dev libatlas-base-dev libavcodec-dev libavformat-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python3-dev python3-numpy software-properties-common zip && apt-get clean && rm -rf /tmp/* /var/tmp/* 1
python3 -m venv /opt/venv 1
pip3 install --upgrade pip && git clone -b 'v19.21' --single-branch https://github.com/davisking/dlib.git && cd dlib/ && python3 setup.py install --set BUILD_SHARED_LIBS=OFF 1
pip3 install face_recognition 1
yum-config-manager --add-repo https://yum.repos.intel.com/mkl/setup/intel-mkl.repo 1
rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB 1
yum install -y intel-mkl-2019.3-062 1
yum install -y gcc-c++ make swig3 1
yum install -y python-devel numpy 1
./configure --prefix=/usr --libdir=/usr/lib64 --without-cuda 1
make -j $(nproc) 1
make -C python 1
make -C demos demo_ivfpq_indexing && ./demos/demo_ivfpq_indexing 1
pip install httpx PyGithub "pydantic==1.5.1" 1
pip install httpx "pydantic==1.5.1" pygithub 1
apt-get update && apt-get install -y --no-install-recommends wget axel imagemagick libopencv-dev python-opencv build-essential cmake git curl ca-certificates libjpeg-dev libpng-dev axel zip unzip 1
wget https://repo.continuum.io/archive/Anaconda3-5.0.1-Linux-x86_64.sh -P /tmp 1
bash /tmp/Anaconda3-5.0.1-Linux-x86_64.sh -b -p $ANACONDA 1
rm /tmp/Anaconda3-5.0.1-Linux-x86_64.sh -rf 1
conda install -y pytorch=0.4.1 torchvision cuda91 -c pytorch 1
conda install -y -c anaconda pip 1
conda install -y -c menpo opencv3 1
pip install scikit-umfpack 1
pip install cupy-cuda91 1
pip install pynvrtc 1
apt-get update && apt-get --no-install-recommends install -y apt-transport-https apt-utils build-essential python python3 curl gnupg2 1
curl -sL https://deb.nodesource.com/setup_15.x | bash - && apt-get install -y nodejs 1
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && apt-get update && apt-get install -y yarn 1
yarn global add webtreemap typescript 1
apt-get update && apt-get --no-install-recommends install -y apt-transport-https apt-utils build-essential cmake ca-certificates git ninja-build python python3 xorg-dev clang-7 libc++-7-dev libc++abi-7-dev lldb 1
set -eux  update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 100  update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-7 100  update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100  update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100 1
set -eux  git clone https://swiftshader.googlesource.com/SwiftShader swiftshader  cd swiftshader  git checkout 139f5c3  git apply /trees/*.diff  cd build  cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release  ninja 1
apk --update add ca-certificates mailcap curl 1
pip install --upgrade Pillow==5.4.1 idna==2.8 requests==2.21.0 urllib3==1.24.1 pycairo==1.20.1 gftools==0.7.4 fontmake==2.4.0 fontbakery==0.8.0 1
apt-get update && apt-get install -y ttfautohint && apt-get install -y woff2 && apt-get install -y sfnt2woff-zopfli 1
mkdir /builds && useradd -d /builds/worker -s /bin/bash -m worker && chown worker:worker /builds/worker && mkdir /builds/worker/artifacts && chown worker:worker /builds/worker/artifacts 1
apt-get update -qq && apt-get install -y tzdata && apt-get install -y curl git locales mercurial python3 python3-pip && apt-get clean 1
pip3 install --upgrade pip 1
locale-gen "$LANG" 1
dnf -y install dnf-plugins-core && dnf config-manager --set-enabled powertools && yum install --assumeyes epel-release && yum install --assumeyes cmake diffutils gcc-c++ git ncurses-devel ninja-build python3 openssl 1
apt-get update && apt-get -y install build-essential cmake gettext git libncurses5-dev locales ninja-build python3 python3-pip  && locale-gen en_US.UTF-8 1
apk add bash cmake g++ gettext-dev git libintl musl-dev ncurses-dev ninja python3 py3-pexpect 1
addgroup -g 1000 fishuser 1
adduser --disabled-password --gecos "" --home "/home/fishuser" --ingroup fishuser --uid 1000 fishuser 1
mkdir -p /home/fishuser/fish-build && mkdir /fish-source && chown -R fishuser:fishuser /home/fishuser /fish-source 1
apt-get update && apt-get -y install build-essential cmake g++-multilib gettext git lib32ncurses5-dev locales ninja-build pkg-config python3 python3-pexpect  && locale-gen en_US.UTF-8 1
yum install --assumeyes epel-release https://repo.ius.io/ius-release-el7.rpm && yum install --assumeyes cmake3 gcc-c++ git224-core ncurses-devel ninja-build python3 openssl 1
ln -s /usr/bin/cmake3 /usr/bin/cmake && pip3 install pexpect 1
set -x && addgroup hadoop && useradd -d /home/hdfs -ms /bin/bash -G hadoop -p hdfs hdfs && useradd -d /home/yarn -ms /bin/bash -G hadoop -p yarn yarn && useradd -d /home/mapred -ms /bin/bash -G hadoop -p mapred mapred && useradd -d /home/hadoop-user -ms /bin/bash -p hadoop-user hadoop-user 1
set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl tar  openssh-server openssh-client rsync unzip krb5-user net-tools 1
set -x && mkdir -p /var/log/kerberos && touch /var/log/kerberos/kadmind.log 1
set -x && rm -f /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_rsa_key /root/.ssh/id_rsa && ssh-keygen -q -N "" -t dsa -f /etc/ssh/ssh_host_dsa_key && ssh-keygen -q -N "" -t rsa -f /etc/ssh/ssh_host_rsa_key && ssh-keygen -q -N "" -t rsa -f /root/.ssh/id_rsa && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys 1
sed -i 's/^#crypto.policy=unlimited/crypto.policy=unlimited/' $JAVA_HOME/jre/lib/security/java.security 1
set -x && tar -xf /tmp/hadoop.tar.gz -C /usr/local/ && rm /tmp/hadoop.tar.gz* 1
set -x && ln -s /usr/local/hadoop-2.8.5 /usr/local/hadoop && chown root:root -R /usr/local/hadoop-2.8.5/ && chown root:root -R /usr/local/hadoop/ && chown root:yarn /usr/local/hadoop/bin/container-executor && chmod 6050 /usr/local/hadoop/bin/container-executor && mkdir -p /hadoop-data/nm-local-dirs && mkdir -p /hadoop-data/nm-log-dirs && chown yarn:yarn /hadoop-data && chown yarn:yarn /hadoop-data/nm-local-dirs && chown yarn:yarn /hadoop-data/nm-log-dirs && chmod 755 /hadoop-data && chmod 755 /hadoop-data/nm-local-dirs && chmod 755 /hadoop-data/nm-log-dirs 1
mkdir /var/log/hadoop 1
set -x && chmod 400 $HADOOP_HOME/etc/hadoop/container-executor.cfg && chown root:yarn $HADOOP_HOME/etc/hadoop/container-executor.cfg 1
set -x && chmod 600 /root/.ssh/config && chown root:root /root/.ssh/config 1
set -x && ls -la /usr/local/hadoop/etc/hadoop/*-env.sh && chmod +x /usr/local/hadoop/etc/hadoop/*-env.sh && ls -la /usr/local/hadoop/etc/hadoop/*-env.sh 1
set -x && sed  -i "/^[^#]*UsePAM/ s/.*/#&/"  /etc/ssh/sshd_config && echo "UsePAM no" >> /etc/ssh/sshd_config && echo "Port 2122" >> /etc/ssh/sshd_config 1
DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential curl git libcap-dev 1
curl -fOL https://github.com/projectatomic/bubblewrap/releases/download/v0.4.1/bubblewrap-0.4.1.tar.xz 1
tar xf bubblewrap-0.4.1.tar.xz 1
cd bubblewrap-0.4.1 && ./configure --prefix=/usr/local && make &&  make install 1
rm -rf bubblewrap-0.4.1.tar.xz bubblewrap-0.4.1 1
git clone -b 2.0 git://github.com/ocaml/opam /tmp/opam 1
sh -c "cd /tmp/opam && make cold && mkdir -p /usr/local/bin && cp /tmp/opam/opam /usr/local/bin/opam-2.0 && chmod a+x /usr/local/bin/opam-2.0 && rm -rf /tmp/opam" 1
git clone -b master git://github.com/ocaml/opam /tmp/opam 1
sh -c "cd /tmp/opam && make cold && mkdir -p /usr/local/bin && cp /tmp/opam/opam /usr/local/bin/opam-master && chmod a+x /usr/local/bin/opam-master && rm -rf /tmp/opam" 1
ln /usr/bin/opam-2.0 /usr/bin/opam 1
ln -fs /usr/share/zoneinfo/Europe/London /etc/localtime 1
echo 'Acquire::Retries "5";' > /etc/apt/apt.conf.d/mirror-retry 1
DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential curl git rsync  unzip nano libcap-dev libx11-dev 1
echo 'opam ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/ers.d/opam 1
chmod 440 /etc/ers.d/opam 1
chown root:root /etc/ers.d/opam 1
adduser --uid 1000 --disabled-password --gecos '' opam 1
passwd -l opam 1
chown -R opam:opam /home/opam 1
mkdir .ssh 1
chmod 700 .ssh 1
echo 'wrap-build-commands: []' > ~/.opamrc-nosandbox 1
echo 'wrap-install-commands: []' >> ~/.opamrc-nosandbox 1
echo 'wrap-remove-commands: []' >> ~/.opamrc-nosandbox 1
echo 'required-tools: []' >> ~/.opamrc-nosandbox 1
echo '#!/bin/sh' > /home/opam/opam-sandbox-disable 1
echo 'cp ~/.opamrc-nosandbox ~/.opamrc' >> /home/opam/opam-sandbox-disable 1
echo 'echo --- opam sandboxing disabled' >> /home/opam/opam-sandbox-disable 1
chmod a+x /home/opam/opam-sandbox-disable 1
mv /home/opam/opam-sandbox-disable /usr/bin/opam-sandbox-disable 1
echo 'wrap-build-commands: ["%{hooks}%/sandbox.sh" "build"]' > ~/.opamrc-sandbox 1
echo 'wrap-install-commands: ["%{hooks}%/sandbox.sh" "install"]' >> ~/.opamrc-sandbox 1
echo 'wrap-remove-commands: ["%{hooks}%/sandbox.sh" "remove"]' >> ~/.opamrc-sandbox 1
echo '#!/bin/sh' > /home/opam/opam-sandbox-enable 1
echo 'cp ~/.opamrc-sandbox ~/.opamrc' >> /home/opam/opam-sandbox-enable 1
echo 'echo --- opam sandboxing enabled' >> /home/opam/opam-sandbox-enable 1
chmod a+x /home/opam/opam-sandbox-enable 1
mv /home/opam/opam-sandbox-enable /usr/bin/opam-sandbox-enable 1
opam-sandbox-disable 1
opam init -k local -a /home/opam/opam-repository --bare 1
rm -rf .opam/repo/default/.git 1
apk update && apk add --no-cache ca-certificates ruby ruby-irb ruby-etc ruby-webrick tini && apk add --no-cache --virtual .build-deps build-base linux-headers ruby-dev gnupg && echo 'gem: --no-document' >> /etc/gemrc && gem install oj -v 3.10.18 && gem install json -v 2.4.1 && gem install async-http -v 0.54.0 && gem install ext_monitor -v 0.1.2 && gem install fluentd -v 1.14.6 && gem install bigdecimal -v 1.4.4 && apk del .build-deps && rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem /usr/lib/ruby/gems/2.*/gems/fluentd-*/test 1
addgroup -S fluent && adduser -S -G fluent fluent && mkdir -p /fluentd/log && mkdir -p /fluentd/etc /fluentd/plugins && chown -R fluent /fluentd && chgrp -R fluent /fluentd 1
curl -sL -o qemu-6.0.0.balena1-aarch64.tar.gz https://github.com/balena-io/qemu/releases/download/v6.0.0%2Bbalena1/qemu-6.0.0.balena1-aarch64.tar.gz && echo "$QEMU_DOWNLOAD_SHA256 *qemu-6.0.0.balena1-aarch64.tar.gz" | sha256sum -c - | tar zxvf qemu-6.0.0.balena1-aarch64.tar.gz -C . && mv qemu-6.0.0+balena1-aarch64/qemu-aarch64-static . 1
apt-get update && apt-get install -y --no-install-recommends ca-certificates && buildDeps=" make gcc g++ libc-dev wget bzip2 gnupg dirmngr " && apt-get install -y --no-install-recommends $buildDeps && echo 'gem: --no-document' >> /etc/gemrc && gem install oj -v 3.8.1 && gem install json -v 2.3.0 && gem install async-http -v 0.50.7 && gem install ext_monitor -v 0.1.2 && gem install fluentd -v 1.11.5 && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" && wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/v0.18.0/tini-$dpkgArch" && wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/v0.18.0/tini-$dpkgArch.asc" && export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini && rm -r /usr/local/bin/tini.asc && chmod +x /usr/local/bin/tini && tini -h && wget -O /tmp/jemalloc-4.5.0.tar.bz2 https://github.com/jemalloc/jemalloc/releases/download/4.5.0/jemalloc-4.5.0.tar.bz2 && cd /tmp && tar -xjf jemalloc-4.5.0.tar.bz2 && cd jemalloc-4.5.0/ && ./configure && make && mv lib/libjemalloc.so.2 /usr/lib && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem /usr/lib/ruby/gems/2.*/gems/fluentd-*/test 1
apt-get install -y --no-install-recommends gnupg 1
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" |  tee -a /etc/apt/sources.list.d/google-cloud-sdk.list 1
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - 1
apt-get update &&  apt-get install -y google-cloud-sdk && gcloud config set core/disable_usage_reporting true && gcloud config set component_manager/disable_update_check true 1
yes | sdkmanager "platforms;android-29" "build-tools;29.0.2" "extras;google;m2repository" "extras;android;m2repository" 1
yes | sdkmanager "platforms;android-28" "build-tools;28.0.3" "extras;google;m2repository" "extras;android;m2repository" 1
yum install -y epel-release-7-11 centos-release-scl-2-3.el7.centos && yum install -y bind-utils-9.11.4-26.P2.el7_9.7 binutils-2.27-44.base.el7_9.1 curl-7.29.0-59.el7_9.1 gdb-7.6.1-120.el7 hostname-3.13-3.el7_7.1 jq-1.6-2.el7  less-458-9.el7 libubsan-7.3.1-5.16.el7 lsof-4.87-6.el7 net-tools-2.0-0.25.20131004git.el7 nmap-ncat-6.40-19.el7 perf-3.10.0-1160.45.1.el7 perl-5.16.3-299.el7_9 procps-ng-3.3.10-28.el7 strace-4.24-6.el7 sysstat-10.1.5-19.el7 tar-1.26-35.el7 tcpdump-4.9.2-4.el7_7.1 telnet-0.17-66.el7 traceroute-2.0.22-2.el7 unzip-6.0-22.el7_9 vim-enhanced-7.4.629-8.el7_9 && yum clean all && rm -rf /var/cache/yum 1
curl -Ls https://github.com/krallin/tini/releases/download/v0.19.0/tini-amd64 -o tini  && echo "93dcc18adc78c65a028a84799ecf8ad40c936fdfc5f2a57b1acda5a8117fa82c  tini" > tini-sha.txt && sha256sum --quiet -c tini-sha.txt && chmod +x tini && mv tini /usr/bin/ && rm -rf /tmp/* 1
go build -o /fdb-kubernetes-monitor *.go 1
mkdir -p /var/fdb/{logs,tmp,lib} && mkdir -p /usr/lib/fdb/multiversion && echo 6.3.22 > /var/fdb/version 1
groupadd --gid 4059 fdb && useradd --gid 4059 --uid 4059 --no-create-home --shell /bin/bash fdb && chown -R fdb:fdb /var/fdb 1
curl -Ls https://www.foundationdb.org/downloads/6.3.22/linux/fdb_6.3.22.tar.gz | tar zxf - --strip-components=1 && for file in fdbbackup fdbcli fdbdr fdbmonitor fdbrestore fdbserver backup_agent dr_agent fastrestore_tool; do chmod u+x $file; mv $file /usr/bin; done 1
for version in 6.3.22; do curl -Ls https://www.foundationdb.org/downloads/$version/linux/libfdb_c_$version.so -o /usr/lib/fdb/multiversion/libfdb_c_${version%.*}.so; done 1
mkdir -p /var/fdb/lib && for version in 6.3.22; do curl -Ls https://www.foundationdb.org/downloads/$version/linux/libfdb_c_$version.so -o /var/fdb/lib/libfdb_c_${version%.*}.so; done 1
curl -Ls https://www.foundationdb.org/downloads/6.3.22/linux/libfdb_c_6.3.22.so -o /usr/lib/libfdb_c.so 1
rm -rf /tmp/* 1
yum -y install rh-python38-2.0-4.el7 yum clean all && rm -rf /var/cache/yum && source /opt/rh/rh-python38/enable && pip3 install watchdog==0.9.0 1
chmod a+x /entrypoint.bash /sidecar.py 1
curl -LsO https://raw.githubusercontent.com/brendangregg/FlameGraph/90533539b75400297092f973163b8a7b067c66d3/stackcollapse-perf.pl && curl -LsO https://raw.githubusercontent.com/brendangregg/FlameGraph/90533539b75400297092f973163b8a7b067c66d3/flamegraph.pl && echo "a682ac46497d6fdbf9904d1e405d3aea3ad255fcb156f6b2b1a541324628dfc0  flamegraph.pl" > flamegraph-sha.txt && echo "5bcfb73ff2c2ab7bf2ad2b851125064780b58c51cc602335ec0001bec92679a5  stackcollapse-perf.pl" >> flamegraph-sha.txt && sha256sum --quiet -c flamegraph-sha.txt && chmod +x stackcollapse-perf.pl flamegraph.pl && mv stackcollapse-perf.pl flamegraph.pl /usr/bin && rm -rf /tmp/* 1
chmod a+x /var/fdb/scripts/fdb.bash 1
yum -y install java-11-openjdk-11.0.13.0.8-1.el7_9 && yum clean all && rm -rf /var/cache/yum 1
curl -Ls https://amazon-eks.s3.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl -o kubectl && echo "08ff68159bbcb844455167abb1d0de75bbfe5ae1b051f81ab060a1988027868a  kubectl" > kubectl.txt && sha256sum --quiet -c kubectl.txt && mv kubectl /usr/local/bin/kubectl && chmod 755 /usr/local/bin/kubectl && curl -Ls https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.2.43.zip -o "awscliv2.zip" && echo "9a8b3c4e7f72bbcc55e341dce3af42479f2730c225d6d265ee6f9162cfdebdfd  awscliv2.zip" > awscliv2.txt && sha256sum --quiet -c awscliv2.txt && unzip -qq awscliv2.zip && ./aws/install && rm -rf /tmp/* 1
mkdir -p /var/log/fdb-trace-logs && chmod +x /usr/local/bin/run_ycsb.sh 1
DEBIAN_FRONTEND=noninteractive apt-get install -y python3-pip 1
pip3 install Sphinx 1
pip3 install sphinx_rtd_theme 1
pip3 install alabaster 1
pip3 install sphinx-autobuild 1
echo "\n\n\nHey! Use buildkit. See the Makefile or docs\n\n\n" 1
false 1
apt-get update && apt-get -y dist-upgrade && apt-get install --no-install-recommends -y ruby rubygems rubygems-integration bsdtar cpio debsigs pacman rpm  squashfs-tools xz-utils zip && rm -rf /var/lib/apt/lists/* && apt-get clean 1
adduser fpm 1
apt-get update && apt-get install --no-install-recommends -y cpanminus npm perl python3-pip && pip3 --no-cache-dir install setuptools && pip3 --no-cache-dir install wheel && pip3 --no-cache-dir install virtualenv virtualenv-tools3 && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install --no-install-recommends -y gcc make ruby-dev libc-dev lintian git 1
gem install --no-ri --no-rdoc ffi 1
install -d -o fpm /origsrc 1
gem install -v "$(grep -A1 '^BUNDLED WITH' Gemfile.lock | tail -1)" bundler 1
apt-get install --no-install-recommends -y gcc make ruby-dev libc-dev 1
gem install --no-ri --no-rdoc --install-dir=/fpm fpm 1
apt-get update -y && apt-get install -y gnupg2 1
echo "deb http://ppa.launchpad.net/freecad-maintainers/freecad-daily/ubuntu focal main" >> /etc/apt/sources.list.d/freecad-daily.list 1
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 83193AA3B52FF6FCF10A1BBF005EAE8119BB5BCA 1
apt-get install -y    vim    nano    bash 1
apt-get install -y    ccache     cmake     debhelper    dh-exec     dh-python    doxygen     git     graphviz    libboost-date-time-dev   libboost-dev    libboost-filesystem-dev   libboost-filesystem1.71-dev  libboost-graph-dev   libboost-iostreams-dev   libboost-program-options-dev  libboost-program-options1.71-dev libboost-python1.71-dev   libboost-regex-dev   libboost-regex1.71-dev   libboost-serialization-dev  libboost-system1.71-dev   libboost-thread-dev   libboost-thread1.71-dev   libboost1.71-dev   libcoin-dev    libdouble-conversion-dev  libeigen3-dev    libglew-dev    libgts-bin    libgts-dev    libkdtree++-dev    liblz4-dev    libmedc-dev    libmetis-dev    libnglib-dev    libocct-data-exchange-dev  libocct-ocaf-dev   libocct-visualization-dev  libopencv-dev    libproj-dev    libpyside2-dev    libqt5opengl5    libqt5opengl5-dev   libqt5svg5-dev    libqt5webkit5    libqt5webkit5-dev   libqt5x11extras5-dev   libqt5xmlpatterns5-dev   libshiboken2-dev   libspnav-dev    libvtk7-dev    libvtk7.1p    libvtk7.1p-qt    libx11-dev    libxerces-c-dev    libzipios++-dev    lsb-release    nastran     netgen     netgen-headers    occt-draw    pybind11-dev    pyqt5-dev-tools    pyside2-tools    python3-dev    python3-matplotlib   python3-pivy    python3-ply    python3-pyqt5    python3-pyside2.*   python3-pyside2.qtcore   python3-pyside2.qtgui   python3-pyside2.qtsvg   python3-pyside2.qtuitools  python3-pyside2.qtwidgets  python3-pyside2.qtxml   python3-requests   python3-yaml    qt5-default    qt5-qmake    qtbase5-dev    qttools5-dev    qtwebengine5-dev   swig 1
apt-get update -y --fix-missing 1
apt-get clean && rm /var/lib/apt/lists/* /usr/share/doc/* /usr/share/locale/* /usr/share/man/* /usr/share/info/* -fR 1
mkdir /freqtrade && apt-get update && apt-get -y install  libatlas3-base curl sqlite3 libhdf5-serial-dev  && apt-get clean && useradd -u 1000 -G  -U -m -s /bin/bash ftuser && chown ftuser:ftuser /freqtrade && echo "ftuser ALL=(ALL) NOPASSWD: /bin/chown" >> /etc/ers 1
apt-get update && apt-get -y install build-essential libssl-dev git libffi-dev libgfortran5 pkg-config cmake gcc && apt-get clean && pip install --upgrade pip 1
cd /tmp && /tmp/install_ta-lib.sh && rm -r /tmp/*ta-lib* 1
pip install --user --no-cache-dir numpy && pip install --user --no-cache-dir -r requirements-hyperopt.txt 1
pip install -e . --user --no-cache-dir --no-build-isolation && mkdir /freqtrade/user_data/ && freqtrade install-ui 1
apt-get update && apt-get -y install git mercurial  vim build-essential && apt-get clean && mkdir -p /home/ftuser/.vscode-server /home/ftuser/.vscode-server-insiders /home/ftuser/commandhistory && echo "export PROMPT_COMMAND='history -a'" >> /home/ftuser/.bashrc && echo "export HISTFILE=~/commandhistory/.bash_history" >> /home/ftuser/.bashrc && chown ftuser:ftuser -R /home/ftuser/.local/ && chown ftuser: -R /home/ftuser/ 1
pip install --user autopep8 -r docs/requirements-docs.txt -r requirements-dev.txt --no-cache-dir 1
apk add unzip git 1
curl https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh -o /usr/local/bin/wait-for-it && chmod +x /usr/local/bin/wait-for-it 1
chmod +x  /usr/local/bin/install-plugin 1
chmod +x /usr/local/bin/install-wp-graphql-plugins 1
chmod +x /usr/local/bin/wp-start 1
apt-get update -y && apt-get upgrade -y && apt-get install git curl npm -y 1
npm i -g gatsby-cli gatsby-dev-cli 1
echo "\n\necho \"Welcome to the Gatsby Memory benchmark container!\\n  - /usr/src/gatsby : Your local gatsby repo\\n  - /usr/src/app : The memory benchmark gatsby site\\n\"" > /root/.bashrc 1
if [ "$jemalloc" = "1" ]; then echo "Using jemalloc for memory allocation" && apt-get update && apt-get install -y libjemalloc-dev=5.1.0-3 && echo "/usr/lib/x86_64-linux-gnu/libjemalloc.so" >> /etc/ld.so.preload && echo "\n\necho \"This container is using jemelloc.\\n\"" >> /root/.bashrc; fi 1
gatsby-dev --set-path-to-repo /usr/src/gatsby 1
groupadd jhipster && useradd jhipster -s /bin/bash -m -g jhipster -G  && echo 'jhipster:jhipster' |chpasswd && mkdir /home/jhipster/app && export DEBIAN_FRONTEND=noninteractive && export TZ=Europe\Paris && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && apt-get update && apt-get --no-install-recommends install -y wget curl vim git zip bzip2 fontconfig libpng-dev  && ARCH="$(dpkg --print-architecture)"; case "${ARCH}" in aarch64|arm64) ARCH='arm64'; ;; amd64|x86_64) ARCH='x64'; ;; *) echo "Unsupported arch: ${ARCH}"; exit 1; ;; esac; JHI_NODE_VERSION="$(/home/jhipster/generator-jhipster/test-integration/scripts/99-print-node-version.sh)"; wget https://nodejs.org/dist/v$JHI_NODE_VERSION/node-v$JHI_NODE_VERSION-linux-$ARCH.tar.gz -O /tmp/node.tar.gz && tar -C /usr/local --strip-components 1 -xzf /tmp/node.tar.gz && npm install -g npm@7 && npm install -g yo && apt-get clean && rm -rf /home/jhipster/.cache/ /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
cd /home/jhipster/generator-jhipster && npm ci --production && npm install -g /home/jhipster/generator-jhipster && chown -R jhipster:jhipster /home/jhipster /usr/local/lib/node_modules && rm -rf /home/jhipster/.cache/ /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
set -ex && echo "LANG=en_US.utf8" > /etc/locale.conf && echo "net.core.somaxconn = 1024" >> /etc/sysctl.conf && echo "vm.overcommit_memory = 1" >> /etc/sysctl.conf && yum -y install yum -y install *epel* && yum -y localinstall http://mirrors.ustc.edu.cn/mysql-repo/mysql57-community-release-el7.rpm && yum -y install mysql-community-server git redis nginx go npm --nogpgcheck && chmod +x ./entrypoint.sh && npm install -g yarn && go env -w GO111MODULE=on && go env -w GOPROXY=https://goproxy.cn,direct && echo "start" > /dev/null 1
yarn && yarn build 1
cat /etc/nginx/nginx.conf 1
cat /etc/nginx/conf.d/my.conf 1
ls -al /usr/share/nginx/html 1
go env -w GO111MODULE=on && go env -w GOPROXY=https://goproxy.cn,direct && go env -w CGO_ENABLED=0 && go env && go mod tidy && go build -o server . 1
apk --no-cache add build-base git nodejs npm 1
if [ -n "${GITEA_VERSION}" ]; then git checkout "${GITEA_VERSION}"; fi && make clean-all build 1
go build contrib/environment-to-ini/environment-to-ini.go 1
apk --no-cache add bash ca-certificates curl gettext git linux-pam openssh s6 sqlite su-exec gnupg 1
addgroup -S -g 1000 git && adduser -S -H -D -h /data/git -s /bin/bash -u 1000 -G git git && echo "git:*" | chpasswd -e 1
chmod 755 /usr/bin/entrypoint /app/gitea/gitea /usr/local/bin/gitea /usr/local/bin/environment-to-ini 1
chmod 755 /etc/s6/gitea/* /etc/s6/openssh/* /etc/s6/.s6-svscan/* 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends libx11-dev libxkbfile-dev libsecret-1-dev rsync 1
mkdir -p /opt/dev && cd /opt/dev && git clone https://github.com/emscripten-core/emsdk.git && cd /opt/dev/emsdk && ./emsdk install 2.0.6 && ./emsdk activate 2.0.6 1
apt-get update; apt-get install -y xvfb unzip; apt-get -yq autoremove; apt-get clean -yqq; rm -rf /var/lib/apt/lists/* 1
mkdir -p /usr/share/ca-certificates/gitlab 1
echo 'gitlab/ca.crt' >> /etc/ca-certificates.conf 1
chmod -R 644 /usr/share/ca-certificates/gitlab && update-ca-certificates 1
bundle config set --local without development && bundle install --retry=3 1
bundle exec rake -f tasks/webdrivers.rake webdrivers:chromedriver:update 1
apk --no-cache add nodejs postgresql-client tzdata 1
apk add --no-cache --virtual build-deps build-base postgresql-dev && bundle install && apk del build-deps 1
apt-get update && apt-get install -y --no-install-recommends nodejs postgresql-client && rm -rf /var/lib/apt/lists/* 1
bundle install -j $(nproc) 1
go-wrapper download 1
go build -v 1
apt-get update && apt-get install -y --no-install-recommends python3-dev curl build-essential lm-sensors wireless-tools smartmontools iputils-ping && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends curl              lm-sensors        wireless-tools    smartmontools     iputils-ping && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apk add --no-cache python3 python3-dev py3-pip py3-wheel musl-dev linux-headers build-base libzmq zeromq-dev curl lm-sensors wireless-tools iputils 1
apk add --no-cache python3 curl lm-sensors wireless-tools iputils 1
git clone https://github.com/mit-plv/fiat-crypto && cd fiat-crypto && git checkout 23d2dbc4ab897d14bde4404f70cd6991635f9c01 && git submodule update --init --recursive 1
cd fiat-crypto && eval $(opam env) && make -j4 standalone-ocaml SKIP_BEDROCK2=1 1
mkdir /boring 1
apt-get update && apt-get install --no-install-recommends -y cmake xz-utils wget unzip ca-certificates clang-7 1
wget https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip && unzip ninja-linux.zip && rm ninja-linux.zip && mv ninja /usr/local/bin/ 1
wget https://golang.org/dl/go1.12.7.linux-amd64.tar.gz && tar -C /usr/local -xzf go1.12.7.linux-amd64.tar.gz && rm go1.12.7.linux-amd64.tar.gz && ln -s /usr/local/go/bin/go /usr/local/bin/ 1
wget https://commondatastorage.googleapis.com/chromium-boringssl-fips/boringssl-ae223d6138807a13006342edfeef32e813246b39.tar.xz 1
[ "$(sha256sum boringssl-ae223d6138807a13006342edfeef32e813246b39.tar.xz | awk '{print $1}')" = 3b5fdf23274d4179c2077b5e8fa625d9debd7a390aac1d165b7e47234f648bb8 ] 1
cd /go-ethereum && go mod download 1
chmod +x /usr/bin/goctl 1
chmod +x cmd.sh 1
apk update --no-cache && apk add --no-cache tzdata 1
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest 1
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest 1
go build -ldflags="-s -w" -o /app/goctl ./goctl.go 1
apk update --no-cache && apk add --no-cache protoc 1
apk add --no-cache autoconf automake build-base clang clang-static gettext-dev gettext-static git libmaxminddb-dev libmaxminddb-static libressl-dev linux-headers ncurses-dev ncurses-static tzdata 1
autoreconf -fiv 1
CC="clang" CFLAGS="-O3 -static" LIBS="$(pkg-config --libs openssl)" ./configure --prefix="" --enable-utf8 --with-openssl --enable-geoip=mmdb 1
make && make DESTDIR=/dist install 1
apk --no-cache --no-progress add --virtual build-deps build-base git linux-pam-dev 1
./docker/build/install-task.sh 1
TAGS="cert pam" task build 1
apk --no-cache --no-progress add bash ca-certificates curl git linux-pam openssh s6 shadow socat tzdata rsync 1
./docker/build/finalize.sh 1
CGO_ENABLED=0 go build -trimpath -ldflags "-s -w -X main.version=$VERSION -X main.commit=$SHORT_COMMIT -X main.date=$DATE" -o golangci-lint ./cmd/golangci-lint/main.go 1
apk add build-base cmake git icu-dev openssl-dev 1
gem install asciidoctor creole wikicloth org-ruby RedCloth bibtex-ruby && echo "gem-extra complete" 1
bundle exec rake install 1
apk add bash git libc6-compat 1
apt-get -y update --fix-missing 1
apt-get install -y emacs htop python2.7 python-pip git 1
mkdir /home/state_of_sparsity 1
export PYTHONPATH=$PYTHONPATH:pwd 1
apk add --no-cache bash curl docker-cli docker-cli-buildx git gpg mercurial make openssh-client build-base tini 1
chmod +x /entrypoint.sh 1
apk add --no-cache --allow-untrusted /tmp/goreleaser_*.apk 1
apk add --no-cache ca-certificates openssl 1
wget https://github.com/buger/goreplay/releases/download/v${RELEASE_VERSION}/gor_${RELEASE_VERSION}_x64.tar.gz -O gor.tar.gz 1
tar xzf gor.tar.gz 1
apk add --no-cache gcc g++ make 1
go mod verify 1
make build-go 1
apk add --no-cache ca-certificates bash tzdata musl-utils 1
apk add --no-cache openssl ncurses-libs ncurses-terminfo-base --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main 1
apk upgrade ncurses-libs ncurses-terminfo-base --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main 1
apk info -vv | sort 1
go mod init alert_webhook_listener && go build -o main . 1
apk add --no-cache tar 1
mkdir /tmp/grafana && tar xzf /tmp/grafana.tar.gz --strip-components=1 -C /tmp/grafana 1
apk add --no-cache ca-certificates bash tzdata && apk add --no-cache musl-utils 1
apk add --no-cache openssl --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main 1
if [ `arch` = "x86_64" ]; then apk add --no-cache libaio libnsl && ln -s /usr/lib/libnsl.so.2 /usr/lib/libnsl.so.1 && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.30-r0/glibc-2.30-r0.apk -O /tmp/glibc-2.30-r0.apk && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.30-r0/glibc-bin-2.30-r0.apk -O /tmp/glibc-bin-2.30-r0.apk && apk add --no-cache --allow-untrusted /tmp/glibc-2.30-r0.apk /tmp/glibc-bin-2.30-r0.apk && rm -f /tmp/glibc-2.30-r0.apk && rm -f /tmp/glibc-bin-2.30-r0.apk && rm -f /lib/ld-linux-x86-64.so.2 && rm -f /etc/ld.so.cache; fi 1
curl -sSL -o ccache.tar.gz https://github.com/ccache/ccache/releases/download/v4.5.1/ccache-4.5.1.tar.gz && tar -zxf ccache.tar.gz && cd ccache-4.5.1 && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DZSTD_FROM_INTERNET=ON -DHIREDIS_FROM_INTERNET=ON .. && make -j4 && make install && cd ../.. && rm -rf ccache-4.5.1 ccache.tar.gz 1
apk add --no-cache alpine-sdk python3 1
mkdir -p node_modules 1
npm ci --only=production 1
npm rebuild -q 1
echo "{ \"sha\": \"$SHA\" }" > version.json 1
cat version.json 1
apt-get update && apt-get install -y curl gnupg2 git python python3 python3-distutils python3-pip build-essential crossbuild-essential-arm64 qemu-user-static openjdk-11-jdk-headless zip unzip apt-transport-https ca-certificates gnupg-agent software-properties-common pkg-config libffi-dev patch diffutils libssl-dev iptables kmod 1
add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" 1
apt-get -y install docker-ce-cli 1
curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-289.0.0-linux-x86_64.tar.gz | tar zxf - google-cloud-sdk && google-cloud-sdk/install.sh --quiet && ln -s /google-cloud-sdk/bin/gcloud /usr/bin/gcloud 1
sh -c 'curl -o /usr/local/bin/bazel https://releases.bazel.build/4.2.1/release/bazel-4.2.1-linux-$(uname -m | sed s/aarch64/arm64/) && chmod ugo+x /usr/local/bin/bazel' 1
apk update && apk add git 1
git clone https://github.com/linux-test-project/ltp.git --depth 1 1
./ci/alpine.sh 1
make autotools && ./configure 1
make -C testcases/kernel/fs/fsstress 1
cp ./testcases/kernel/fs/fsstress/fsstress /usr/bin 1
rm -rf /fsstress /tmp 1
git clone --depth=1 --branch=v3.25.0 https://github.com/buildkite/agent 1
cd agent && go build -i -o /buildkite-agent . 1
apt-get update && apt-get install -y autoconf build-essential ca-certificates-java curl java-common make openjdk-17-jdk unzip zip 1
set -ex && curl -fsSL --retry 10 -o /tmp/jdk.tar.gz https://github.com/openjdk/jdk17u/archive/refs/tags/jdk-17.0.2-ga.tar.gz && tar -zxzf /tmp/jdk.tar.gz && mv jdk17u-jdk-17.0.2-ga /root/jdk && rm -f /tmp/jdk.tar.gz 1
set -ex && curl -fsSL --retry 10 -o jtreg.tar.gz https://github.com/openjdk/jtreg/archive/284b16ed44b3bc25e9dde11efc4b1013702871cb.tar.gz && tar -zxvf jtreg.tar.gz && mv jtreg-284b16ed44b3bc25e9dde11efc4b1013702871cb jtreg && bash jtreg/make/build.sh --jdk /usr/lib/jvm/java-17-openjdk-* && rm -f jtreg.tar.gz 1
apt-get update && apt-get install -y autoconf automake bison build-essential curl libsqlite3-dev libtool libxml2-dev re2c 1
curl -o php-8.1.1.tar.gz https://www.php.net/distributions/php-8.1.1.tar.gz 1
tar -zxf php-8.1.1.tar.gz 1
apt-get update && apt-get install -y curl gcc libbz2-dev libffi-dev liblzma-dev libreadline-dev libssl-dev make zlib1g-dev 1
curl -LJO https://github.com/python/cpython/archive/v3.10.2.tar.gz 1
tar -zxf cpython-3.10.2.tar.gz 1
./configure --with-pydebug 1
make -s -j2 1
apt-get update && apt-get install -y curl dumb-init g++ make python python3.8 1
curl -o node-v16.13.2.tar.gz https://nodejs.org/dist/v16.13.2/node-v16.13.2.tar.gz 1
tar -zxf node-v16.13.2.tar.gz 1
make test-build 1
chmod +x *.sh 1
apt-get update && apt-get install -y gcc iputils-ping iproute2 1
gcc -O2 -o test_copy_up test_copy_up.c 1
gcc -O2 -o test_rewinddir test_rewinddir.c 1
gcc -O2 -o link_test link_test.c 1
gcc -O2 -o test_sticky test_sticky.c 1
gcc -O2 -o host_fd host_fd.c 1
echo APT::Install-Recommends "0"\; > /etc/apt/apt.conf.d/10disableextras 1
echo APT::Install-Suggests "0"\; >>  /etc/apt/apt.conf.d/10disableextras 1
chmod a+x pkg-resolver/*.sh pkg-resolver/*.py && chmod a+r pkg-resolver/*.json 1
apt-get -q update && apt-get -q install -y --no-install-recommends python3 && apt-get -q install -y --no-install-recommends $(pkg-resolver/resolve.py ubuntu:focal) && apt-get clean && rm -rf /var/lib/apt/lists/* 1
pkg-resolver/install-common-pkgs.sh 1
pkg-resolver/install-spotbugs.sh ubuntu:focal 1
pkg-resolver/install-boost.sh ubuntu:focal 1
pkg-resolver/install-protobuf.sh ubuntu:focal 1
pkg-resolver/install-hadolint.sh ubuntu:focal 1
pkg-resolver/install-intel-isa-l.sh ubuntu:focal 1
chmod 755 /root/hadoop_env_checks.sh 1
echo '${HOME}/hadoop_env_checks.sh' >> /root/.bashrc 1
yum -y install tomcat lsof krb5-workstation sssd-client curl 1
mkdir -p /opt/apache/solr && curl -SL http://archive.apache.org/dist/lucene/solr/7.7.0/solr-7.7.0.tgz | tar -xzC /opt/apache/solr --strip 1 1
chmod 755 /setup-image.sh 1
chmod 755 /usr/bin/entrypoint.sh 1
/setup-image.sh 1
java -Djarmode=layertools -jar application.jar extract 1
ln -sf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone 1
nginx -t 1
set -eux;  apk add --no-cache --virtual .build-deps gcc libc-dev linux-headers lua5.3-dev make openssl openssl-dev pcre2-dev readline-dev tar zlib-dev ;  wget -O haproxy.tar.gz "$HAPROXY_URL"; echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c; mkdir -p /usr/src/haproxy; tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1; rm haproxy.tar.gz;  makeOpts=' TARGET=linux-glibc USE_GETADDRINFO=1 USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 USE_OPENSSL=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_ZLIB=1  EXTRA_OBJS=" contrib/prometheus-exporter/service-prometheus.o " ';  nproc="$(getconf _NPROCESSORS_ONLN)"; eval "make -C /usr/src/haproxy -j '$nproc' all $makeOpts"; eval "make -C /usr/src/haproxy install-bin $makeOpts";  mkdir -p /usr/local/etc/haproxy; cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors; rm -rf /usr/src/haproxy;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .haproxy-rundeps $runDeps; apk del --no-network .build-deps;  haproxy -v 1
set -eux;  apk add --no-cache --virtual .build-deps gcc libc-dev linux-headers lua5.3-dev make openssl openssl-dev pcre2-dev readline-dev tar zlib-dev ;  wget -O haproxy.tar.gz "$HAPROXY_URL"; echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c; mkdir -p /usr/src/haproxy; tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1; rm haproxy.tar.gz;  makeOpts=' TARGET=linux2628 USE_GETADDRINFO=1 USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 USE_OPENSSL=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_ZLIB=1  EXTRA_OBJS=" " ';  nproc="$(getconf _NPROCESSORS_ONLN)"; eval "make -C /usr/src/haproxy -j '$nproc' all $makeOpts"; eval "make -C /usr/src/haproxy install-bin $makeOpts";  mkdir -p /usr/local/etc/haproxy; cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors; rm -rf /usr/src/haproxy;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .haproxy-rundeps $runDeps; apk del --no-network .build-deps;  haproxy -v 1
adduser --disabled-password --gecos "" --home "/nonexistent" --shell "/sbin/nologin" --no-create-home --uid "10001" "appuser" 1
apt-get update && apt-get install -y ca-certificates 1
go get github.com/rakyll/hey 1
CGO_ENABLED=0 GOOS=linux go build -o /go/bin/hey hey.go 1
apk add --no-cache --virtual .gyp python3 make g++ 1
pnpm i --unsafe-perm=true 1
mv packages/hoppscotch-app/.env.example packages/hoppscotch-app/.env 1
pnpm run generate 1
apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends build-essential cmake g++-7 git curl vim wget ca-certificates libjpeg-dev libpng-dev python3.8 python3.8-dev python3.8-distutils librdmacm1 libibverbs1 ibverbs-providers openjdk-8-jdk-headless openssh-client openssh-server && apt-get clean && rm -rf /var/lib/apt/lists/* 1
wget --progress=dot:mega -O /tmp/openmpi-3.0.0-bin.tar.gz https://github.com/horovod/horovod/files/1596799/openmpi-3.0.0-bin.tar.gz && cd /usr/local && tar -zxf /tmp/openmpi-3.0.0-bin.tar.gz && ldconfig && mpirun --version 1
ln -s /usr/bin/python3.8 /usr/bin/python 1
curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py && rm get-pip.py 1
pip install --no-cache-dir torch==1.8.1 torchvision==0.9.1 1
pip install --no-cache-dir pytorch_lightning==1.5.9 1
pip install --no-cache-dir future typing packaging 1
pip install --no-cache-dir tensorflow-cpu==2.6.5 keras h5py 1
pip install --no-cache-dir mxnet==1.8.0.post0 1
wget --progress=dot:giga "https://www.apache.org/dyn/closer.lua/spark/spark-3.1.1/spark-3.1.1-bin-hadoop2.7.tgz?action=download" -O - | tar -xzC /tmp; archive=$(basename "spark-3.1.1/spark-3.1.1-bin-hadoop2.7.tgz") bash -c "mv -v /tmp/\${archive/%.tgz/} /spark" 1
pip install --no-cache-dir pyspark 1
python setup.py sdist && bash -c "HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir -v $(ls /horovod/dist/horovod-*.tar.gz)[spark,ray]" && horovodrun --check-build 1
python -c "import horovod.tensorflow as hvd; hvd.init()" && python -c "import horovod.torch as hvd; hvd.init()" && python -c "import horovod.mxnet as hvd; hvd.init()" 1
apt update -y && apt install python3-pip git -y && pip3 install --no-cache-dir pipenv 1
/bin/bash -c "pip3 install --no-cache-dir -r <(pipenv lock -r)" 1
pip3 install --no-cache-dir /httpbin 1
set -x && adduser -u 82 -D -S -G www-data www-data 1
set -eux; apk add --no-cache apr apr-util apr-util-ldap ca-certificates perl ; 1
set -eux;  apk add --no-cache --virtual .build-deps apr-dev apr-util-dev coreutils dpkg-dev dpkg gcc gnupg libc-dev curl-dev jansson-dev libxml2-dev lua-dev make nghttp2-dev openssl openssl-dev pcre-dev tar zlib-dev brotli-dev ;  ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://downloads.apache.org/ https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; };  ddist 'httpd.tar.bz2' "httpd/httpd-$HTTPD_VERSION.tar.bz2"; echo "$HTTPD_SHA256 *httpd.tar.bz2" | sha256sum -c -;  ddist 'httpd.tar.bz2.asc' "httpd/httpd-$HTTPD_VERSION.tar.bz2.asc"; export GNUPGHOME="$(mktemp -d)"; for key in DE29FB3971E71543FD2DC049508EAEC5302DA568 13155B0E9E634F42BF6C163FDDBA64BA2C312D2F 8B39757B1D8A994DF2433ED58B3A601F08C975E5 31EE1A81B8D066548156D37B7D6DBFD1F08E012A A10208FEC3152DD7C0C9B59B361522D782AB7BD1 3DE024AFDA7A4B15CB6C14410F81AA8AB0D5F771 EB138C6AF0FC691001B16D93344A844D751D7F27 CBA5A7C21EC143314C41393E5B968010E04F9A89 3C016F2B764621BB549C66B516A96495E2226795 937FB3994A242BA9BF49E93021454AF0CC8B0F7E EAD1359A4C0F2D37472AAF28F55DF0293A4E7AC9 4C1EADADB4EF5007579C919C6635B6C0DE885DD3 01E475360FCCF1D0F24B9D145D414AE1E005C9CB 92CCEF0AA7DD46AC3A0F498BCA6939748103A37E D395C7573A68B9796D38C258153FA0CD75A67692 FA39B617B61493FD283503E7EED1EA392261D073 984FB3350C1D5C7A3282255BB31B213D208F5064 FE7A49DAA875E890B4167F76CCB2EB46E76CF6D0 39F6691A0ECF0C50E8BB849CF78875F642721F00 29A2BA848177B73878277FA475CAA2A3F39B3750 120A8667241AEDD4A78B46104C042818311A3DE5 453510BDA6C5855624E009236D0BC73A40581837 0DE5C55C6BF3B2352DABB89E13249B4FEC88A0BF 7CDBED100806552182F98844E8E7E00B4DAA1988 A8BA9617EF3BCCAC3B29B869EDB105896F9522D8 3E6AC004854F3A7F03566B592FF06894E55B0D0E 5B5181C2C0AB13E59DA3F7A3EC582EB639FF092C A93D62ECC3C8EA12DB220EC934EA76E6791485A8 65B2D44FE74BD5E3DE3AC3F082781DE46D5954FA 8935926745E1CE7E3ED748F6EC99EE267EB5F61A E3480043595621FE56105F112AB12A7ADC55C003 93525CFCF6FDFFB3FD9700DD5A4B10AE43B56A27 C55AB7B9139EB2263CD1AABC19B033D1760C227B 26F51EF9A82F4ACB43F1903ED377C9E7D1944C66 ; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --verify httpd.tar.bz2.asc httpd.tar.bz2; command -v gpgconf && gpgconf --kill all || :; rm -rf "$GNUPGHOME" httpd.tar.bz2.asc;  mkdir -p src; tar -xf httpd.tar.bz2 -C src --strip-components=1; rm httpd.tar.bz2; cd src;  patches() { while [ "$#" -gt 0 ]; do local patchFile="$1"; shift; local patchSha256="$1"; shift; ddist "$patchFile" "httpd/patches/apply_to_$HTTPD_VERSION/$patchFile"; echo "$patchSha256 *$patchFile" | sha256sum -c -; patch -p0 < "$patchFile"; rm -f "$patchFile"; done; }; patches ;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; ./configure --build="$gnuArch" --prefix="$HTTPD_PREFIX" --enable-mods-shared=reallyall --enable-mpms-shared=all ; make -j "$(nproc)"; make install;  cd ..; rm -r src man manual;  sed -ri -e 's!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g' -e 's!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g' -e 's!^(\s*TransferLog)\s+\S+!\1 /proc/self/fd/1!g' -e 's!^(\s*User)\s+daemon\s*$!\1 www-data!g' -e 's!^(\s*Group)\s+daemon\s*$!\1 www-data!g' "$HTTPD_PREFIX/conf/httpd.conf" "$HTTPD_PREFIX/conf/extra/httpd-ssl.conf" ; grep -E '^\s*User www-data$' "$HTTPD_PREFIX/conf/httpd.conf"; grep -E '^\s*Group www-data$' "$HTTPD_PREFIX/conf/httpd.conf";  deps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .httpd-so-deps $deps; apk del --no-network .build-deps;  httpd -v 1
set -eux; apt-get update; apt-get install -y --no-install-recommends ca-certificates libaprutil1-ldap libldap-common ; rm -rf /var/lib/apt/lists/* 1
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends bzip2 dirmngr dpkg-dev gcc gnupg libapr1-dev libaprutil1-dev libbrotli-dev libcurl4-openssl-dev libjansson-dev liblua5.2-dev libnghttp2-dev libpcre3-dev libssl-dev libxml2-dev make wget zlib1g-dev ; rm -r /var/lib/apt/lists/*;  ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://downloads.apache.org/ https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; };  ddist 'httpd.tar.bz2' "httpd/httpd-$HTTPD_VERSION.tar.bz2"; echo "$HTTPD_SHA256 *httpd.tar.bz2" | sha256sum -c -;  ddist 'httpd.tar.bz2.asc' "httpd/httpd-$HTTPD_VERSION.tar.bz2.asc"; export GNUPGHOME="$(mktemp -d)"; for key in DE29FB3971E71543FD2DC049508EAEC5302DA568 13155B0E9E634F42BF6C163FDDBA64BA2C312D2F 8B39757B1D8A994DF2433ED58B3A601F08C975E5 31EE1A81B8D066548156D37B7D6DBFD1F08E012A A10208FEC3152DD7C0C9B59B361522D782AB7BD1 3DE024AFDA7A4B15CB6C14410F81AA8AB0D5F771 EB138C6AF0FC691001B16D93344A844D751D7F27 CBA5A7C21EC143314C41393E5B968010E04F9A89 3C016F2B764621BB549C66B516A96495E2226795 937FB3994A242BA9BF49E93021454AF0CC8B0F7E EAD1359A4C0F2D37472AAF28F55DF0293A4E7AC9 4C1EADADB4EF5007579C919C6635B6C0DE885DD3 01E475360FCCF1D0F24B9D145D414AE1E005C9CB 92CCEF0AA7DD46AC3A0F498BCA6939748103A37E D395C7573A68B9796D38C258153FA0CD75A67692 FA39B617B61493FD283503E7EED1EA392261D073 984FB3350C1D5C7A3282255BB31B213D208F5064 FE7A49DAA875E890B4167F76CCB2EB46E76CF6D0 39F6691A0ECF0C50E8BB849CF78875F642721F00 29A2BA848177B73878277FA475CAA2A3F39B3750 120A8667241AEDD4A78B46104C042818311A3DE5 453510BDA6C5855624E009236D0BC73A40581837 0DE5C55C6BF3B2352DABB89E13249B4FEC88A0BF 7CDBED100806552182F98844E8E7E00B4DAA1988 A8BA9617EF3BCCAC3B29B869EDB105896F9522D8 3E6AC004854F3A7F03566B592FF06894E55B0D0E 5B5181C2C0AB13E59DA3F7A3EC582EB639FF092C A93D62ECC3C8EA12DB220EC934EA76E6791485A8 65B2D44FE74BD5E3DE3AC3F082781DE46D5954FA 8935926745E1CE7E3ED748F6EC99EE267EB5F61A E3480043595621FE56105F112AB12A7ADC55C003 93525CFCF6FDFFB3FD9700DD5A4B10AE43B56A27 C55AB7B9139EB2263CD1AABC19B033D1760C227B 26F51EF9A82F4ACB43F1903ED377C9E7D1944C66 ; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; gpg --batch --verify httpd.tar.bz2.asc httpd.tar.bz2; command -v gpgconf && gpgconf --kill all || :; rm -rf "$GNUPGHOME" httpd.tar.bz2.asc;  mkdir -p src; tar -xf httpd.tar.bz2 -C src --strip-components=1; rm httpd.tar.bz2; cd src;  patches() { while [ "$#" -gt 0 ]; do local patchFile="$1"; shift; local patchSha256="$1"; shift; ddist "$patchFile" "httpd/patches/apply_to_$HTTPD_VERSION/$patchFile"; echo "$patchSha256 *$patchFile" | sha256sum -c -; patch -p0 < "$patchFile"; rm -f "$patchFile"; done; }; patches ;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; CFLAGS="$(dpkg-buildflags --get CFLAGS)"; CPPFLAGS="$(dpkg-buildflags --get CPPFLAGS)"; LDFLAGS="$(dpkg-buildflags --get LDFLAGS)"; ./configure --build="$gnuArch" --prefix="$HTTPD_PREFIX" --enable-mods-shared=reallyall --enable-mpms-shared=all --enable-pie CFLAGS="-pipe $CFLAGS" CPPFLAGS="$CPPFLAGS" LDFLAGS="-Wl,--as-needed $LDFLAGS" ; make -j "$(nproc)"; make install;  cd ..; rm -r src man manual;  sed -ri -e 's!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g' -e 's!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g' -e 's!^(\s*TransferLog)\s+\S+!\1 /proc/self/fd/1!g' -e 's!^(\s*User)\s+daemon\s*$!\1 www-data!g' -e 's!^(\s*Group)\s+daemon\s*$!\1 www-data!g' "$HTTPD_PREFIX/conf/httpd.conf" "$HTTPD_PREFIX/conf/extra/httpd-ssl.conf" ; grep -E '^\s*User www-data$' "$HTTPD_PREFIX/conf/httpd.conf"; grep -E '^\s*Group www-data$' "$HTTPD_PREFIX/conf/httpd.conf";  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  httpd -v 1
apt-get install -y software-properties-common binutils 1
apt-get install -y ruby-dev 1
gem install fpm 1
apt-get update && apt-get install -y python3.9 python3.9-dev python3.9-venv 1
apt-get install -y rpm 1
python3.9 -m venv /opt/venv 1
python -m pip install /app 1
python -m pip install pyinstaller wheel 1
python -m pip install --force-reinstall --upgrade pip 1
echo 'BUILD_CHANNEL="pypi"' > /app/httpie/internal/__build_channel__.py 1
python build.py 1
apt-get update && apt-get install -y  golang --no-install-recommends 1
apt-get purge --auto-remove -y curl && rm -rf /var/lib/apt/lists/* 1
groupadd -r app && useradd -r -g app -G  app && mkdir -p /home/app && chown -R app:app /home/app 1
echo '% ALL=(ALL) NOPASSWD:ALL' >> /etc/ers 1
apt-get update && apt-get -y install build-essential chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev curl && apt-get -y clean && curl -Ls https://bitbucket.org/ariya/phantomjs/downloads/${PHANTOM_JS}.tar.bz2 | tar jxvf - --strip-components=2 -C /usr/local/bin/ ${PHANTOM_JS}/bin/phantomjs 1
export LC_ALL=en_US.UTF-8 ON_HEROKU=true && bundle config set --local path vendor/bundle && bundle config set --local without 'test development' && bundle install -j 4 1
/scripts/standalone-packages 1
apk update && apk add --no-cache gcc g++ musl-dev git && go install github.com/magefile/mage 1
mage hugo && mage install 1
apk update && apk add --no-cache ca-certificates libc6-compat libstdc++ git 1
wget https://gitlab.com/openid/conformance-suite/-/archive/release-v4.1.4/conformance-suite-release-v4.1.4.zip && unzip conformance-suite-release-v4.1.4.zip -d . && rm conformance-suite-release-v4.1.4.zip && find conformance-suite-release-v4.1.4 -maxdepth 1 -mindepth 1 -exec mv {} . \; && rmdir conformance-suite-release-v4.1.4 1
mvn -B clean package -DskipTests && apt-get update && apt-get install -y redir ca-certificates && COPY ssl/ory-conformity.crt /etc/ssl/certs/ 1
apt-get update && apt-get install -y apache2 ssl-cert ca-certificates && apt-get clean 1
echo 'Listen 8443' > /etc/apache2/ports.conf && a2enmod headers proxy proxy_ajp proxy_http rewrite ssl && a2dissite 000-default.conf 1
apt-get update && apt-get install -y --no-install-recommends curl apt-utils openssl ca-certificates 1
apt-get update && apt-get install -y --no-install-recommends git g++ make libssl-dev libgflags-dev libprotobuf-dev libprotoc-dev protobuf-compiler libleveldb-dev libsnappy-dev && apt-get clean -y 1
git clone https://github.com/apache/incubator-brpc.git 1
cd incubator-brpc && sh config_brpc.sh --headers=/usr/include --libs=/usr/lib && make -j "$(nproc)" 1
export DEBIAN_FRONTEND=noninteractive && export OS_RELEASE="$(cat /etc/os-release)" && apt-get clean && apt-get update && apt-get install -y wget software-properties-common && wget -qO - wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB -O - | apt-key add -; add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"; INTEL_MKL="-2022.0.2"; apt-get update && apt-get install -y curl zip unzip pandoc build-essential ninja-build git protobuf-compiler libprotobuf-dev default-jdk clang-6.0 clang-format python-yaml clang-10 clang-tidy-10 g++ g++-7 g++-8 intel-oneapi-mkl${INTEL_MKL} intel-oneapi-mkl-devel${INTEL_MKL} libomp-dev libgomp1 libturbojpeg0-dev libcurl4-openssl-dev libatlas-base-dev libzmq3-dev libopencv-dev libxml2-dev numactl libnuma-dev python3 python3-pip doxygen pandoc autoconf gperf libb2-dev libzstd-dev gfortran && rm -rf /var/lib/apt/lists/* && add-apt-repository -r "deb https://apt.repos.intel.com/oneapi all main" 1
export LIBRARY_PATH=$LIBRARY_PATH:/usr/lib/gcc/x86_64-linux-gnu/7/ && mkdir ~/openblas && cd ~/openblas && OPENBLAS_VERSION=0.3.10 && wget https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.zip -O openblas.zip && unzip -q openblas.zip -d . && cd OpenBLAS-${OPENBLAS_VERSION} && CXX="clang++-6.0 -fPIC" CC="clang-6.0 -fPIC" make -j DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 USE_OPENMP=0 INTERFACE64=1 BINARY=64 && make PREFIX=/usr/local/openblas-clang install && cd .. && rm -rf OpenBLAS-${OPENBLAS_VERSION} && unzip -q openblas.zip -d . && cd OpenBLAS-${OPENBLAS_VERSION} && CXX="g++ -fPIC" CC="gcc -fPIC" make -j DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 USE_OPENMP=1 INTERFACE64=1 BINARY=64 && make PREFIX=/usr/local install 1
cd /usr/local/src && wget https://archive.apache.org/dist/creadur/apache-rat-0.13/apache-rat-0.13-bin.tar.gz && tar xf apache-rat-0.13-bin.tar.gz 1
python3 -m pip install --upgrade pip && python3 -m pip install cmake==3.16.6 && python3 -m pip install -r /work/requirements 1
apt-get update && apt-get install -y --allow-change-held-packages libcudnn8 libcudnn8-dev && rm -rf /var/lib/apt/lists/* 1
if [ ! -z "${TRT_VERSION}" ]; then apt-get update && TRT_MAJOR_VERSION=$(echo $TRT_VERSION | cut -d. -f 1) && apt-get install -y libnvinfer${TRT_MAJOR_VERSION}=${TRT_VERSION} libnvinfer-dev=${TRT_VERSION} libnvinfer-plugin${TRT_MAJOR_VERSION}=${TRT_VERSION} libnvinfer-plugin-dev=${TRT_VERSION}; rm -rf /var/lib/apt/lists/*; fi 1
yum -y check-update || true && yum -y install epel-release centos-release-scl && yum install -y wget unzip patchelf pandoc git make ninja-build automake autoconf libtool protobuf-compiler protobuf-devel devtoolset-7 devtoolset-8 rh-python38 rh-maven35 atlas-devel opencv-devel openssl-devel zeromq-devel gperf libb2-devel libzstd-devel gcc-gfortran && yum clean all 1
mkdir ~/openblas && cd ~/openblas && OPENBLAS_VERSION=0.3.10 && wget https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.zip -O openblas.zip && unzip -q openblas.zip -d . && cd OpenBLAS-${OPENBLAS_VERSION} && CXX="g++ -fPIC" CC="gcc -fPIC" make -j DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 && make PREFIX=/usr/local install 1
cd /usr/local/src && wget -nv --no-check-certificate https://cmake.org/files/v3.13/cmake-3.13.5-Linux-x86_64.sh && sh cmake-3.13.5-Linux-x86_64.sh --prefix=/usr/local --skip-license && rm cmake-3.13.5-Linux-x86_64.sh 1
localedef -i en_DK -f UTF-8 en_DK.UTF-8 1
python3 -m pip install --upgrade pip 1
python3 -m pip install -r /work/requirements 1
install/cpp.sh 1
git clone --recursive https://github.com/apache/mxnet && cd mxnet && make -j$(nproc) && rm -r build 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ninja-build cmake ccache git curl unzip && rm -rf /var/lib/apt/lists/* 1
curl -o android-ndk-r19c-linux-x86_64.zip -L https://dl.google.com/android/repository/android-ndk-r19c-linux-x86_64.zip && unzip android-ndk-r19c-linux-x86_64.zip && rm android-ndk-r19c-linux-x86_64.zip 1
git clone --recursive -b v0.3.12 https://github.com/xianyi/OpenBLAS.git && cd /usr/local/OpenBLAS && export TOOLCHAIN=/usr/local/android-ndk-r19c/toolchains/llvm/prebuilt/linux-x86_64 && make NOFORTRAN=1 ARM_SOFTFP_ABI=1 NO_SHARED=1 LDFLAGS="-L/usr/local/android-ndk-r19c/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/lib/gcc/arm-linux-androideabi/4.9.x -lm" CC=$TOOLCHAIN/bin/armv7a-linux-androideabi16-clang AR=$TOOLCHAIN/bin/arm-linux-androideabi-ar && make PREFIX=/usr/local/android-ndk-r19c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/ NO_SHARED=1 install && cd /usr/local && rm -rf OpenBLAS 1
git clone --recursive -b v0.3.12 https://github.com/xianyi/OpenBLAS.git && cd /usr/local/OpenBLAS && export TOOLCHAIN=/usr/local/android-ndk-r19c/toolchains/llvm/prebuilt/linux-x86_64 && make NOFORTRAN=1 NO_SHARED=1 LDFLAGS="-L/usr/local/android-ndk-r21/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/lib/gcc/aarch64-linux-android/4.9.x -lm" CC=$TOOLCHAIN/bin/aarch64-linux-android21-clang AR=$TOOLCHAIN/bin/aarch64-linux-android-ar && make PREFIX=/usr/local/android-ndk-r19c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/ NO_SHARED=1 install && cd /usr/local && rm -rf OpenBLAS 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-pip python3-numpy python3-scipy python3-requests && rm -rf /var/lib/apt/lists/* 1
pip3 install --no-cache-dir --upgrade pip && pip3 install --no-cache-dir pytest==6.1.2 pytest-env==0.6.2 pytest-cov==2.10.1 pytest-xdist==2.1.0 pytest-timeout==1.4.2 mock==2.0.0 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ninja-build cmake ccache git curl zip python3 python3-pip && rm -rf /var/lib/apt/lists/* 1
curl -o armv6-eabihf--glibc--stable-2020.02-2.tar.bz2 -L https://toolchains.bootlin.com/downloads/releases/toolchains/armv6-eabihf/tarballs/armv6-eabihf--glibc--stable-2020.02-2.tar.bz2 && tar xf armv6-eabihf--glibc--stable-2020.02-2.tar.bz2 && rm armv6-eabihf--glibc--stable-2020.02-2.tar.bz2 1
git clone --recursive -b v0.3.12 https://github.com/xianyi/OpenBLAS.git && cd /usr/local/OpenBLAS && make NOFORTRAN=1 NO_SHARED=1 CC=/usr/local/armv6-eabihf--glibc--stable-2020.02-2/bin/arm-linux-gcc && make PREFIX=/usr/local/armv6-eabihf--glibc--stable-2020.02-2/arm-buildroot-linux-gnueabihf/sysroot NO_SHARED=1 install && cd /usr/local && rm -rf OpenBLAS 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y crossbuild-essential-armhf && rm -rf /var/lib/apt/lists/* 1
git clone --recursive -b v0.3.12 https://github.com/xianyi/OpenBLAS.git && cd /usr/local/OpenBLAS && make NOFORTRAN=1 NO_SHARED=1 CC=arm-linux-gnueabihf-gcc && make PREFIX=/usr/local/arm-linux-gnueabihf NO_SHARED=1 install && cd /usr/local && rm -rf OpenBLAS 1
git clone --recursive -b v1.2.11 https://github.com/madler/zlib.git && cd /usr/local/zlib && CHOST=arm CC=arm-linux-gnueabihf-gcc AR=arm-linux-gnueabihf-ar RANLIB=arm-linux-gnueabihf-ranlib ./configure --static --prefix=/usr/local/arm-linux-gnueabihf && make -j$(nproc) && make install && cd /usr/local && rm -rf zlib 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y crossbuild-essential-arm64 && rm -rf /var/lib/apt/lists/* 1
git clone --recursive -b v0.3.12 https://github.com/xianyi/OpenBLAS.git && cd /usr/local/OpenBLAS && make NOFORTRAN=1 NO_SHARED=1 CC=aarch64-linux-gnu-gcc && make PREFIX=/usr/aarch64-linux-gnu NO_SHARED=1 install && cd /usr/local && rm -rf OpenBLAS 1
git clone --recursive -b v1.2.11 https://github.com/madler/zlib.git && cd /usr/local/zlib && CHOST=arm CC=aarch64-linux-gnu-gcc AR=aarch64-linux-gnu-ar RANLIB=aarch64-linux-gnu-ranlib ./configure --static --prefix=/usr/aarch64-linux-gnu && make -j$(nproc) && make install && cd /usr/local && rm -rf zlib 1
apt-get update && mkdir -p /usr/share/man/man1 && apt-get install --yes --no-install-recommends autoconf automake bubblewrap bzip2 cmake curl g++ gcc git libc6-dev libgmp-dev libmpfr-dev libsqlite3-dev make opam openjdk-11-jdk-headless patch patchelf pkg-config python3 python3-distutils unzip xz-utils zlib1g-dev && rm -rf /var/lib/apt/lists/* 1
cd /infer && ./build-infer.sh --only-setup-opam 1
cd /infer && eval $(opam env) && ./autogen.sh && ./configure && ./facebook-clang-plugins/clang/setup.sh 1
apt-get update && mkdir -p /usr/share/man/man1 && apt-get install --yes --no-install-recommends autoconf automake bzip2 cmake curl g++ gcc git libc6-dev libgmp-dev libmpfr-dev libsqlite3-dev make opam openjdk-11-jdk-headless patch patchelf pkg-config python3 python3-distutils unzip xz-utils zlib1g-dev && rm -rf /var/lib/apt/lists/* 1
cd /infer && ./build-infer.sh java --only-setup-opam 1
cd /infer && ./build-infer.sh java 1
apt-get update && mkdir -p /usr/share/man/man1 && apt-get install --yes --no-install-recommends curl libc6-dev openjdk-11-jdk-headless sqlite3 xz-utils zlib1g-dev && rm -rf /var/lib/apt/lists/* 1
INFER_VERSION=v1.1.0; cd /opt && curl -sL https://github.com/facebook/infer/releases/download/${INFER_VERSION}/infer-linux64-${INFER_VERSION}.tar.xz | tar xJ && rm -f /infer && ln -s ${PWD}/infer-linux64-$INFER_VERSION /infer 1
groupadd -r influxdb --gid=1000 && useradd -r -g influxdb --uid=1000 --home-dir=/home/influxdb --shell=/bin/bash influxdb && mkdir -p /home/influxdb && chown -R influxdb:influxdb /home/influxdb 1
set -eux; dpkgArch="$(dpkg --print-architecture)" && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VER/gosu-$dpkgArch" && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VER/gosu-$dpkgArch.asc" && export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && gpgconf --kill all && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc && chmod +x /usr/local/bin/gosu && gosu --version && gosu nobody true 1
set -eux && ARCH= && dpkgArch="$(dpkg --print-architecture)" && case "${dpkgArch##*-}" in amd64) ARCH='amd64';; arm64) ARCH='arm64';; *)     echo "Unsupported architecture: ${dpkgArch}"; exit 1;; esac && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz.asc && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz && export GNUPGHOME="$(mktemp -d)" && echo "disable-ipv6" >> $GNUPGHOME/dirmngr.conf && gpg --batch --keyserver keys.openpgp.org --recv-keys 8C2D403D3C3BDB81A4C27C883C3E4B7317FFE40A && gpg --batch --verify influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz.asc influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz && tar xzf influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz && cp influxdb2_linux_${ARCH}/influxd /usr/local/bin/influxd && gpgconf --kill all && rm -rf "$GNUPGHOME" influxdb2.key influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}* && influxd version 1
set -eux && ARCH= && dpkgArch="$(dpkg --print-architecture)" && case "${dpkgArch##*-}" in amd64) ARCH='amd64';; arm64) ARCH='arm64';; *)     echo "Unsupported architecture: ${dpkgArch}"; exit 1;; esac && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz.asc && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz && export GNUPGHOME="$(mktemp -d)" && echo "disable-ipv6" >> $GNUPGHOME/dirmngr.conf && gpg --batch --keyserver keys.openpgp.org --recv-keys 8C2D403D3C3BDB81A4C27C883C3E4B7317FFE40A && gpg --batch --verify influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz.asc influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz && tar xzf influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz && cp influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}/influx /usr/local/bin/influx && gpgconf --kill all && rm -rf "$GNUPGHOME" influxdb2.key influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}* && influx version 1
apk add --no-cache tzdata bash ca-certificates gnupg run-parts && update-ca-certificates 1
addgroup -S -g 1000 influxdb && adduser -S -G influxdb -u 1000 -h /home/influxdb -s /bin/sh influxdb && mkdir -p /home/influxdb && chown -R influxdb:influxdb /home/influxdb 1
set -eux; ARCH="$(apk --print-arch)" && case "${ARCH}" in x86_64)  ARCH=amd64;; aarch64) ARCH=arm64;; *)       echo "Unsupported architecture: ${ARCH}"; exit 1;; esac && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VER/gosu-$ARCH"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VER/gosu-$ARCH.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true 1
set -eux && ARCH="$(apk --print-arch)" && if [ ${ARCH} = x86_64 ]; then ARCH=amd64; elif [ ${ARCH} = aarch64 ]; then ARCH=arm64; else echo "Unsupported architecture: ${ARCH}" && exit 1; fi && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz.asc && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz && export GNUPGHOME="$(mktemp -d)" && echo "disable-ipv6" >> $GNUPGHOME/dirmngr.conf && gpg --keyserver keys.openpgp.org --recv-keys 8C2D403D3C3BDB81A4C27C883C3E4B7317FFE40A && gpg --batch --verify influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz.asc influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz && tar xzf influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}.tar.gz && cp influxdb2_linux_${ARCH}/influxd /usr/local/bin/influxd && gpgconf --kill all && rm -rf "$GNUPGHOME" influxdb2.key influxdb2-${INFLUXDB_VERSION}-linux-${ARCH}* && influxd version 1
set -eux && ARCH="$(apk --print-arch)" && if [ ${ARCH} = x86_64 ]; then ARCH=amd64; elif [ ${ARCH} = aarch64 ]; then ARCH=arm64; else echo "Unsupported architecture: ${ARCH}" && exit 1; fi && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz.asc && wget --no-verbose https://dl.influxdata.com/influxdb/releases/influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz && export GNUPGHOME="$(mktemp -d)" && echo "disable-ipv6" >> $GNUPGHOME/dirmngr.conf && gpg --keyserver keys.openpgp.org --recv-keys 8C2D403D3C3BDB81A4C27C883C3E4B7317FFE40A && gpg --batch --verify influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz.asc influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz && tar xzf influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}.tar.gz && cp influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}/influx /usr/local/bin/influx && gpgconf --kill all && rm -rf "$GNUPGHOME" influxdb2.key influxdb2-client-${INFLUX_CLI_VERSION}-linux-${ARCH}* && influx version 1
wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-meta_${INFLUXDB_VERSION}_amd64.deb.asc && wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-meta_${INFLUXDB_VERSION}_amd64.deb && gpg --batch --verify influxdb-meta_${INFLUXDB_VERSION}_amd64.deb.asc influxdb-meta_${INFLUXDB_VERSION}_amd64.deb && dpkg -i influxdb-meta_${INFLUXDB_VERSION}_amd64.deb && rm -f influxdb-meta_${INFLUXDB_VERSION}_amd64.deb* 1
set -ex && apk add --no-cache --virtual .build-deps wget gnupg tar && for key in 05CE15085FC09D18E99EFB22684A14CF2582E0C5 ; do gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys "$key" ; done && wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-data-${INFLUXDB_VERSION}_linux_amd64.tar.gz.asc && wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-data-${INFLUXDB_VERSION}_linux_amd64.tar.gz && gpg --batch --verify influxdb-data-${INFLUXDB_VERSION}_linux_amd64.tar.gz.asc influxdb-data-${INFLUXDB_VERSION}_linux_amd64.tar.gz && mkdir -p /usr/src && tar -C /usr/src -xzf influxdb-data-${INFLUXDB_VERSION}_linux_amd64.tar.gz && rm -f /usr/src/influxdb-*/influxdb.conf && chmod +x /usr/src/influxdb-*/* && cp -a /usr/src/influxdb-*/* /usr/bin/ && gpgconf --kill all && rm -rf *.tar.gz* /usr/src /root/.gnupg && apk del .build-deps 1
set -ex && apk add --no-cache --virtual .build-deps wget gnupg tar && for key in 05CE15085FC09D18E99EFB22684A14CF2582E0C5 ; do gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys "$key" ; done && wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-meta-${INFLUXDB_VERSION}_linux_amd64.tar.gz.asc && wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-meta-${INFLUXDB_VERSION}_linux_amd64.tar.gz && gpg --batch --verify influxdb-meta-${INFLUXDB_VERSION}_linux_amd64.tar.gz.asc influxdb-meta-${INFLUXDB_VERSION}_linux_amd64.tar.gz && mkdir -p /usr/src && tar -C /usr/src -xzf influxdb-meta-${INFLUXDB_VERSION}_linux_amd64.tar.gz && rm -f /usr/src/influxdb-*/influxdb-meta.conf && chmod +x /usr/src/influxdb-*/* && cp -a /usr/src/influxdb-*/* /usr/bin/ && gpgconf --kill all && rm -rf *.tar.gz* /usr/src /root/.gnupg && apk del .build-deps 1
wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-data_${INFLUXDB_VERSION}_amd64.deb.asc && wget --no-verbose https://dl.influxdata.com/enterprise/releases/influxdb-data_${INFLUXDB_VERSION}_amd64.deb && gpg --batch --verify influxdb-data_${INFLUXDB_VERSION}_amd64.deb.asc influxdb-data_${INFLUXDB_VERSION}_amd64.deb && dpkg -i influxdb-data_${INFLUXDB_VERSION}_amd64.deb && rm -f influxdb-data_${INFLUXDB_VERSION}_amd64.deb* 1
apt-get update && apt-get install -y ca-certificates tzdata && apt-get clean autoclean && apt-get autoremove --yes && rm -rf /var/lib/{apt,dpkg,cache,log} 1
apk update && apk upgrade && apk add -U bash && /build.sh 1
chmod +x /usr/local/entrypoint.sh && apk update && apk upgrade && apk add -U --no-cache bash openssl pcre zlib geoip curl ca-certificates patch yajl lmdb libxml2 libmaxminddb yaml-cpp dumb-init nano tzdata && ln -s /usr/local/nginx/sbin/nginx /sbin/nginx && adduser -S -D -H -u 101 -h /usr/local/nginx -s /sbin/nologin -G www-data -g www-data www-data && bash -eu -c ' writeDirs=( /var/log/nginx /var/lib/nginx/body /var/lib/nginx/fastcgi /var/lib/nginx/proxy /var/lib/nginx/scgi /var/lib/nginx/uwsgi /var/log/audit ); for dir in "${writeDirs[@]}"; do mkdir -p ${dir}; chown -R www-data.www-data ${dir}; done' 1
mkdir -p /opt/third_party/install 1
apk update && apk upgrade && apk add -U bash && bash /opt/third_party/build.sh -p 1
bash /opt/third_party/build.sh -g v1.43.2 1
bash /opt/third_party/build.sh -o v1.3.0 1
bash /opt/third_party/build.sh -n 1
go get . && CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-s -w" -o nginx-errors . 1
mkdir /authsvc 1
CGO_ENABLED=0 GOOS=linux go build -o authsvc authsvc.go 1
apk update && apk add --no-cache python3 python3-dev musl-dev gcc g++ make libffi libffi-dev libstdc++ py3-gevent py3-gunicorn py3-wheel py3-pip && pip3 install httpbin && apk del python3-dev musl-dev gcc g++ make libffi-dev 1
curl -o main.go https://raw.githubusercontent.com/grpc/grpc-go/91e0aeb192456225adf27966d04ada4cf8599915/examples/features/reflection/server/main.go && go mod init greeter-server && go mod tidy && go build -o /greeter-server main.go 1
tar -C /usr/bin -xvf /tmp/inso.tar.xz 1
apk add --no-cache gcompat libstdc++ 1
apt-get update && apt-get install -y curl gcc make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-pip 1
apt update && apt install -y xorg openbox 1
apt install -y net-tools iputils-ping iproute2 telnet  tcpdump conntrack iptables 1
useradd -u $USER_ID -d $USER_HOME -m $USER_NAME 1
echo "$USER_NAME ALL=(ALL) NOPASSWD:ALL" >> /etc/ers 1
git clone https://github.com/ticarpi/jwt_tool 1
chmod +x ./run.sh && chmod +x jwt_tool.py && apt-get update && apt-get install --no-install-recommends -y python3-pip && apt-get clean && rm -rf /var/lib/apt/lists/* 1
python3 -m pip install --no-cache-dir termcolor==1.1.0 cprint==1.2.2 pycryptodomex==3.10.1 requests==2.25.1 1
git clone https://github.com/wireghoul/dotdotpwn 1
chmod +x /dotdotpwn/run.sh && apt-get update && apt-get install --no-install-recommends libwww-perl -y && apt-get clean && rm -rf /var/lib/apt/lists/* 1
CGO_ENABLED=0 GOOS=linux go build -o jwt-server main.go 1
groupadd -g 65532 nonroot && useradd -u 65532 -g nonroot nonroot --create-home 1
echo "server {  listen       80; location ^~ /jeecg-boot { proxy_pass              http://jeecg-boot-system:8080/jeecg-boot/; proxy_set_header        Host jeecg-boot-system; proxy_set_header        X-Real-IP \$remote_addr; proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for; } location / { root   /var/www/html/; index  index.html index.htm; if (!-e \$request_filename) { rewrite ^(.*)\$ /index.html?s=\$1 last; break; } } access_log  /var/log/nginx/access.log ; } " > /etc/nginx/conf.d/default.conf &&  mkdir  -p  /var/www &&  mkdir -p /var/www/html 1
apt-get update && apt-get -y install --no-install-recommends apt-utils dialog locales 2>&1 && apt-get -y install git openssh-client iproute2 procps lsb-release && gem install ruby-debug-ide && gem install debase && apt-get -y install curl software-properties-common && curl -sL https://deb.nodesource.com/setup_13.x | bash - && apt-get -y install nodejs && groupadd --gid 1000 vscode && useradd -s /bin/bash --uid 1000 --gid 1000 -m vscode && apt-get install -y  && echo vscode ALL=\(root\) NOPASSWD:ALL > /etc/ers.d/$USERNAM && chmod 0440 /etc/ers.d/vscode && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* 1
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && dpkg-reconfigure --frontend=noninteractive locales && update-locale LANG=en_US.UTF-8 1
apk add curl git zlib zlib-dev autoconf g++ make libpng-dev gifsicle alpine-sdk automake libtool make gcc musl-dev nasm python3 && curl -L https://github.com/jellyfin/jellyfin-web/archive/master.tar.gz | tar zxf - && cd jellyfin-web-* && npm ci --no-audit --unsafe-perm && mv dist /dist 1
apt-get update && apt-get install --no-install-recommends --no-install-suggests -y ca-certificates gnupg wget apt-transport-https curl && wget -O - https://repo.jellyfin.org/jellyfin_team.gpg.key | apt-key add - && echo "deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/$( awk -F'=' '/^ID=/{ print $NF }' /etc/os-release ) $( awk -F'=' '/^VERSION_CODENAME=/{ print $NF }' /etc/os-release ) main" | tee /etc/apt/sources.list.d/jellyfin.list && apt-get update && apt-get install --no-install-recommends --no-install-suggests -y mesa-va-drivers jellyfin-ffmpeg openssl locales && mkdir intel-compute-runtime && cd intel-compute-runtime && wget https://github.com/intel/compute-runtime/releases/download/22.08.22549/intel-gmmlib_22.0.2_amd64.deb && wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.10395/intel-igc-core_1.0.10395_amd64.deb && wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.10395/intel-igc-opencl_1.0.10395_amd64.deb && wget https://github.com/intel/compute-runtime/releases/download/22.08.22549/intel-opencl-icd_22.08.22549_amd64.deb && wget https://github.com/intel/compute-runtime/releases/download/22.08.22549/intel-level-zero-gpu_1.3.22549_amd64.deb && dpkg -i *.deb && cd .. && rm -rf intel-compute-runtime && apt-get remove gnupg wget apt-transport-https -y && apt-get clean autoclean -y && apt-get autoremove -y && rm -rf /var/lib/apt/lists/* && mkdir -p /cache /config /media && chmod 777 /cache /config /media && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && locale-gen 1
dotnet publish Jellyfin.Server --disable-parallel --configuration Release --output="/jellyfin" --self-contained --runtime linux-x64 "-p:DebugSymbols=false;DebugType=none" 1
cd /tmp/ && if [ -n "gcc" ]; then apt-get update && apt-get upgrade -y && apt-get --only-upgrade install openssl libssl1.1 -y && apt-get install --no-install-recommends -y gcc; fi && if [ -n "${PIP_TAG}" ]; then pip install --default-timeout=1000 --compile --extra-index-url https://www.piwheels.org/simple ".[${PIP_TAG}]" ; fi && pip install --default-timeout=1000 --compile --extra-index-url https://www.piwheels.org/simple . && if [ -n "gcc" ]; then apt-get remove -y --auto-remove gcc && apt-get autoremove && apt-get clean && rm -rf /var/lib/apt/lists/*; fi && rm -rf /tmp/* && rm -rf /jina 1
cd /jina && pip install --no-deps --compile . && rm -rf /tmp/* && rm -rf /jina 1
apt-get update && apt-get install -y build-essential autoconf libtool git bison flex python3 python3-pip wget && pip3 install pipenv && (cd /app/docs && pipenv sync) && (cd /app && git submodule init && git submodule update && autoreconf -i && ./configure --disable-valgrind --enable-all-static --prefix=/usr/local && make -j8 && make check && make install ) && (cd /app/modules/oniguruma && make uninstall ) && (cd /app && make distclean ) && apt-get purge -y build-essential autoconf libtool bison git flex python3 python3-pip && apt-get autoremove -y && rm -rf /app/modules/oniguruma/* && rm -rf /app/modules/oniguruma/.git && rm -rf /app/modules/oniguruma/.gitignore && rm -rf /var/lib/apt/lists/* /var/lib/gems 1
set -eux;  savedAptMark="$(apt-mark showmanual)"; if ! command -v gpg > /dev/null; then apt-get update; apt-get install -y --no-install-recommends gnupg dirmngr ; rm -rf /var/lib/apt/lists/*; fi;  arch="$(dpkg --print-architecture)"; case "$arch" in 'amd64') url='https://julialang-s3.julialang.org/bin/linux/x64/1.7/julia-1.7.3-linux-x86_64.tar.gz'; sha256='9b2f4fa12d92b4dcc5d11dc66fb118c47681a76d3df8da064cc97573f2f5c739'; ;; 'armhf') url='https://julialang-s3.julialang.org/bin/linux/armv7l/1.7/julia-1.7.3-linux-armv7l.tar.gz'; sha256='e9de15c56b9b62727c69d10da4b8e90fa6609d2e94e9cfb9f99128dfb59a8677'; ;; 'arm64') url='https://julialang-s3.julialang.org/bin/linux/aarch64/1.7/julia-1.7.3-linux-aarch64.tar.gz'; sha256='d9e8b342c80ad1371520ed6d11f55b78aa60746737fbf57ecafd6a23b52dd71d'; ;; 'i386') url='https://julialang-s3.julialang.org/bin/linux/x86/1.7/julia-1.7.3-linux-i686.tar.gz'; sha256='c1e1a4f9a53affee269c7e740cb8bd46740f9021414459c3ab3bb2c540d9d499'; ;; *) echo >&2 "error: current architecture ($arch) does not have a corresponding Julia binary release"; exit 1; ;; esac;  curl -fL -o julia.tar.gz.asc "$url.asc"; curl -fL -o julia.tar.gz "$url";  echo "$sha256 *julia.tar.gz" | sha256sum --strict --check -;  export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$JULIA_GPG"; gpg --batch --verify julia.tar.gz.asc julia.tar.gz; command -v gpgconf > /dev/null && gpgconf --kill all; rm -rf "$GNUPGHOME" julia.tar.gz.asc;  mkdir "$JULIA_PATH"; tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1; rm julia.tar.gz;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  julia --version 1
sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list && sed -i 's/security.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list && apt update && sleep 1 && apt update && apt -y install  && apt -y install  && apt -y install  && localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8 && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && mkdir -p /root/.ssh/ && echo "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null" > /root/.ssh/config && sed -i "s@# alias l@alias l@g" ~/.bashrc && echo "set mouse-=a" > ~/.vimrc && rm -rf /var/lib/apt/lists/* && mv /bin/sh /bin/sh.bak  && ln -s /bin/bash /bin/sh 1
mkdir -p /opt/oracle/ && cd /opt/oracle/ && wget https://download.jumpserver.org/files/oracle/instantclient-basiclite-linux.${TARGETARCH:-amd64}-19.10.0.0.0dbru.zip && unzip instantclient-basiclite-linux.${TARGETARCH-amd64}-19.10.0.0.0dbru.zip && mv instantclient_19_10 instantclient && echo "/opt/oracle/instantclient" > /etc/ld.so.conf.d/oracle-instantclient.conf && ldconfig && rm -f instantclient-basiclite-linux.${TARGETARCH:-amd64}-19.10.0.0.0dbru.zip 1
pip install --upgrade pip==20.2.4 setuptools==49.6.0 wheel==0.34.2 -i https://mirrors.aliyun.com/pypi/simple/ && pip install --no-cache-dir $(grep -E 'jms|jumpserver' requirements/requirements.txt) -i https://mirrors.aliyun.com/pypi/simple/ && pip install --no-cache-dir -r requirements/requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ && rm -rf ~/.cache/pip 1
cd utils && bash -ixeu build.sh && mv ../release/jumpserver /opt/jumpserver && rm -rf /tmp/build && echo > /opt/jumpserver/config.yml 1
git config --global user.name "$GIT_AUTHOR_NAME" 1
git config --global user.email "$GIT_AUTHOR_EMAIL" 1
apt-get update && apt-get install -y npm twine 1
apk add curl tar gzip 1
curl -sfL https://github.com/vmware-tanzu/sonobuoy/releases/download/v${SONOBUOY_VERSION}/sonobuoy_${SONOBUOY_VERSION}_linux_amd64.tar.gz | tar xvzf - -C /usr/bin 1
apk add -U ca-certificates tar zstd 1
mkdir -p /image/etc/ssl/certs /image/run /image/var/run /image/tmp /image/lib/modules /image/lib/firmware && tar -xa -C /image -f /data.tar.zst && cp /etc/ssl/certs/ca-certificates.crt /image/etc/ssl/certs/ca-certificates.crt 1
mkdir -p /etc && echo 'hosts: files dns' > /etc/nsswitch.conf && echo "PRETTY_NAME=\"K3s dev\"" > /etc/os-release && chmod 1777 /tmp 1
CGO_ENABLED=0 go install -a -trimpath -ldflags "-s -w -X go.k6.io/k6/lib/consts.VersionDetails=$(date -u +"%FT%T%z")/$(git describe --always --long --dirty)" 1
apk add --no-cache ca-certificates && adduser -D -u 12345 -g 12345 k6 1
apk --no-cache add make git gcc libc-dev curl && make build 1
apk add --update ca-certificates && apk add --update -t deps curl vim && curl -L https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl && apk del --purge deps && rm /var/cache/apk/* 1
apt update && apt install -y  git netcat iptables rsync unzip wget curl jq coreutils openssh-server net-tools vim python3-pip python3-dev libffi-dev libssl-dev cmake pkg-config libfuse-dev iperf traceroute iproute2 && apt-get -y clean 1
python3 -m pip install -U pip==21.1.1; 1
pip3 install --upgrade cffi virtualenv pyasn1 boto3 pycrypto pywinrm ipaddress enum34 debugpy && pip3 install --upgrade "ducktape>0.8" 1
ssh-keygen -m PEM -q -t rsa -N '' -f /root/.ssh/id_rsa && cp -f /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys 1
echo 'PermitUserEnvironment yes' >> /etc/ssh/sshd_config 1
mkdir -p "/opt/kafka-0.8.2.2" && chmod a+rw /opt/kafka-0.8.2.2 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-0.8.2.2.tgz" | tar xz --strip-components=1 -C "/opt/kafka-0.8.2.2" 1
mkdir -p "/opt/kafka-0.9.0.1" && chmod a+rw /opt/kafka-0.9.0.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-0.9.0.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-0.9.0.1" 1
mkdir -p "/opt/kafka-0.10.0.1" && chmod a+rw /opt/kafka-0.10.0.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-0.10.0.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-0.10.0.1" 1
mkdir -p "/opt/kafka-0.10.1.1" && chmod a+rw /opt/kafka-0.10.1.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-0.10.1.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-0.10.1.1" 1
mkdir -p "/opt/kafka-0.10.2.2" && chmod a+rw /opt/kafka-0.10.2.2 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-0.10.2.2.tgz" | tar xz --strip-components=1 -C "/opt/kafka-0.10.2.2" 1
mkdir -p "/opt/kafka-0.11.0.3" && chmod a+rw /opt/kafka-0.11.0.3 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-0.11.0.3.tgz" | tar xz --strip-components=1 -C "/opt/kafka-0.11.0.3" 1
mkdir -p "/opt/kafka-1.0.2" && chmod a+rw /opt/kafka-1.0.2 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-1.0.2.tgz" | tar xz --strip-components=1 -C "/opt/kafka-1.0.2" 1
mkdir -p "/opt/kafka-1.1.1" && chmod a+rw /opt/kafka-1.1.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.11-1.1.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-1.1.1" 1
mkdir -p "/opt/kafka-2.0.1" && chmod a+rw /opt/kafka-2.0.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.0.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.0.1" 1
mkdir -p "/opt/kafka-2.1.1" && chmod a+rw /opt/kafka-2.1.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.1.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.1.1" 1
mkdir -p "/opt/kafka-2.2.2" && chmod a+rw /opt/kafka-2.2.2 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.2.2.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.2.2" 1
mkdir -p "/opt/kafka-2.3.1" && chmod a+rw /opt/kafka-2.3.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.3.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.3.1" 1
mkdir -p "/opt/kafka-2.4.1" && chmod a+rw /opt/kafka-2.4.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.4.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.4.1" 1
mkdir -p "/opt/kafka-2.5.1" && chmod a+rw /opt/kafka-2.5.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.5.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.5.1" 1
mkdir -p "/opt/kafka-2.6.2" && chmod a+rw /opt/kafka-2.6.2 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.6.2.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.6.2" 1
mkdir -p "/opt/kafka-2.7.1" && chmod a+rw /opt/kafka-2.7.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.7.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.7.1" 1
mkdir -p "/opt/kafka-2.8.1" && chmod a+rw /opt/kafka-2.8.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-2.8.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-2.8.1" 1
mkdir -p "/opt/kafka-3.0.1" && chmod a+rw /opt/kafka-3.0.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-3.0.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-3.0.1" 1
mkdir -p "/opt/kafka-3.1.1" && chmod a+rw /opt/kafka-3.1.1 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-3.1.1.tgz" | tar xz --strip-components=1 -C "/opt/kafka-3.1.1" 1
mkdir -p "/opt/kafka-3.2.0" && chmod a+rw /opt/kafka-3.2.0 && curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka_2.12-3.2.0.tgz" | tar xz --strip-components=1 -C "/opt/kafka-3.2.0" 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-0.10.0.1-test.jar" -o /opt/kafka-0.10.0.1/libs/kafka-streams-0.10.0.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-0.10.1.1-test.jar" -o /opt/kafka-0.10.1.1/libs/kafka-streams-0.10.1.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-0.10.2.2-test.jar" -o /opt/kafka-0.10.2.2/libs/kafka-streams-0.10.2.2-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-0.11.0.3-test.jar" -o /opt/kafka-0.11.0.3/libs/kafka-streams-0.11.0.3-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-1.0.2-test.jar" -o /opt/kafka-1.0.2/libs/kafka-streams-1.0.2-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-1.1.1-test.jar" -o /opt/kafka-1.1.1/libs/kafka-streams-1.1.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.0.1-test.jar" -o /opt/kafka-2.0.1/libs/kafka-streams-2.0.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.1.1-test.jar" -o /opt/kafka-2.1.1/libs/kafka-streams-2.1.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.2.2-test.jar" -o /opt/kafka-2.2.2/libs/kafka-streams-2.2.2-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.3.1-test.jar" -o /opt/kafka-2.3.1/libs/kafka-streams-2.3.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.4.1-test.jar" -o /opt/kafka-2.4.1/libs/kafka-streams-2.4.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.5.1-test.jar" -o /opt/kafka-2.5.1/libs/kafka-streams-2.5.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.6.2-test.jar" -o /opt/kafka-2.6.2/libs/kafka-streams-2.6.2-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.7.1-test.jar" -o /opt/kafka-2.7.1/libs/kafka-streams-2.7.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-2.8.1-test.jar" -o /opt/kafka-2.8.1/libs/kafka-streams-2.8.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-3.0.1-test.jar" -o /opt/kafka-3.0.1/libs/kafka-streams-3.0.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-3.1.1-test.jar" -o /opt/kafka-3.1.1/libs/kafka-streams-3.1.1-test.jar 1
curl -s "https://s3-us-west-2.amazonaws.com/kafka-packages/kafka-streams-3.2.0-test.jar" -o /opt/kafka-3.2.0/libs/kafka-streams-3.2.0-test.jar 1
apt-get install fuse 1
cd /opt && git clone -q  https://github.com/confluentinc/kibosh.git && cd "/opt/kibosh" && git reset --hard 8841dd392e6fbf02986e2fb1f1ebf04df344b65a && mkdir "/opt/kibosh/build" && cd "/opt/kibosh/build" && ../configure && make -j 2 1
useradd -u 1000 -ms /bin/bash ducker && mkdir -p /home/ducker/ && rsync -aiq /root/.ssh/ /home/ducker/.ssh && chown -R ducker /home/ducker/ /mnt/ /var/log/ && echo "PATH=$(runuser -l ducker -c 'echo $PATH'):$JAVA_HOME/bin" >> /home/ducker/.ssh/environment && echo 'PATH=$PATH:'"$JAVA_HOME/bin" >> /home/ducker/.profile && echo 'ducker ALL=(ALL) NOPASSWD: ALL' >> /etc/ers 1
apt-get -qq update && apt-get install -y -q --no-install-recommends build-essential curl git pkg-config libssl-dev zlib1g-dev automake autoconf unzip wget sox gfortran python2.7 lsof libzmq3-dev && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends g++ make automake autoconf bzip2 unzip wget sox libtool git subversion python2.7 python3 zlib1g-dev ca-certificates gfortran patch ffmpeg vim && rm -rf /var/lib/apt/lists/* 1
git clone --depth 1 https://github.com/kaldi-asr/kaldi.git /opt/kaldi #EOL 1
cd /opt/kaldi/tools && ./extras/install_mkl.sh && make -j $(nproc) && cd /opt/kaldi/src && ./configure --shared && make depend -j $(nproc) && make -j $(nproc) && find /opt/kaldi -type f \( -name "*.o" -o -name "*.la" -o -name "*.a" \) -exec rm {} \; && find /opt/intel -type f -name "*.a" -exec rm {} \; && find /opt/intel -type f -regex '.*\(_mc.?\|_mic\|_thread\|_ilp64\)\.so' -exec rm {} \; && rm -rf /opt/kaldi/.git 1
apt-get update && apt-get install -y --no-install-recommends g++ make automake autoconf bzip2 unzip wget sox libtool git subversion python2.7 python3 zlib1g-dev gfortran ca-certificates patch ffmpeg vim && rm -rf /var/lib/apt/lists/* 1
git clone --depth 1 https://github.com/kaldi-asr/kaldi.git /opt/kaldi && cd /opt/kaldi/tools && ./extras/install_mkl.sh && make -j $(nproc) && cd /opt/kaldi/src && ./configure --shared --use-cuda && make depend -j $(nproc) && make -j $(nproc) && find /opt/kaldi  -type f \( -name "*.o" -o -name "*.la" -o -name "*.a" \) -exec rm {} \; && find /opt/intel -type f -name "*.a" -exec rm {} \; && find /opt/intel -type f -regex '.*\(_mc.?\|_mic\|_thread\|_ilp64\)\.so' -exec rm {} \; && rm -rf /opt/kaldi/.git 1
set -eu; cp /tmp/top1 /usr/local/bin/top1; chown root:root /usr/local/bin/top1; chmod u=rxs,go=rx /usr/local/bin/top1; ls -lh /usr/local/bin/top1 1
[ -u /usr/local/bin/top1 ] 1
mkdir -p /myapp/somedir && touch /myapp/somedir/somefile && chown 123:123 /myapp/somedir && chown 321:321 /myapp/somedir/somefile 1
printf "%s\n" "0 0 /myapp/" "123 123 /myapp/somedir" "321 321 /myapp/somedir/somefile" > /tmp/expected && stat -c "%u %g %n" /myapp/ /myapp/somedir /myapp/somedir/somefile > /tmp/got && diff -u /tmp/got /tmp/expected 1
./make.sh $NUM 1
ls -al /workdir | wc 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends --auto-remove git texlive-base texlive-fonts-recommended fontforge=1:20190801~dfsg-4 mftrace=1.2.20+git20190918.fd8fef5-2 build-essential python3-fontforge=1:20190801~dfsg-4 python3-dev python3-pip ttfautohint=1.8.3-2build1 libjson-perl && apt-get clean && rm -rf /var/lib/apt/lists/* && pip3 install fonttools==4.21.1 brotli zopfli 1
apt-get -y update && apt-get -y install openssl curl unzip && rm -rf /var/lib/apt/lists/* 1
rm -rf /etc/nginx/conf.d/*; mkdir -p /etc/nginx/external 1
sed -i 's/access_log.*/access_log \/dev\/stdout;/g' /etc/nginx/nginx.conf; sed -i 's/error_log.*/error_log \/dev\/stdout info;/g' /etc/nginx/nginx.conf; sed -i 's/^pid/daemon off;\npid/g' /etc/nginx/nginx.conf 1
chmod a+x /opt/entrypoint.sh 1
curl -Ss -L -O https://github.com/keeweb/keeweb-plugins/archive/master.zip; unzip master.zip; rm master.zip; mv keeweb-plugins-master/docs keeweb/plugins; rm -rf keeweb-plugins-master; 1
apt-get -y remove curl unzip 1
groupadd --gid 1000 keras-vscode && useradd --uid 1000 --gid 1000 -m keras-vscode && apt-get update && apt-get install -y  bash && echo keras-vscode ALL=\(root\) NOPASSWD:ALL > /etc/ers.d/keras-vscode && chmod 0440 /etc/ers.d/keras-vscode 1
apt install wget git gcc g++ -y 1
wget https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64 1
chmod a+x bazelisk-linux-amd64 1
mv bazelisk-linux-amd64 /usr/bin/bazel 1
microdnf install -y tar gzip 1
(cd /tmp/keycloak && tar -xvf /tmp/keycloak/keycloak-*.tar.gz && rm /tmp/keycloak/keycloak-*.tar.gz) || true 1
mv /tmp/keycloak/keycloak-* /opt/keycloak && mkdir -p /opt/keycloak/data 1
chmod -R g+rwX /opt/keycloak 1
microdnf update -y && microdnf install -y --nodocs java-11-openjdk-headless glibc-langpack-en && microdnf clean all && rm -rf /var/cache/yum/* && echo "keycloak:x:0:root" >> /etc/group && echo "keycloak:x:1000:0:keycloak user:/opt/keycloak:/sbin/nologin" >> /etc/passwd 1
apt-get update && apt-get install -y apache2 && apt-get install -y libapache2-mod-auth-mellon 1
mkdir /etc/apache2/mellon 1
mkdir /var/www/html/auth2 1
pip install "cfn-lint==${CFNLINT_VERSION}" pydot 1
apt-get install -y git cmake curl unzip ninja-build gcc g++ build-essential zlib1g-dev 1
cd /opt && curl -LO https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz && tar -xf Python-3.6.9.tgz && cd Python-3.6.9 && ./configure && make && make install 1
groupadd -g 1000 jb 1
useradd -r -u 1000 --create-home -g jb jb 1
apt-get install -y curl gcc git g++ gperf bison flex texinfo help2man make libncurses5-dev python3-dev autoconf automake libtool gawk wget bzip2 xz-utils unzip patch libstdc++6 rsync 1
git clone --branch crosstool-ng-1.24.0 --depth 1 https://github.com/crosstool-ng/crosstool-ng.git && cd crosstool-ng && git checkout b2151f1dba2b20c310adfe7198e461ec4469172b && git apply ../github_pull_1244.patch && ./bootstrap && ./configure && make && make install && cd .. && rm -rf crosstool-ng 1
groupadd -g 1000 ct 1
useradd -r -u 1000 --create-home -g ct ct 1
curl -LO https://zlib.net/zlib-1.2.11.tar.gz && tar -xf zlib-1.2.11.tar.gz && rm zlib-1.2.11.tar.gz 1
mkdir src 1
apt-get install -y build-essential git gcc pkg-config glib-2.0 libglib2.0-dev libsdl1.2-dev libaio-dev libcap-dev libattr1-dev libpixman-1-dev 1
git clone --branch v5.1.0 --depth 1 git://git.qemu.org/qemu.git && cd qemu && git checkout d0ed6a69d399ae193959225cdeaa9382746c91cc && git submodule update --init --recursive 1
npm run build -- --output-path=./dist --configuration=production 1
export DEBIAN_FRONTEND=noninteractive && apt-get -yq update && apt-get -yq install --no-install-recommends apt-transport-https bash bzip2 ca-certificates curl git gnupg gnupg2 locales lsb-release nano software-properties-common tzdata unzip vim wget zip && apt-get clean && rm -rf /var/lib/apt/lists/* 1
export GNUPGHOME=/tmp/ && curl -sL "https://github.com/just-containers/s6-overlay/releases/download/v2.2.0.3/s6-overlay-amd64-installer" -o /tmp/s6-overlay-v2.2.0.3-installer && curl -sL "https://github.com/just-containers/s6-overlay/releases/download/v2.2.0.3/s6-overlay-amd64-installer.sig" -o /tmp/s6-overlay-v2.2.0.3-installer.sig && gpg --keyserver keys.gnupg.net --keyserver pgp.surfnet.nl --recv-keys 6101B2783B2FD161 && gpg -q --verify /tmp/s6-overlay-v2.2.0.3-installer.sig /tmp/s6-overlay-v2.2.0.3-installer && chmod +x /tmp/s6-overlay-v2.2.0.3-installer && /tmp/s6-overlay-v2.2.0.3-installer / && rm /tmp/s6-overlay-v2.2.0.3-installer.sig /tmp/s6-overlay-v2.2.0.3-installer 1
curl -sL "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl && curl -sL "https://dl.k8s.io/v1.21.0/bin/linux/amd64/kubectl.sha256" -o /tmp/kubectl.sha256 && echo "$(cat /tmp/kubectl.sha256) /usr/local/bin/kubectl" | sha256sum --check && rm /tmp/kubectl.sha256 && chmod +x /usr/local/bin/kubectl 1
useradd -M -s /bin/bash -N -u ${NB_UID} ${NB_USER} && mkdir -p ${HOME} && chown -R ${NB_USER}:users ${HOME} && chown -R ${NB_USER}:users /usr/local/bin && chown -R ${NB_USER}:users /etc/s6 1
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen 1
mkdir -p /out/usr/local/bin 1
tar xvzf /tmp/kustomize_v4.2.0_${TARGETOS}_${TARGETARCH}.tar.gz -C /tmp 1
mv /tmp/kustomize /out/usr/local/bin/ 1
tar xvzf /tmp/ingress-nginx-4.0.13.tgz -C /tmp 1
mv /tmp/ingress-nginx /out/var/helm-charts/ 1
make ks-controller-manager 1
mv /workspace/bin/cmd/controller-manager /out/usr/local/bin/ 1
mv /workspace/config/gateway /out/var/helm-charts/ 1
mv /workspace/config/watches.yaml /out/var/helm-charts/ 1
make ks-apiserver 1
mv /workspace/bin/cmd/ks-apiserver /out/usr/local/bin/ 1
apt-get update && apt-get install -y stress 1
if [ false = true ]; then apt-get clean && apt-get update -yqq && apt-get install -y git make gcc libcurl4-openssl-dev postgresql-server-dev-13 postgresql-13-cron && git clone --recursive https://github.com/pramsey/pgsql-http.git && cd pgsql-http/ && make && make install && apt-get clean ;fi 1
set -x ; addgroup -g 82 -S www-data ; adduser -u 82 -D -S -G www-data www-data && exit 0 ; exit 1 1
apk add --no-cache --virtual .build-deps build-base coreutils curl gd-dev geoip-dev libxslt-dev linux-headers make perl-dev readline-dev zlib-dev  && apk add --no-cache gd geoip libgcc libxslt zlib bash logrotate openssl  && cd /tmp && if [ -n "" ]; then eval $(echo ); fi && cd /tmp && curl -fSL "https://www.openssl.org/source/openssl-1.1.1k.tar.gz" -o openssl-1.1.1k.tar.gz && tar xzf openssl-1.1.1k.tar.gz && cd openssl-1.1.1k && if [ $(echo 1.1.1k | cut -c 1-5) = "1.1.1" ] ; then echo 'patching OpenSSL 1.1.1 for OpenResty' && curl -s https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-1.1.1f-sess_set_get_cb_yield.patch | patch -p1 ; fi && if [ $(echo 1.1.1k | cut -c 1-5) = "1.1.0" ] ; then echo 'patching OpenSSL 1.1.0 for OpenResty' && curl -s https://raw.githubusercontent.com/openresty/openresty/ed328977028c3ec3033bc25873ee360056e247cd/patches/openssl-1.1.0j-parallel_build_fix.patch | patch -p1 && curl -s https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-1.1.1f-sess_set_get_cb_yield.patch | patch -p1 ; fi && ./config no-threads shared zlib -g enable-ssl3 enable-ssl3-method --prefix=/usr/local/openresty/openssl --libdir=lib -Wl,-rpath,/usr/local/openresty/openssl/lib && make -j1 && make -j1 install_sw && cd /tmp && curl -fSL https://downloads.sourceforge.net/project/pcre/pcre/8.44/pcre-8.44.tar.gz -o pcre-8.44.tar.gz && tar xzf pcre-8.44.tar.gz && cd /tmp/pcre-8.44 && ./configure --prefix=/usr/local/openresty/pcre --disable-cpp --enable-jit --enable-utf --enable-unicode-properties && make -j1 && make -j1 install && cd /tmp && curl -fSL https://openresty.org/download/openresty-1.19.3.2.tar.gz -o openresty-1.19.3.2.tar.gz && tar xzf openresty-1.19.3.2.tar.gz && curl -fSL https://github.com/grahamedgecombe/nginx-ct/archive/master.tar.gz -o nginx-ct.tar.gz && tar xzf nginx-ct.tar.gz && curl -fSL https://github.com/arut/nginx-dav-ext-module/archive/master.tar.gz -o nginx-dav-ext-module.tar.gz && tar xzf nginx-dav-ext-module.tar.gz && curl -fSL https://www.downsoft.cn/software/linux/nginx/ngx_brotli.tar.gz -o ngx_brotli.tar.gz && tar xzf ngx_brotli.tar.gz && curl -fSL https://github.com/yaoweibin/ngx_http_substitutions_filter_module/archive/master.tar.gz -o ngx_http_substitutions_filter_module.tar.gz && tar xzf ngx_http_substitutions_filter_module.tar.gz && curl -fSL https://github.com/FRiCKLE/ngx_cache_purge/archive/master.tar.gz -o ngx_cache_purge.tar.gz && tar xzf ngx_cache_purge.tar.gz && cd /tmp/openresty-1.19.3.2 && eval ./configure -j1 --with-pcre \ \ --with-luajit-xcflags && make -j1 && make -j1 install && cd /tmp && if [ -n "" ]; then eval $(echo ); fi && rm -rf openssl-1.1.1k.tar.gz openssl-1.1.1k pcre-8.44.tar.gz pcre-8.44 openresty-1.19.3.2.tar.gz openresty-1.19.3.2 && apk del .build-deps && mkdir -p /etc/nginx/conf.d/ /var/run/openresty/ 1
touch /var/log/messages 1
echo "upstream php-upstream { server php-fpm:9000; }" > /etc/nginx/conf.d/upstream.conf 1
sed -i 's/\r//g' /opt/startup.sh 1
apt-get update && apt-get install -y git curl && rm -rf /var/lib/apt/lists/* 1
groupadd -g 1000 jenkins && useradd -d "$JENKINS_HOME" -u 1000 -g 1000 -m -s /bin/bash jenkins 1
mkdir -p /usr/share/jenkins/ref/init.groovy.d 1
curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static-amd64 -o /bin/tini && chmod +x /bin/tini && echo "$TINI_SHA  /bin/tini" | sha1sum -c - 1
curl -fsSL https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war -o /usr/share/jenkins/jenkins.war && echo "c4b8532e25a33001a3d8883d3cd87a664953ace239b486839b683065817d29cf  /usr/share/jenkins/jenkins.war" | sha256sum -c - 1
chown -R jenkins "$JENKINS_HOME" /usr/share/jenkins/ref 1
groupadd -g 998 docker && curl -sSL https://get.docker.com/ | sh && apt-get -q autoremove && apt-get -q clean -y && rm -rf /var/lib/apt/lists/* /var/cache/apt/*.bin 1
apt-get install -y curl && curl -sSL https://get.docker.com/ | sh 1
curl -L "https://github.com/docker/compose/releases/download/1.16.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose 1
chmod +x /usr/local/bin/docker-compose 1
apk add --update python3 python3-dev py3-pip build-base 1
apk add --no-cache --virtual .build-deps curl gcc g++ make autoconf libc-dev libevent-dev linux-headers perl tar && mkdir -p /ssdb/tmp && curl -Lk "https://github.com/ideawu/ssdb/archive/${VERSION:-master}.tar.gz" | tar -xz -C /ssdb/tmp --strip-components=1 && cd /ssdb/tmp && make -j$(getconf _NPROCESSORS_ONLN) && make install PREFIX=/ssdb && rm -rf /ssdb/tmp && apk add --virtual .rundeps libstdc++ && apk add --no-cache bash python2 && apk del .build-deps 1
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GOARM=${GOARM} go build -a -mod=vendor -ldflags="-s -w -X main.commit=${VCS_REF} -X main.version=${VERSION} -X main.buildSource=Docker" 1
apk add -U -q --progress --no-cache git bash coreutils gcc musl-dev 1
git clone --branch v20.10.13 --single-branch --depth 1 https://github.com/docker/cli.git . > /dev/null 2>&1 1
./scripts/build/binary 1
rm build/docker && mv build/docker-linux-* build/docker 1
make tools 1
CGO_ENABLED=0 GOOS=linux go build 1
apk add --no-cache -U git xdg-utils 1
echo "alias gg=lazygit" >> ~/.profile 1
export DEBIAN_FRONTEND noninteractive && apt-get update && apt-get install -y --no-install-recommends build-essential cmake make gcc git wget libglib2.0-0 libgtk2.0-dev libsm6 libxext6 libfontconfig1 libxrender1 libeigen3-dev python3 python3-dev python3-pip python3-setuptools pkg-config libavformat-dev libswscale-dev libavcodec-dev libavformat-dev libjpeg-dev libpng-dev libtiff-dev libtesseract-dev tesseract-ocr-eng libzbar-dev qt5-default && apt-get clean 1
wget -q -O /tmp/opencv.tar.gz https://codeload.github.com/opencv/opencv/tar.gz/4.4.0 && cd /tmp/ && tar -xf /tmp/opencv.tar.gz && wget -q -O /tmp/opencv_contrib.tar.gz https://codeload.github.com/opencv/opencv_contrib/tar.gz/4.4.0 && cd /tmp/ && tar -xf /tmp/opencv_contrib.tar.gz && mkdir /tmp/build && cd /tmp/build && cmake -DBUILD_TESTS=OFF -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.4.0/modules ../opencv-4.4.0/ && make -j4 && make install && rm -rf /tmp/build && rm -rf /tmp/opencv* 1
useradd ci -m -s /bin/bash -G users 1
apt-get update -qq && apt-get install -y --no-install-recommends build-essential ca-certificates cmake curl git jq libopenmpi-dev unzip wget && curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh && chmod +x ~/miniconda.sh && ~/miniconda.sh -b && rm ~/miniconda.sh && apt-get autoremove -y && apt-get clean && rm -rf /root/.cache && rm -rf /var/lib/apt/lists/* 1
conda create -y --name $CONDA_ENV python=3.9 pytorch=${PYTORCH_VERSION} cudatoolkit=${CUDA_VERSION} -c pytorch && conda init bash && python -c "import re ; fname = 'environment.yml' ; req = re.sub(r'python>=[\d\.]+', 'python=3.9', open(fname).read()) ; open(fname, 'w').write(req)" && python -c "import re ; fname = 'environment.yml' ; req = re.sub(r'- pytorch[>=]+[\d\.]+', '# - pytorch=${PYTORCH_VERSION}', open(fname).read()) ; open(fname, 'w').write(req)" && python -c "fname = 'environment.yml' ; req = open(fname).readlines() ; open(fname, 'w').writelines([ln for ln in req if not any(n in ln for n in ['pytorch>', 'horovod'])])" && cat environment.yml && conda env update --file environment.yml && conda clean -ya && rm environment.yml 1
pip list | grep torch && python -c "import torch; print(torch.__version__)" && python adjust_versions.py requirements-extra.txt && pip install -q fire && pip install -r requirements-extra.txt --no-cache-dir && pip install -r requirements-test.txt --no-cache-dir && rm requirements* 1
pip --version && conda info && pip list && python -c "import sys; assert sys.version[:3] == '3.9', sys.version" && python -c "import torch; assert torch.__version__.startswith('$PYTORCH_VERSION'), torch.__version__" 1
lsb_release -a && cat /etc/*-release 1
apt-get update -qq && apt-get install -y --no-install-recommends build-essential cmake wget curl unzip ca-certificates libomp5 && curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh && chmod +x ~/miniconda.sh && ~/miniconda.sh -b && rm ~/miniconda.sh && apt-get autoremove -y && apt-get clean && rm -rf /root/.cache && rm -rf /var/lib/apt/lists/* 1
conda create -y --name $CONDA_ENV && conda init bash && python -c "import re ; fname = 'environment.yml' ; req = re.sub(r'python>=[\d\.]+', 'python=3.9', open(fname).read()) ; open(fname, 'w').write(req)" && python -c "fname = 'environment.yml' ; req = open(fname).readlines() ; open(fname, 'w').writelines([ln for ln in req if not any(n in ln for n in ['pytorch>', 'horovod'])])" && cat environment.yml && conda env update --file environment.yml && conda clean -ya && rm environment.yml 1
pip --version && pip config set global.cache-dir false && conda remove pytorch torchvision && py_version=${PYTHON_VERSION/./} && gsutil cp "gs://tpu-pytorch/wheels/torch-1.11-cp${py_version}-cp${py_version}m-linux_x86_64.whl" . && gsutil cp "gs://tpu-pytorch/wheels/torch_xla-1.11-cp${py_version}-cp${py_version}m-linux_x86_64.whl" . && gsutil cp "gs://tpu-pytorch/wheels/torchvision-1.11-cp${py_version}-cp${py_version}m-linux_x86_64.whl" . && pip install *.whl && rm *.whl 1
python --version && cd pytorch-lightning && pip install -q fire && python .actions/assistant.py requirements_prune_pkgs torch,torchvision && python ./requirements/adjust-versions.py ./requirements/extra.txt && pip install --requirement ./requirements/devel.txt --no-cache-dir && cd .. && rm -rf pytorch-lightning && rm -rf /root/.cache 1
pip --version && conda info && pip list && python -c "import sys; assert sys.version[:3] == '3.9', sys.version" && python -c "import torch; assert torch.__version__.startswith('1.11'), torch.__version__" 1
echo "ALL ALL=(ALL) NOPASSWD: ALL" >> /etc/ers 1
curl -o /usr/local/bin/installdependencies.sh "https://raw.githubusercontent.com/microsoft/azure-pipelines-agent/d2acd5f77c6b3914cdb6ed0e5fbea672929c7da9/src/Misc/layoutbin/installdependencies.sh" && chmod +x /usr/local/bin/installdependencies.sh && chmod +x /usr/local/bin/start.sh && /usr/local/bin/installdependencies.sh 1
echo 6 1
apt-get update && apt-get install -y bash curl 1
apt-get update && apt-get install -y ninja-build python3 python3-sphinx python3-distutils python3-psutil git gdb 1
apt-get update && apt-get install -y language-pack-en language-pack-fr language-pack-ja language-pack-ru language-pack-zh-hans 1
printf "fr_CA ISO-8859-1\ncs_CZ ISO-8859-2" >> /etc/locale.gen 1
mkdir /usr/local/share/i1en/ 1
printf "fr_CA ISO-8859-1\ncs_CZ ISO-8859-2" >> /usr/local/share/i1en/SUPPORTED 1
locale-gen 1
apt-get update && apt-get install -y lsb-release wget software-properties-common 1
wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh 1
apt-get update && apt-get install -y clang-$((14 - 2)) 1
bash /tmp/llvm.sh $((14 - 1)) # previous release 1
bash /tmp/llvm.sh 14          # latest release 1
bash /tmp/llvm.sh $((14 + 1)) # current ToT 1
ln -fs /usr/bin/clang++-14 /usr/bin/c++ && [ -e $(readlink /usr/bin/c++) ] 1
ln -fs /usr/bin/clang-14 /usr/bin/cc && [ -e $(readlink /usr/bin/cc) ] 1
apt-get install -y clang-format-14 1
ln -s /usr/bin/clang-format-14 /usr/bin/clang-format && [ -e $(readlink /usr/bin/clang-format) ] 1
ln -s /usr/bin/git-clang-format-14 /usr/bin/git-clang-format && [ -e $(readlink /usr/bin/git-clang-format) ] 1
apt-get install -y clang-tidy-14 1
ln -s /usr/bin/clang-tidy-14 /usr/bin/clang-tidy && [ -e $(readlink /usr/bin/clang-tidy) ] 1
apt-get update && apt install -y gcc-$((GCC_LATEST_VERSION - 1)) g++-$((GCC_LATEST_VERSION - 1)) 1
apt-get update && apt install -y gcc-12 g++-12 1
wget https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1-linux-x86_64.sh -O /tmp/install-cmake.sh 1
bash /tmp/install-cmake.sh --prefix=/usr --exclude-subdir --skip-license 1
rm /tmp/install-cmake.sh 1
apt-get update && apt-get install -y 1
echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/ers 1
useradd --create-home libcxx-builder 1
bash -c "$(curl -sL https://raw.githubusercontent.com/buildkite/agent/main/install.sh)" 1
echo "tags=\"queue=libcxx-builders,arch=$(uname -m),os=linux\"" >> "/home/libcxx-builder/.buildkite-agent/buildkite-agent.cfg" 1
apk add --no-cache bash build-base gcc gmp-dev make python2 1
/tmp/scripts/checkout.sh ${checkout_args} 1
/tmp/scripts/build_install_llvm.sh --to /tmp/clang-install ${buildscript_args} 1
apt-get update && apt-get install -y build-essential clang subversion git vim zip libstdc++6:i386 file binutils-dev binutils-gold cmake python-pip ninja-build python3 1
python -m pip install buildbot-worker==2.8.4 1
apt-get install -y libmpfr-dev libmpc-dev 1
update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/ld.gold" 20 1
useradd buildbot --create-home 1
mkdir -p "libc-x86_64-debian/info/" 1
bash -c "(uname -a ; gcc --version | head -n1 ; ld --version | head -n1 ; cmake --version | head -n1 ) > libc-x86_64-debian/info/host" 1
echo "Paula Toth <paulatoth@google.com>" > "libc-x86_64-debian/info/admin" 1
apt-get update && apt-get install -y --no-install-recommends ca-certificates git build-essential cmake ninja-build python3 libjemalloc-dev python3-psutil && rm -rf /var/lib/apt/lists 1
git clone --depth 1 https://github.com/llvm/llvm-project 1
mkdir build && cd build && cmake -G Ninja ../llvm-project/llvm -DLLVM_ENABLE_PROJECTS="bolt;clang;lld" -DLLVM_TARGETS_TO_BUILD="X86;AArch64" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_EXE_LINKER_FLAGS="-Wl,--push-state -Wl,-whole-archive -ljemalloc_pic -Wl,--pop-state -lpthread -lstdc++ -lm -ldl" -DCMAKE_INSTALL_PREFIX=/home/bolt/install && ninja check-bolt && ninja install-llvm-bolt install-perf2bolt install-merge-fdata install-llvm-boltdiff install-bolt_rt 1
if [ -n "$(arch | grep 'arm64\|aarch64')" ]; then apt install -y --no-install-recommends gcc python3-dev; fi 1
python -m venv /opt/venv 1
pip install /build/ 1
useradd --create-home locust 1
chown -R locust /opt/venv 1
apk add --no-cache curl && curl -L -o /tmp/helm-v3.2.3.tgz https://get.helm.sh/helm-v3.2.3-linux-amd64.tar.gz && tar -xz -C /tmp -f /tmp/helm-v3.2.3.tgz && mv /tmp/linux-amd64/helm /usr/bin/helm && rm -rf /tmp/linux-amd64 /tmp/helm-v3.2.3.tgz 1
apk add --no-cache curl && curl -L -o /tmp/lychee-0.7.0.tgz https://github.com/lycheeverse/lychee/releases/download/0.7.0/lychee-0.7.0-x86_64-unknown-linux-gnu.tar.gz && tar -xz -C /tmp -f /tmp/lychee-0.7.0.tgz && mv /tmp/lychee /usr/bin/lychee && rm -rf /tmp/linux-amd64 /tmp/lychee-0.7.0.tgz 1
apk add --no-cache curl && cd / && curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.45.2 1
apk add --no-cache curl && curl -sSL "https://github.com/bufbuild/buf/releases/download/v1.4.0/buf-$(uname -s)-$(uname -m)" -o "/usr/bin/buf" && chmod +x "/usr/bin/buf" 1
apk add --no-cache docker-cli 1
curl -L https://github.com/drone/drone-cli/releases/download/v1.4.0/drone_linux_amd64.tar.gz | tar zx && install -t /usr/local/bin drone 1
GO111MODULE=on go get github.com/fatih/faillint@v1.5.0 1
GO111MODULE=on go get github.com/go-delve/delve/cmd/dlv@v1.7.3 1
GO111MODULE=on go get github.com/tcnksm/ghr 1
GO111MODULE=on go get github.com/goreleaser/nfpm/v2/cmd/nfpm@v2.11.3 1
GO111MODULE=on go get github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0 github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066 1
apt-get update && apt-get install -qy musl gnupg ragel file zip unzip jq gettex protobuf-compiler libprotobuf-dev libsystemd-dev jq && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
GO111MODULE=on go get github.com/golang/protobuf/protoc-gen-go@v1.3.1 github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0 github.com/gogo/protobuf/gogoproto@v1.3.0 golang.org/x/tools/cmd/goyacc@58d531046acdc757f177387bc1725bfa79895d69 github.com/mitchellh/gox && rm -rf /go/pkg /go/src 1
go version 1
apk update && apk upgrade && apk add --no-cache bash git 1
go build -o ./main -tags lambda.norpc -ldflags="-s -w" lambda-promtail/*.go 1
make clean && make BUILD_IN_CONTAINER=false migrate 1
make clean && make BUILD_IN_CONTAINER=false loki-canary 1
apt-get update && apt-get install -t bullseye-backports -qy libsystemd-dev 1
make clean && make BUILD_IN_CONTAINER=false promtail 1
apt-get update && apt-get install -qy tzdata ca-certificates 1
apt-get install -t bullseye-backports -qy libsystemd-dev && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
make clean && make BUILD_IN_CONTAINER=false loki-querytee 1
CGO_ENABLED=0 GOOS=linux GO111MODULE=on go build -a -o manager main.go 1
make clean && make BUILD_IN_CONTAINER=false loki 1
apk add --no-cache ca-certificates libcap 1
addgroup -g 10001 -S loki && adduser -u 10001 -S loki -G loki 1
mkdir -p /loki/rules && mkdir -p /loki/rules-temp && chown -R loki:loki /etc/loki /loki 1
go get github.com/go-delve/delve/cmd/dlv 1
mkdir /loki 1
make clean && make BUILD_IN_CONTAINER=false logcli 1
provision/ant/ant-1.10.9.sh 1
provision/gradle/gradle-6.8.3.sh 1
provision/maven/maven-3.6.3.sh 1
provision/bazel/bazel-2.0.0.sh 1
apt-get update && apt-get install -y g++ 1
apk --no-cache add --virtual build-dependencies git && mkdir -p /root/gocode && export GOPATH=/root/gocode && go get github.com/mailhog/MailHog 1
adduser -D -u 1000 mailhog 1
apt-get update -qq && apt-get install --no-install-recommends -y ffmpeg build-essential gcc cmake libcairo2-dev libffi-dev libpango1.0-dev freeglut3-dev pkg-config make wget ghostscript 1
wget -O /tmp/install-tl-unx.tar.gz http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz && mkdir /tmp/install-tl && tar -xzf /tmp/install-tl-unx.tar.gz -C /tmp/install-tl --strip-components=1 && /tmp/install-tl/install-tl --profile=/tmp/texlive-profile.txt && tlmgr install amsmath babel-english cbfonts-fd cm-super ctex doublestroke dvisvgm everysel fontspec frcursive fundus-calligra gnu-freefont jknapltx latex-bin mathastext microtype ms physics preview ragged2e relsize rsfs setspace standalone tipa wasy wasysym xcolor xetex xkeyval 1
pip install --no-cache .[jupyterlab] 1
pip install -r docs/requirements.txt 1
adduser --disabled-password --gecos "Default user" --uid 1000 manimuser 1
chown -R manimuser:manimuser ${HOME} 1
chmod 777 ${HOME} 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.6.8/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server-10.6" mysql-server/root_password password 'unused'; echo "mariadb-server-10.6" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.6.8+maria~focal" mariadb-backup socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.8.3/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server-10.8" mysql-server/root_password password 'unused'; echo "mariadb-server-10.8" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.8.3+maria~jammy" mariadb-backup socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.5.16/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server-10.5" mysql-server/root_password password 'unused'; echo "mariadb-server-10.5" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.5.16+maria~focal" mariadb-backup socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.4.25/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server-10.4" mysql-server/root_password password 'unused'; echo "mariadb-server-10.4" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.4.25+maria~focal" mariadb-backup socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.9.1/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server" mysql-server/root_password password 'unused'; echo "mariadb-server" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.9.1+maria~jammy" mariadb-backup socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.7.4/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server-10.7" mysql-server/root_password password 'unused'; echo "mariadb-server-10.7" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.7.4+maria~focal" mariadb-backup socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
set -ex; apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libjemalloc1 pwgen tzdata xz-utils zstd ; rm -rf /var/lib/apt/lists/* 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.2.44/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server-10.2" mysql-server/root_password password 'unused'; echo "mariadb-server-10.2" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.2.44+maria~bionic" mariadb-backup-10.2 socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
set -e echo "deb http://archive.mariadb.org/mariadb-10.3.35/repo/ubuntu/" > /etc/apt/sources.list.d/mariadb.list; { echo 'Package: *'; echo 'Pin: release o=MariaDB'; echo 'Pin-Priority: 999'; } > /etc/apt/preferences.d/mariadb 1
set -ex; { echo "mariadb-server-10.3" mysql-server/root_password password 'unused'; echo "mariadb-server-10.3" mysql-server/root_password_again password 'unused'; } | debconf-set-selections; apt-get update; apt-get install -y "mariadb-server=1:10.3.35+maria~focal" mariadb-backup socat ; rm -rf /var/lib/apt/lists/*; rm -rf /var/lib/mysql; mkdir -p /var/lib/mysql /var/run/mysqld; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld; chmod 777 /var/run/mysqld; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user\s)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user\s)/#&/'; if [ ! -L /etc/mysql/my.cnf ]; then sed -i -e '/includedir/i[mariadb]\nskip-host-cache\nskip-name-resolve\n' /etc/mysql/my.cnf; else sed -i -e '/includedir/ {N;s/\(.*\)\n\(.*\)/[mariadbd]\nskip-host-cache\nskip-name-resolve\n\n\2\n\1/}' /etc/mysql/mariadb.cnf; fi 1
ARCH= && dpkgArch="$(dpkg --print-architecture)" && case "${dpkgArch##*-}" in amd64) ARCH='x64';; ppc64el) ARCH='ppc64le';; s390x) ARCH='s390x';; arm64) ARCH='arm64';; armhf) ARCH='armv7l';; i386) ARCH='x86';; *) echo "unsupported architecture"; exit 1 ;; esac && echo "Etc/UTC" > /etc/localtime && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget python apt-utils && cd ~ && wget -q https://nodejs.org/download/release/v16.14.2/node-v16.14.2-linux-$ARCH.tar.gz && tar xf node-v16.14.2-linux-$ARCH.tar.gz && rm node-v16.14.2-linux-$ARCH.tar.gz && mv node-v16.14.2-linux-$ARCH /opt/node 1
apt-get update && apt-get install -y --no-install-recommends build-essential bison libyaml-dev libgdbm-dev libreadline-dev libjemalloc-dev libncurses5-dev libffi-dev zlib1g-dev libssl-dev && cd ~ && wget https://cache.ruby-lang.org/pub/ruby/${RUBY_VER%.*}/ruby-3.0.3.tar.gz && tar xf ruby-3.0.3.tar.gz && cd ruby-3.0.3 && ./configure --prefix=/opt/ruby --with-jemalloc --with-shared --disable-install-doc && make -j"$(nproc)" > /dev/null && make install && rm -rf ../ruby-3.0.3.tar.gz ../ruby-3.0.3 1
npm install -g npm@latest && npm install -g yarn && gem install bundler && apt-get update && apt-get install -y --no-install-recommends git libicu-dev libidn11-dev libpq-dev shared-mime-info 1
cd /opt/mastodon && bundle config set --local deployment 'true' && bundle config set --local without 'development test' && bundle config set silence_root_warning true && bundle install -j"$(nproc)" && yarn install --pure-lockfile 1
apt-get update && echo "Etc/UTC" > /etc/localtime && apt-get install -y --no-install-recommends whois wget && addgroup --gid 991 mastodon && useradd -m -u 991 -g 991 -d /opt/mastodon mastodon && echo "mastodon:$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | mkpasswd -s -m sha-256)" | chpasswd && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get -y --no-install-recommends install libssl1.1 libpq5 imagemagick ffmpeg libjemalloc2 libicu66 libidn11 libyaml-0-2 file ca-certificates tzdata libreadline8 gcc tini apt-utils && ln -s /opt/mastodon /mastodon && gem install bundler && rm -rf /var/cache && rm -rf /var/lib/apt/lists/* 1
cd ~ && OTP_SECRET=precompile_placeholder SECRET_KEY_BASE=precompile_placeholder rails assets:precompile && yarn cache clean 1
su vscode -c "source /usr/local/share/nvm/nvm.sh && nvm install lts/* 2>&1" 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends libicu-dev libidn11-dev ffmpeg imagemagick libpam-dev 1
gem install foreman 1
su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g yarn" 2>&1 1
apk add --no-cache ca-certificates curl libc6-compat libffi-dev linux-headers mailcap netcat-openbsd xmlsec-dev tzdata wv poppler-utils tidyhtml && rm -rf /tmp/* 1
mkdir -p /mattermost/data /mattermost/plugins /mattermost/client/plugins && if [ ! -z "https://releases.mattermost.com/7.0.0/mattermost-7.0.0-linux-amd64.tar.gz?src" ]; then curl https://releases.mattermost.com/7.0.0/mattermost-7.0.0-linux-amd64.tar.gz?src | tar -xvz ; else echo "please set the MM_PACKAGE" ; fi && addgroup -g 2000 mattermost && adduser -D -u 2000 -G mattermost -h /mattermost -D mattermost && chown -R mattermost:mattermost /mattermost /mattermost/plugins /mattermost/client/plugins 1
apt-get update && apt-get install -y --no-install-recommends build-essential gcc-8 g++-8 ca-certificates curl ffmpeg git wget unzip python3-dev python3-opencv python3-pip libopencv-core-dev libopencv-highgui-dev libopencv-imgproc-dev libopencv-video-dev libopencv-calib3d-dev libopencv-features2d-dev software-properties-common && add-apt-repository -y ppa:openjdk-r/ppa && apt-get update && apt-get install -y openjdk-8-jdk && apt-get clean && rm -rf /var/lib/apt/lists/* 1
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8 1
pip3 install future 1
pip3 install six==1.14.0 1
pip3 install tensorflow==1.14.0 1
pip3 install tf_slim 1
mkdir /bazel && wget --no-check-certificate -O /bazel/installer.sh "https://github.com/bazelbuild/bazel/releases/download/5.0.0/ azel-5.0.0-installer-linux-x86_64.sh" && wget --no-check-certificate -O  /bazel/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE" && chmod +x /bazel/installer.sh && /bazel/installer.sh  && rm -f /bazel/installer.sh 1
addgroup -g 11211 memcache && adduser -D -u 11211 -G memcache memcache 1
apk add --no-cache libsasl 1
set -x  && apk add --no-cache --virtual .build-deps ca-certificates coreutils cyrus-sasl-dev gcc libc-dev libevent-dev linux-headers make openssl openssl-dev perl perl-io-socket-ssl perl-utils  && wget -O memcached.tar.gz "https://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz" && echo "$MEMCACHED_SHA1  memcached.tar.gz" | sha1sum -c - && mkdir -p /usr/src/memcached && tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1 && rm memcached.tar.gz  && cd /usr/src/memcached  && ./configure --build="$gnuArch" --enable-extstore --enable-sasl --enable-sasl-pwdb --enable-tls && nproc="$(nproc)" && make -j "$nproc"  && make test PARALLEL="$nproc"  && make install  && cd / && rm -rf /usr/src/memcached  && runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )" && apk add --no-network --virtual .memcached-rundeps $runDeps && apk del --no-network .build-deps  && memcached -V 1
groupadd --system --gid 11211 memcache && useradd --system --gid memcache --uid 11211 memcache 1
set -eux; apt-get update; apt-get install -y --no-install-recommends libsasl2-modules ; rm -rf /var/lib/apt/lists/* 1
set -x  && savedAptMark="$(apt-mark showmanual)" && apt-get update && apt-get install -y --no-install-recommends ca-certificates dpkg-dev gcc libc6-dev libevent-dev libio-socket-ssl-perl libsasl2-dev libssl-dev make perl wget && rm -rf /var/lib/apt/lists/*  && wget -O memcached.tar.gz "https://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz" && echo "$MEMCACHED_SHA1  memcached.tar.gz" | sha1sum -c - && mkdir -p /usr/src/memcached && tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1 && rm memcached.tar.gz  && cd /usr/src/memcached  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && enableExtstore="$( case "$gnuArch" in s390x-*) ;; *) echo '--enable-extstore' ;; esac )" && ./configure --build="$gnuArch" --enable-sasl --enable-sasl-pwdb --enable-tls $enableExtstore && nproc="$(nproc)" && make -j "$nproc"  && sed -i.bak 's/SECLEVEL=2/SECLEVEL=1/g' /etc/ssl/openssl.cnf && make test PARALLEL="$nproc" && mv /etc/ssl/openssl.cnf.bak /etc/ssl/openssl.cnf  && make install  && cd / && rm -rf /usr/src/memcached  && apt-mark auto '.*' > /dev/null && apt-mark manual $savedAptMark > /dev/null && find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && memcached -V 1
apt-key adv --refresh-keys --keyserver keyserver.ubuntu.co && apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends yarn 1
curl -fsSL https://deb.nodesource.com/setup_14.x | bash 1
apt-get update && apt-get -y install --no-install-recommends nodejs 1
curl -O https://download.clojure.org/install/linux-install-1.11.0.1100.sh && bash ./linux-install-1.11.0.1100.sh 1
apk add -U bash ttf-dejavu fontconfig curl java-cacerts && apk upgrade && rm -rf /var/cache/apk/* && mkdir -p /app/certs && curl https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem -o /app/certs/rds-combined-ca-bundle.pem  && /opt/java/openjdk/bin/keytool -noprompt -import -trustcacerts -alias aws-rds -file /app/certs/rds-combined-ca-bundle.pem -keystore /etc/ssl/certs/java/cacerts -keypass changeit -storepass changeit && curl https://cacerts.digicert.com/DigiCertGlobalRootG2.crt.pem -o /app/certs/DigiCertGlobalRootG2.crt.pem  && /opt/java/openjdk/bin/keytool -noprompt -import -trustcacerts -alias azure-cert -file /app/certs/DigiCertGlobalRootG2.crt.pem -keystore /etc/ssl/certs/java/cacerts -keypass changeit -storepass changeit && mkdir -p /plugins && chmod a+rwx /plugins 1
apk --no-cache add make git go gcc libtool musl-dev 1
go build  . 1
go build -gcflags="${SKAFFOLD_GO_GCFLAGS}" -o /checkoutservice . 1
go build -gcflags="${SKAFFOLD_GO_GCFLAGS}" -o /productcatalogservice . 1
go build -gcflags="${SKAFFOLD_GO_GCFLAGS}" -o /go/bin/frontend . 1
apk add --no-cache ca-certificates busybox-extras net-tools bind-tools 1
go build -gcflags="${SKAFFOLD_GO_GCFLAGS}" -o /go/bin/shippingservice . 1
apt-get -qq update && apt-get install -y --no-install-recommends g++ && rm -rf /var/lib/apt/lists/* 1
apt-get -qq update && apt-get install -y --no-install-recommends wget 1
apt-get update -qqy && apt-get -qqy install wget g++ && rm -rf /var/lib/apt/lists/* 1
./gradlew downloadRepos 1
./gradlew installDist 1
apt-get -y update && apt-get install -qqy wget && rm -rf /var/lib/apt/lists/* 1
mkdir -p /opt/cprof && wget -q -O- https://storage.googleapis.com/cloud-profiler/java/latest/profiler_java_agent.tar.gz | tar xzv -C /opt/cprof && rm -rf profiler_java_agent.tar.gz 1
yum install -y wget && wget -P /etc/yum.repos.d/ http://mirrors.aliyun.com/repo/epel-7.repo && yum clean all && yum makecache && yum install -y libgomp libgfortran4 tbb-devel && rm -rf /var/cache/yum/* 1
ln -s /usr/lib/libopenblas-r0.3.9.so /usr/lib/libopenblas.so.0 && ln -s /usr/lib/libopenblas.so.0 /usr/lib/libopenblas.so 1
yum install -y epel-release centos-release-scl-rh && yum install -y wget curl which && wget -qO- "https://cmake.org/files/v3.18/cmake-3.18.6-Linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C /usr/local && yum install -y git make automake openssl-devel zlib-devel libcurl-devel python3-devel devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-gcc-gfortran llvm-toolset-7.0-clang llvm-toolset-7.0-clang-tools-extra ccache lcov libtool m4 autoconf automake && rm -rf /var/cache/yum/* && echo "source scl_source enable devtoolset-7" >> /etc/profile.d/devtoolset-7.sh && echo "source scl_source enable llvm-toolset-7.0" >> /etc/profile.d/llvm-toolset-7.sh 1
source /etc/profile.d/devtoolset-7.sh && git clone https://github.com/wjakob/tbb.git && cd tbb/build && cmake .. && make -j && make install && cd ../../ && rm -rf tbb/ 1
source /etc/profile.d/devtoolset-7.sh && wget -q https://boostorg.jfrog.io/artifactory/main/release/1.65.1/source/boost_1_65_1.tar.gz && tar zxf boost_1_65_1.tar.gz && cd boost_1_65_1 && ./bootstrap.sh --prefix=/usr/local --with-toolset=gcc --without-libraries=python && ./b2 -j2 --prefix=/usr/local --without-python toolset=gcc install && cd ../ && rm -rf ./boost_1_65_1* 1
mkdir -p /usr/local/go && wget -qO- "https://golang.org/dl/go1.16.9.linux-amd64.tar.gz" | tar --strip-components=1 -xz -C /usr/local/go && mkdir -p "$GOPATH/src" "$GOPATH/bin" && curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ${GOPATH}/bin v1.43.0 && export GO111MODULE=on && go get github.com/quasilyte/go-ruleguard/cmd/ruleguard@v0.2.1 && go get -v github.com/ramya-rao-a/go-outline && go get -v golang.org/x/tools/gopls && go get -v github.com/uudashr/gopkgs/v2/cmd/gopkgs && go get -v github.com/go-delve/delve/cmd/dlv && go get -v honnef.co/go/tools/cmd/staticcheck && go clean --modcache && chmod -R 777 "$GOPATH" && chmod -R a+w $(go env GOTOOLDIR) 1
ln -s /go/bin/dlv /go/bin/dlv-dap 1
echo 'root:root' | chpasswd 1
mkdir -p /home/milvus/.vscode-server/extensions /home/milvus/.vscode-server-insiders/extensions && chmod -R 777 /home/milvus 1
wget -qO- "https://github.com/jeffoverflow/autouseradd/releases/download/1.2.0/autouseradd-1.2.0-amd64.tar.gz" | tar xz -C / --strip-components 1 1
wget -O /tini https://github.com/krallin/tini/releases/download/v0.19.0/tini && chmod +x /tini 1
echo "Installing Packages ..." && apt-get update && apt-get install -y --no-install-recommends apt-transport-https build-essential ca-certificates curl file git gnupg2 kmod lsb-release mercurial pkg-config procps python3 python3-dev python3-pip python3-setuptools rsync software-properties-common unzip jq && python3 -m pip install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/* && echo "Installing Go ..." && export GO_TARBALL="go${GO_VERSION}.linux-amd64.tar.gz && curl -fsSL "https://golang.org/dl/${GO_TARBALL}" --output "${GO_TARBALL}" && tar xzf "${GO_TARBALL}" -C /usr/local && rm "${GO_TARBALL} && mkdir -p "${GOPATH}/bin" && echo "Installing kubectl, helm ..." && curl -fsSL "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --output /usr/local/bin/kubectl && chmod 755 /usr/local/bin/kubectl && ln -s /usr/local/bin/kubectl /usr/bin/kubectl && curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh && rm ./get_helm.sh && echo "Installing Docker ..." && curl -fsSL "https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg" | apt-key add - && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable" && apt-get update && apt-get install -y --no-install-recommends docker-ce && rm -rf /var/lib/apt/lists/* && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\n/' /etc/init.d/docker && echo "Installing Docker Compose ..." && curl -fsSL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose && ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose && echo "Installing KinD ..." && curl -fsSL -o /usr/local/bin/kind "https://kind.sigs.k8s.io/dl/v${KIND_VERSION}/kind-linux-amd64" && chmod +x /usr/local/bin/kind && echo "Ensuring Legacy Iptables ..." && update-alternatives --set iptables /usr/sbin/iptables-legacy && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy 1
yum install -y epel-release centos-release-scl-rh && yum install -y wget make automake devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-gcc-gfortran && rm -rf /var/cache/yum/* && echo "source scl_source enable devtoolset-7" >> /etc/profile.d/devtoolset-7.sh 1
source /etc/profile.d/devtoolset-7.sh && wget https://github.com/xianyi/OpenBLAS/archive/v0.3.9.tar.gz && tar zxvf v0.3.9.tar.gz && cd OpenBLAS-0.3.9 && make TARGET=CORE2 DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 USE_THREAD=0 USE_OPENMP=0 FC=gfortran CC=gcc COMMON_OPT="-O3 -g -fPIC" FCOMMON_OPT="-O3 -g -fPIC -frecursive" NMAX="NUM_THREADS=128" LIBPREFIX="libopenblas" LAPACKE="NO_LAPACKE=1" INTERFACE64=0 NO_STATIC=1 && make PREFIX=/usr NO_STATIC=1 install && cd .. && rm -rf OpenBLAS-0.3.9 && rm v0.3.9.tar.gz 1
apt-get update && apt-get install -y apt dpkg apt-utils ca-certificates software-properties-common && add-apt-repository -y ppa:longsleep/golang-backports && apt-get upgrade -y && apt-get install -y build-essential git wget cpio python unzip bc gcc-multilib automake libtool gnupg2 p7zip-full locales rsync dumb-init golang-go libpcre3-dev mkisofs && rm -rf /var/lib/apt/lists/* 1
localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 1
echo "Installing Packages ..." && apt-get update && apt-get install -y --no-install-recommends apt-transport-https build-essential ca-certificates curl file git gnupg2 kmod lsb-release mercurial pkg-config procps python python-dev python-pip rsync software-properties-common unzip && rm -rf /var/lib/apt/lists/* && echo "Installing Go ..." && export GO_TARBALL="go${GO_VERSION}.linux-amd64.tar.gz && curl -fsSL "https://storage.googleapis.com/golang/${GO_TARBALL}" --output "${GO_TARBALL}" && tar xzf "${GO_TARBALL}" -C /usr/local && rm "${GO_TARBALL} && mkdir -p "/home/prow/go/bin" && echo "Installing Docker ..." && curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | apt-key add - && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable" && apt-get update && apt-get install -y --no-install-recommends docker-ce && rm -rf /var/lib/apt/lists/* && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\n/' /etc/init.d/docker && echo "Ensuring Legacy Iptables ..." && update-alternatives --set iptables /usr/sbin/iptables-legacy && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy && echo "Installing Kubectl ..." && curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x ./kubectl && cp kubectl /usr/local/bin 1
apk -U add ca-certificates 1
pip install wheel && pip wheel --wheel-dir /wheels /wheels/${MITMPROXY_WHEEL} 1
useradd -mU mitmproxy 1
apt-get update && apt-get install -y --no-install-recommends gosu && rm -rf /var/lib/apt/lists/* 1
pip install --no-index --find-links=/wheels mitmproxy 1
rm -rf /wheels 1
apt-get update && apt-get install --no-install-recommends -y asciinema autoconf automake autotools-dev bison curl git libevent-dev libtool locales m4 make ncurses-dev pkg-config python3-pip python3 python3-setuptools wget xterm && locale-gen --purge "en_US.UTF-8" && update-locale "LANG=en_US.UTF-8" && pip3 install --no-cache-dir libtmux curl requests mitmproxy && rm -rf /var/lib/apt/lists/* 1
git clone --depth 1 https://github.com/tmux/tmux.git && cd tmux && sh autogen.sh && ./configure && make && make install && cd ../ && rm -rf tmux 1
echo 'PS1="[tutorial@mitmproxy] $ "' >> /root/.bashrc 1
apk upgrade --update-cache -a && apk add --no-cache git git-fast-import openssh && apk add --no-cache --virtual .build gcc musl-dev && pip install --no-cache-dir . && if [ "true" = "true" ]; then pip install --no-cache-dir "mkdocs-minify-plugin>=0.3" "mkdocs-redirects>=1.0"; fi && apk del .build && for theme in mkdocs readthedocs; do rm -rf /usr/local/lib/python3.9/site-packages/mkdocs/themes/$theme; ln -s /usr/local/lib/python3.9/site-packages/material /usr/local/lib/python3.9/site-packages/mkdocs/themes/$theme; done && rm -rf /tmp/* /root/.cache && find /usr/local/lib/python3.9/site-packages -type f -path "*/__pycache__/*" -exec rm -f {} \; 1
apt-get update && apt-get install -y default-libmysqlclient-dev build-essential curl cmake protobuf-compiler &&  conda install python=3.7 charset-normalizer=2.0.12 && pip install -r requirements/dev-requirements.txt --no-cache-dir && pip install --no-cache-dir -e . && mkdir -p /usr/share/man/man1 && apt-get install -y openjdk-11-jre-headless 1
curl -sL https://deb.nodesource.com/setup_16.x | bash - && apt-get update && apt-get install -y nodejs && npm install --global yarn && cd mlflow/server/js && yarn install && yarn build 1
pip install psycopg2 pymysql mysqlclient pytest pytest-cov 1
echo "${DEPENDENCIES}" > /tmp/requriements.txt && pip install -r /tmp/requriements.txt 1
pip list 1
apt-get update -y && apt-get install build-essential -y 1
echo foo 1
conda --version 1
conda install python=3.7 charset-normalizer=2.0.12 1
pip install mlflow 1
pip install mlflow>=1.0 && pip install azure-storage-blob==12.3.0 && pip install numpy==1.21.2 && pip install scipy && pip install pandas==1.3.3 && pip install scikit-learn==0.24.2 && pip install cloudpickle 1
pip install mlflow psycopg2 boto3 1
apt update -y && apt install -y  --no-install-recommends build-essential locales sqlite3 fontconfig-config libjpeg-turbo8 libxrender1 libfontconfig1 libxext6 fontconfig xfonts-75dpi xfonts-base python3.9 python3-dev python3-pip wget curl git android-tools-adb 1
./install_java_wkhtmltopdf.sh 1
groupadd -g 9901 mobsf 1
adduser mobsf --shell /bin/false -u 9901 --ingroup mobsf --gecos "" --disabled-password 1
pip3 install --upgrade --no-cache-dir setuptools pip && pip3 install --quiet --no-cache-dir -r requirements.txt 1
apt remove -y libssl-dev libffi-dev libxml2-dev libxslt1-dev python3-dev wget && apt clean && apt autoclean && apt autoremove -y && rm -rf /var/lib/apt/lists/* /tmp/* > /dev/null 2>&1 1
sed -i "s#ADB_BINARY = ''#ADB_BINARY = '/usr/bin/adb'#" mobsf/MobSF/settings.py && mkdir -p /home/mobsf/.local/share/apktool/framework 1
./scripts/postgres_support.sh False 1
chown -R mobsf:mobsf /home/mobsf/Mobile-Security-Framework-MobSF 1
apt-get update && apt-get --no-install-recommends install -y gcc-x86-64-linux-gnu binutils-arm-linux-gnueabihf binutils-aarch64-linux-gnu binutils-i686-linux-gnu binutils-riscv64-linux-gnu binutils-s390x-linux-gnu binutils-powerpc64le-linux-gnu binutils-mips64el-linux-gnuabi64 binutils-mips64-linux-gnuabi64 1
x86_64-linux-gnu-gcc -static -nostdlib -o exit exit.amd64.S 1
i686-linux-gnu-as --noexecstack -o exit.o exit.386.s && i686-linux-gnu-ld -o exit -s exit.o 1
aarch64-linux-gnu-as --noexecstack -o exit.o exit.arm64.s && aarch64-linux-gnu-ld -o exit -s exit.o 1
arm-linux-gnueabihf-as --noexecstack -o exit.o exit.arm.s && arm-linux-gnueabihf-ld -o exit -s exit.o 1
riscv64-linux-gnu-as --noexecstack -o exit.o exit.riscv64.s && riscv64-linux-gnu-ld -o exit -s exit.o 1
s390x-linux-gnu-as --noexecstack -o exit.o exit.s390x.s && s390x-linux-gnu-ld -o exit -s exit.o 1
powerpc64le-linux-gnu-as --noexecstack -o exit.o exit.ppc64le.s && powerpc64le-linux-gnu-ld -o exit -s exit.o 1
mips64el-linux-gnuabi64-as --noexecstack -o exit.o exit.mips64le.s && mips64el-linux-gnuabi64-ld -o exit -s exit.o 1
mips64-linux-gnuabi64-as --noexecstack -o exit.o exit.mips64.s && mips64-linux-gnuabi64-ld -o exit -s exit.o 1
go run generate.go amd64 386 arm64 arm riscv64 s390x ppc64le mips64le mips64 && ls -l 1
gcc -g -Wall -static userns.c -o /usr/bin/userns-test && gcc -g -Wall -static ns.c -o /usr/bin/ns-test && gcc -g -Wall -static acct.c -o /usr/bin/acct-test && gcc -g -Wall -static setuid.c -o /usr/bin/setuid-test && gcc -g -Wall -static setgid.c -o /usr/bin/setgid-test && gcc -g -Wall -static socket.c -o /usr/bin/socket-test && gcc -g -Wall -static raw.c -o /usr/bin/raw-test 1
[ "$(uname -m)" = "x86_64" ] && gcc -s -m32 -nostdlib exit32.s -o /usr/bin/exit32-test || true 1
gcc -g -Wall -static nnp-test.c -o /usr/bin/nnp-test 1
chmod +s /usr/bin/nnp-test 1
apk --no-cache add curl 1
apt update && apt install wget texlive-full -y && wget https://github.com/jgm/pandoc/releases/download/2.7.3/pandoc-2.7.3-1-amd64.deb && dpkg -i pandoc-2.7.3-1-amd64.deb 1
set -ex; export GNUPGHOME="$(mktemp -d)"; set -- '20691EEC35216C63CAF66CE1656408E390CFB1F5' '39BD841E4BE5FB195A65400E6A26B1AE64C3C388' '9DA31620334BD75D9DCB49F368818C72E52529D4' 'E162F504A20CDF15827F718D4B7C549A058F8B6B' 'F5679A222C647C87527C2F8CB00A0BD1E2C63C11'; for key; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; mkdir -p /etc/apt/keyrings; gpg --batch --export "$@" > /etc/apt/keyrings/mongodb.gpg; command -v gpgconf && gpgconf --kill all || :; rm -r "$GNUPGHOME" 1
set -ex; export GNUPGHOME="$(mktemp -d)"; set -- '9DA31620334BD75D9DCB49F368818C72E52529D4'; for key; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; mkdir -p /etc/apt/keyrings; gpg --batch --export "$@" > /etc/apt/keyrings/mongodb.gpg; command -v gpgconf && gpgconf --kill all || :; rm -r "$GNUPGHOME" 1
echo "deb [ signed-by=/etc/apt/keyrings/mongodb.gpg ] http://repo.mongodb.org/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list" 1
set -ex; export GNUPGHOME="$(mktemp -d)"; set -- '20691EEC35216C63CAF66CE1656408E390CFB1F5'; for key; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; mkdir -p /etc/apt/keyrings; gpg --batch --export "$@" > /etc/apt/keyrings/mongodb.gpg; command -v gpgconf && gpgconf --kill all || :; rm -r "$GNUPGHOME" 1
set -ex; export GNUPGHOME="$(mktemp -d)"; set -- 'E162F504A20CDF15827F718D4B7C549A058F8B6B'; for key; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; mkdir -p /etc/apt/keyrings; gpg --batch --export "$@" > /etc/apt/keyrings/mongodb.gpg; command -v gpgconf && gpgconf --kill all || :; rm -r "$GNUPGHOME" 1
set -ex; export GNUPGHOME="$(mktemp -d)"; set -- 'F5679A222C647C87527C2F8CB00A0BD1E2C63C11'; for key; do gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; done; mkdir -p /etc/apt/keyrings; gpg --batch --export "$@" > /etc/apt/keyrings/mongodb.gpg; command -v gpgconf && gpgconf --kill all || :; rm -r "$GNUPGHOME" 1
apk add --no-cache bash tini 1
set -eux; apk add --no-cache --virtual .me-install-deps git; npm install mongo-express@$MONGO_EXPRESS; apk del --no-network .me-install-deps 1
cp config.default.js config.js 1
set -ex;  apt-get update; apt-get install -y --no-install-recommends bash busybox-static ; rm -rf /var/lib/apt/lists/* 1
set -ex;  savedAptMark="$(apt-mark showmanual)";  apt-get update; apt-get install -y --no-install-recommends libicu-dev zlib1g-dev libzip-dev libpng-dev libxml2-dev libfreetype6-dev libjpeg62-turbo-dev libgmp-dev libmemcached-dev libmagickwand-dev libwebp-dev ;  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; if [ ! -e /usr/include/gmp.h ]; then ln -s /usr/include/$debMultiarch/gmp.h /usr/include/gmp.h; fi docker-php-ext-configure intl; docker-php-ext-configure gd --with-jpeg --with-freetype --with-webp; docker-php-ext-configure gmp; docker-php-ext-install -j$(nproc) intl zip bcmath gd gmp pdo_mysql mysqli soap ;  pecl install APCu; pecl install memcached; pecl install redis;  docker-php-ext-enable apcu memcached redis ;  apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark; ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so | awk '/=>/ { print $3 }' | sort -u | xargs -r dpkg-query -S | cut -d: -f1 | sort -u | xargs -rt apt-mark manual;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/* 1
set -ex;  mkdir -p /var/spool/cron/crontabs; rm -f /var/spool/cron/crontabs/root; echo '*/5 * * * * php /var/www/html/artisan schedule:run -v' > /var/spool/cron/crontabs/www-data 1
set -ex;  docker-php-ext-enable opcache; { echo '[opcache]'; echo 'opcache.enable=1'; echo 'opcache.revalidate_freq=0'; echo 'opcache.validate_timestamps=0'; echo 'opcache.max_accelerated_files=${PHP_OPCACHE_MAX_ACCELERATED_FILES}'; echo 'opcache.memory_consumption=${PHP_OPCACHE_MEMORY_CONSUMPTION}'; echo 'opcache.max_wasted_percentage=${PHP_OPCACHE_MAX_WASTED_PERCENTAGE}'; echo 'opcache.interned_strings_buffer=16'; echo 'opcache.fast_shutdown=1'; } > $PHP_INI_DIR/conf.d/opcache-recommended.ini;  echo 'apc.enable_cli=1' >> $PHP_INI_DIR/conf.d/docker-php-ext-apcu.ini;  echo 'memory_limit=512M' > $PHP_INI_DIR/conf.d/memory-limit.ini 1
set -ex;  a2enmod headers rewrite remoteip; { echo RemoteIPHeader X-Real-IP; echo RemoteIPTrustedProxy 10.0.0.0/8; echo RemoteIPTrustedProxy 172.16.0.0/12; echo RemoteIPTrustedProxy 192.168.0.0/16; } > $APACHE_CONFDIR/conf-available/remoteip.conf; a2enconf remoteip 1
set -ex; APACHE_DOCUMENT_ROOT=/var/www/html/public; sed -ri -e "s!/var/www/html!${APACHE_DOCUMENT_ROOT}!g" $APACHE_CONFDIR/sites-available/*.conf; sed -ri -e "s!/var/www/!${APACHE_DOCUMENT_ROOT}!g" $APACHE_CONFDIR/apache2.conf $APACHE_CONFDIR/conf-available/*.conf 1
set -ex;  mkdir -p bootstrap/cache; mkdir -p storage; chown -R www-data:www-data bootstrap/cache storage; chmod -R g+w bootstrap/cache storage 1
install-composer.sh 1
set -ex;  mkdir -p storage/framework/views; composer install --no-interaction --no-progress --no-dev; composer clear-cache; rm -rf .composer 1
set -ex;  curl -fsSL https://deb.nodesource.com/setup_16.x | bash -; apt-get install -y nodejs; npm install -g yarn; yarn run inst; yarn run dev;  rm -rf /var/lib/apt/lists/* 1
set -x && apk --no-cache add --virtual build-deps build-base cmake cjson-dev gnupg libressl-dev linux-headers util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v${LWS_VERSION}.tar.gz -O /tmp/lws.tar.gz && echo "$LWS_SHA256  /tmp/lws.tar.gz" | sha256sum -c - && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DDISABLE_WERROR=ON -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_EXTERNAL_POLL=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://mosquitto.org/files/source/mosquitto-2.0.14.tar.gz -O /tmp/mosq.tar.gz && echo "$DOWNLOAD_SHA256  /tmp/mosq.tar.gz" | sha256sum -c - && wget https://mosquitto.org/files/source/mosquitto-2.0.14.tar.gz.asc -O /tmp/mosq.tar.gz.asc && export GNUPGHOME="$(mktemp -d)" && found=''; for server in hkps://keys.openpgp.org hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $GPG_KEYS from $server"; gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; gpg --batch --verify /tmp/mosq.tar.gz.asc /tmp/mosq.tar.gz && gpgconf --kill all && rm -rf "$GNUPGHOME" /tmp/mosq.tar.gz.asc && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include -I/build" LDFLAGS="-L/build/lws/lib" WITH_ADNS=no WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_TLS_PSK=no WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_rr /usr/bin/mosquitto_rr && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/apps/mosquitto_ctrl/mosquitto_ctrl /usr/bin/mosquitto_ctrl && install -s -m755 /build/mosq/apps/mosquitto_passwd/mosquitto_passwd /usr/bin/mosquitto_passwd && install -s -m755 /build/mosq/plugins/dynamic-security/mosquitto_dynamic_security.so /usr/lib/mosquitto_dynamic_security.so && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && install -Dm644 /build/lws/LICENSE /usr/share/licenses/libwebsockets/LICENSE && install -Dm644 /build/mosq/epl-v20 /usr/share/licenses/mosquitto/epl-v20 && install -Dm644 /build/mosq/edl-v10 /usr/share/licenses/mosquitto/edl-v10 && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates cjson libressl && apk del build-deps && rm -rf /build 1
set -x && apk --no-cache add --virtual build-deps build-base cmake cjson-dev gnupg linux-headers openssl-dev util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v${LWS_VERSION}.tar.gz -O /tmp/lws.tar.gz && echo "$LWS_SHA256  /tmp/lws.tar.gz" | sha256sum -c - && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DDISABLE_WERROR=ON -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_EXTERNAL_POLL=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://mosquitto.org/files/source/mosquitto-2.0.14.tar.gz -O /tmp/mosq.tar.gz && echo "$DOWNLOAD_SHA256  /tmp/mosq.tar.gz" | sha256sum -c - && wget https://mosquitto.org/files/source/mosquitto-2.0.14.tar.gz.asc -O /tmp/mosq.tar.gz.asc && export GNUPGHOME="$(mktemp -d)" && found=''; for server in hkps://keys.openpgp.org hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $GPG_KEYS from $server"; gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; gpg --batch --verify /tmp/mosq.tar.gz.asc /tmp/mosq.tar.gz && gpgconf --kill all && rm -rf "$GNUPGHOME" /tmp/mosq.tar.gz.asc && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include -I/build" LDFLAGS="-L/build/lws/lib" WITH_ADNS=no WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_rr /usr/bin/mosquitto_rr && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/apps/mosquitto_ctrl/mosquitto_ctrl /usr/bin/mosquitto_ctrl && install -s -m755 /build/mosq/apps/mosquitto_passwd/mosquitto_passwd /usr/bin/mosquitto_passwd && install -s -m755 /build/mosq/plugins/dynamic-security/mosquitto_dynamic_security.so /usr/lib/mosquitto_dynamic_security.so && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && install -Dm644 /build/lws/LICENSE /usr/share/licenses/libwebsockets/LICENSE && install -Dm644 /build/mosq/epl-v20 /usr/share/licenses/mosquitto/epl-v20 && install -Dm644 /build/mosq/edl-v10 /usr/share/licenses/mosquitto/edl-v10 && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates cjson && apk del build-deps && rm -rf /build 1
set -x && apk --no-cache add --virtual build-deps build-base cmake gnupg libressl-dev linux-headers util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v${LWS_VERSION}.tar.gz -O /tmp/lws.tar.gz && echo "$LWS_SHA256  /tmp/lws.tar.gz" | sha256sum -c - && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DDISABLE_WERROR=ON -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_EXTERNAL_POLL=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://mosquitto.org/files/source/mosquitto-1.6.15.tar.gz -O /tmp/mosq.tar.gz && echo "$DOWNLOAD_SHA256  /tmp/mosq.tar.gz" | sha256sum -c - && wget https://mosquitto.org/files/source/mosquitto-1.6.15.tar.gz.asc -O /tmp/mosq.tar.gz.asc && export GNUPGHOME="$(mktemp -d)" && found=''; for server in hkps://keys.openpgp.org hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $GPG_KEYS from $server"; gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; gpg --batch --verify /tmp/mosq.tar.gz.asc /tmp/mosq.tar.gz && gpgconf --kill all && rm -rf "$GNUPGHOME" /tmp/mosq.tar.gz.asc && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include" LDFLAGS="-L/build/lws/lib" WITH_ADNS=no WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_TLS_PSK=no WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_rr /usr/bin/mosquitto_rr && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/src/mosquitto_passwd /usr/bin/mosquitto_passwd && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && install -Dm644 /build/lws/LICENSE /usr/share/licenses/libwebsockets/LICENSE && install -Dm644 /build/mosq/epl-v10 /usr/share/licenses/mosquitto/epl-v10 && install -Dm644 /build/mosq/edl-v10 /usr/share/licenses/mosquitto/edl-v10 && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates libressl && apk del build-deps && rm -rf /build 1
test -n "${VERSION}" 1
set -x && apk --no-cache add --virtual build-deps build-base cmake gnupg linux-headers openssl-dev util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v${LWS_VERSION}.tar.gz -O /tmp/lws.tar.gz && echo "$LWS_SHA256  /tmp/lws.tar.gz" | sha256sum -c - && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DDISABLE_WERROR=ON -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_EXTERNAL_POLL=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://github.com/DaveGamble/cJSON/archive/v${CJSON_VERSION}.tar.gz -O /tmp/cjson.tar.gz && echo "$CJSON_SHA256  /tmp/cjson.tar.gz" | sha256sum -c - && mkdir -p /build/cjson && tar --strip=1 -xf /tmp/cjson.tar.gz -C /build/cjson && rm /tmp/cjson.tar.gz && cd /build/cjson && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SHARED_AND_STATIC_LIBS=OFF -DBUILD_SHARED_LIBS=OFF -DCJSON_BUILD_SHARED_LIBS=OFF -DCJSON_OVERRIDE_BUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://mosquitto.org/files/source/mosquitto-${VERSION}.tar.gz -O /tmp/mosq.tar.gz && wget https://mosquitto.org/files/source/mosquitto-${VERSION}.tar.gz.asc -O /tmp/mosq.tar.gz.asc && export GNUPGHOME="$(mktemp -d)" && found=''; for server in hkps://keys.openpgp.org hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $GPG_KEYS from $server"; gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; gpg --batch --verify /tmp/mosq.tar.gz.asc /tmp/mosq.tar.gz && gpgconf --kill all && rm -rf "$GNUPGHOME" /tmp/mosq.tar.gz.asc && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include -I/build" LDFLAGS="-L/build/lws/lib -L/build/cjson" WITH_ADNS=no WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_TLS_PSK=no WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_rr /usr/bin/mosquitto_rr && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/apps/mosquitto_ctrl/mosquitto_ctrl /usr/bin/mosquitto_ctrl && install -s -m755 /build/mosq/apps/mosquitto_passwd/mosquitto_passwd /usr/bin/mosquitto_passwd && install -s -m755 /build/mosq/plugins/dynamic-security/mosquitto_dynamic_security.so /usr/lib/mosquitto_dynamic_security.so && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && install -Dm644 /build/cjson/LICENSE /usr/share/licenses/cJSON/LICENSE && install -Dm644 /build/lws/LICENSE /usr/share/licenses/libwebsockets/LICENSE && install -Dm644 /build/mosq/epl-v20 /usr/share/licenses/mosquitto/epl-v20 && install -Dm644 /build/mosq/edl-v10 /usr/share/licenses/mosquitto/edl-v10 && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates && apk del build-deps && rm -rf /build 1
set -x && apk --no-cache add --virtual build-deps build-base cmake gnupg openssl-dev util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v${LWS_VERSION}.tar.gz -O /tmp/lws.tar.gz && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://mosquitto.org/files/source/mosquitto-1.5.11.tar.gz -O /tmp/mosq.tar.gz && echo "$DOWNLOAD_SHA256  /tmp/mosq.tar.gz" | sha256sum -c - && wget https://mosquitto.org/files/source/mosquitto-1.5.11.tar.gz.asc -O /tmp/mosq.tar.gz.asc && export GNUPGHOME="$(mktemp -d)" && found=''; for server in htps://keys.openpgp.org hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $GPG_KEYS from $server"; gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; gpg --batch --verify /tmp/mosq.tar.gz.asc /tmp/mosq.tar.gz && gpgconf --kill all && rm -rf "$GNUPGHOME" /tmp/mosq.tar.gz.asc && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include -flto" LDFLAGS="-L/build/lws/lib -flto" WITH_ADNS=no WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/src/mosquitto_passwd /usr/bin/mosquitto_passwd && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates libuuid && apk del build-deps && rm -rf /build 1
set -x && apk --no-cache add --virtual build-deps build-base cmake gnupg libressl-dev util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v${LWS_VERSION}.tar.gz -O /tmp/lws.tar.gz && echo "$LWS_SHA256  /tmp/lws.tar.gz" | sha256sum -c - && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://mosquitto.org/files/source/mosquitto-1.5.11.tar.gz -O /tmp/mosq.tar.gz && echo "$DOWNLOAD_SHA256  /tmp/mosq.tar.gz" | sha256sum -c - && wget https://mosquitto.org/files/source/mosquitto-1.5.11.tar.gz.asc -O /tmp/mosq.tar.gz.asc && export GNUPGHOME="$(mktemp -d)" && found=''; for server in hkps://keys.openpgp.org hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $GPG_KEYS from $server"; gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; gpg --batch --verify /tmp/mosq.tar.gz.asc /tmp/mosq.tar.gz && gpgconf --kill all && rm -rf "$GNUPGHOME" /tmp/mosq.tar.gz.asc && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include -flto" LDFLAGS="-L/build/lws/lib -flto" WITH_ADNS=no WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_TLS_PSK=no WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/src/mosquitto_passwd /usr/bin/mosquitto_passwd && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates libressl libuuid && apk del build-deps && rm -rf /build 1
set -x && apk --no-cache add --virtual build-deps build-base cmake gnupg linux-headers openssl-dev util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v${LWS_VERSION}.tar.gz -O /tmp/lws.tar.gz && echo "$LWS_SHA256  /tmp/lws.tar.gz" | sha256sum -c - && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DDISABLE_WERROR=ON -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_EXTERNAL_POLL=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://mosquitto.org/files/source/mosquitto-1.6.15.tar.gz -O /tmp/mosq.tar.gz && echo "$DOWNLOAD_SHA256  /tmp/mosq.tar.gz" | sha256sum -c - && wget https://mosquitto.org/files/source/mosquitto-1.6.15.tar.gz.asc -O /tmp/mosq.tar.gz.asc && export GNUPGHOME="$(mktemp -d)" && found=''; for server in hkps://keys.openpgp.org hkp://keyserver.ubuntu.com:80 pgp.mit.edu ; do echo "Fetching GPG key $GPG_KEYS from $server"; gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; done; test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; gpg --batch --verify /tmp/mosq.tar.gz.asc /tmp/mosq.tar.gz && gpgconf --kill all && rm -rf "$GNUPGHOME" /tmp/mosq.tar.gz.asc && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include" LDFLAGS="-L/build/lws/lib" WITH_ADNS=no WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_rr /usr/bin/mosquitto_rr && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/src/mosquitto_passwd /usr/bin/mosquitto_passwd && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && install -Dm644 /build/lws/LICENSE /usr/share/licenses/libwebsockets/LICENSE && install -Dm644 /build/mosq/epl-v10 /usr/share/licenses/mosquitto/epl-v10 && install -Dm644 /build/mosq/edl-v10 /usr/share/licenses/mosquitto/edl-v10 && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates && apk del build-deps && rm -rf /build 1
set -x && apk --no-cache add --virtual build-deps build-base cmake gnupg linux-headers openssl-dev util-linux-dev && wget https://github.com/warmcat/libwebsockets/archive/v4.2.1.tar.gz -O /tmp/lws.tar.gz && mkdir -p /build/lws && tar --strip=1 -xf /tmp/lws.tar.gz -C /build/lws && rm /tmp/lws.tar.gz && cd /build/lws && cmake . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=/usr -DDISABLE_WERROR=ON -DLWS_IPV6=ON -DLWS_WITHOUT_BUILTIN_GETIFADDRS=ON -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_EXTERNAL_POLL=ON -DLWS_WITH_HTTP2=OFF -DLWS_WITH_SHARED=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITH_ZLIB=OFF && make -j "$(nproc)" && rm -rf /root/.cmake && wget https://github.com/DaveGamble/cJSON/archive/v${CJSON_VERSION}.tar.gz -O /tmp/cjson.tar.gz && mkdir -p /build/cjson && tar --strip=1 -xf /tmp/cjson.tar.gz -C /build/cjson && rm /tmp/cjson.tar.gz && cd /build/cjson && make -j "$(nproc)" libcjson.a && mkdir -p /build/mosq && tar --strip=1 -xf /tmp/mosq.tar.gz -C /build/mosq && rm /tmp/mosq.tar.gz && make -C /build/mosq -j "$(nproc)" CFLAGS="-Wall -O2 -I/build/lws/include -I/build" LDFLAGS="-L/build/lws/lib -L/build/cjson" WITH_ADNS=no WITH_CJSON=yes WITH_DOCS=no WITH_SHARED_LIBRARIES=yes WITH_SRV=no WITH_STRIP=yes WITH_WEBSOCKETS=yes prefix=/usr binary && addgroup -S -g 1883 mosquitto 2>/dev/null && adduser -S -u 1883 -D -H -h /var/empty -s /sbin/nologin -G mosquitto -g mosquitto mosquitto 2>/dev/null && mkdir -p /mosquitto/config /mosquitto/data /mosquitto/log && install -d /usr/sbin/ && install -s -m755 /build/mosq/client/mosquitto_pub /usr/bin/mosquitto_pub && install -s -m755 /build/mosq/client/mosquitto_rr /usr/bin/mosquitto_rr && install -s -m755 /build/mosq/client/mosquitto_sub /usr/bin/mosquitto_sub && install -s -m644 /build/mosq/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1 && install -s -m755 /build/mosq/src/mosquitto /usr/sbin/mosquitto && install -s -m755 /build/mosq/apps/mosquitto_passwd/mosquitto_passwd /usr/bin/mosquitto_passwd && install -s -m755 /build/mosq/apps/mosquitto_ctrl/mosquitto_ctrl /usr/bin/mosquitto_ctrl && install -s -m755 /build/mosq/plugins/dynamic-security/mosquitto_dynamic_security.so /usr/lib/mosquitto_dynamic_security.so && install -m644 /build/mosq/mosquitto.conf /mosquitto/config/mosquitto.conf && install -Dm644 /build/cjson/LICENSE /usr/share/licenses/cJSON/LICENSE && install -Dm644 /build/lws/LICENSE /usr/share/licenses/libwebsockets/LICENSE && install -Dm644 /build/mosq/epl-v20 /usr/share/licenses/mosquitto/epl-v20 && install -Dm644 /build/mosq/edl-v10 /usr/share/licenses/mosquitto/edl-v10 && chown -R mosquitto:mosquitto /mosquitto && apk --no-cache add ca-certificates && apk del build-deps && rm -rf /build 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb 1
apk --update add --virtual build-dependencies python3 build-base ca-certificates && npm_config_user=root npm install -g lerna run-script-os 1
rm -rf node_modules packages/*/node_modules packages/*/dist 1
npm config set legacy-peer-deps true 1
npm install --production --loglevel notice 1
lerna bootstrap --hoist -- --production 1
apk add --update graphicsmagick tzdata tini su-exec git 1
npm_config_user=root npm install -g full-icu 1
apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && update-ms-fonts && fc-cache -f && apk del fonts && find  /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \; 1
apk add --update graphicsmagick tzdata git tini su-exec 1
apk --update add --virtual build-dependencies python3 build-base ca-certificates && npm config set python "$(which python3)" && npm_config_user=root npm install -g full-icu n8n@${N8N_VERSION} && apk del build-dependencies && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root; 1
apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && update-ms-fonts && fc-cache -f && apk del fonts && find  /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \; && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root 1
apt-get update && apt-get -y install graphicsmagick gosu git 1
npm_config_user=root npm install -g full-icu n8n@${N8N_VERSION} 1
apk update && apk add bash wine imagemagick dos2unix && rm -rf /var/cache/apk/* && mkdir /nativefier && chown node:node /nativefier 1
mkdir /home/node/npm-packages && npm config set prefix /home/node/npm-packages 1
find ./icon-scripts ./src ./app -type f -print0 | xargs -0 dos2unix 1
npm link && npm run test:noplaywright && rm -rf /tmp/nativefier* ~/.npm/_cacache ~/.cache/electron && chmod +x /home/node/npm-packages/bin/nativefier 1
nativefier https://github.com/nativefier/nativefier /tmp/nativefier && nativefier -p osx https://github.com/nativefier/nativefier /tmp/nativefier && nativefier -p windows https://github.com/nativefier/nativefier /tmp/nativefier && rm -rf /tmp/nativefier 1
echo Generated Electron cache size: $(du -sh ~/.cache/electron) && echo Final image size: $(du -sh / 2>/dev/null) 1
set -eux; apkArch="$(apk --print-arch)"; case "$apkArch" in aarch64) natsArch='arm64'; sha256='75a53e10c640c8348bafe43300785d5147c91f60cd721c21ec896bc50727270a' ;; armhf) natsArch='arm6'; sha256='993a0d02ff9d0c74be31dc9e7ac1066659637c4897cc94ced2e0dc982fb428f3' ;; armv7) natsArch='arm7'; sha256='89e4191a0bc15c2196f2e6c1b2a3c4200576f6e8ec1176060b2a191c5e588b0d' ;; x86_64) natsArch='amd64'; sha256='da8c999ab0da5881fde68cba55238748d7310f28022fb78b9c07b420572a4b45' ;; x86) natsArch='386'; sha256='e94e5ec1076122e782527f4a98937c60c9eed4d04c6ba0364986cc58cd3ff8f8' ;; *) echo >&2 "error: $apkArch is not supported!"; exit 1 ;; esac;  wget -O nats-server.tar.gz "https://github.com/nats-io/nats-server/releases/download/v${NATS_SERVER}/nats-server-v${NATS_SERVER}-linux-${natsArch}.tar.gz"; echo "${sha256} *nats-server.tar.gz" | sha256sum -c -;  apk add --no-cache ca-certificates;  tar -xf nats-server.tar.gz; rm nats-server.tar.gz; mv "nats-server-v${NATS_SERVER}-linux-${natsArch}/nats-server" /usr/local/bin; rm -rf "nats-server-v${NATS_SERVER}-linux-${natsArch}"; 1
set -eux; apkArch="$(apk --print-arch)"; case "$apkArch" in aarch64) natsArch='arm64'; sha256='efe2e10fa2159a9c97ae39b92409bed61c168d571a7a447d6a9299a3e8451194' ;; armhf) natsArch='arm6'; sha256='caf1c4fa5f3d460b11a7206fb6efadf6b00db5bf764e89c964f7faeb64d5093e' ;; armv7) natsArch='arm7'; sha256='f2d511979cbb2013c6f880e68fc6d3b1efde376851caa4575a0477cc084acf2f' ;; x86_64) natsArch='amd64'; sha256='726b22ead027d6a9a1de24015445d6a130d91f29faa7fafebd53dcb73aa7a667' ;; x86) natsArch='386'; sha256='df0309db02699697b87f28583e1762f7b837b4acca0a2dde805d67ff51b81baf' ;; *) echo >&2 "error: $apkArch is not supported!"; exit 1 ;; esac;  wget -O nats-streaming-server.tar.gz "https://github.com/nats-io/nats-streaming-server/releases/download/v${NATS_STREAMING_SERVER}/nats-streaming-server-v${NATS_STREAMING_SERVER}-linux-${natsArch}.tar.gz"; echo "${sha256} *nats-streaming-server.tar.gz" | sha256sum -c -;  apk add --no-cache ca-certificates;  tar -xf nats-streaming-server.tar.gz; rm nats-streaming-server.tar.gz; mv "nats-streaming-server-v${NATS_STREAMING_SERVER}-linux-${natsArch}/nats-streaming-server" /usr/local/bin; rm -rf "nats-streaming-server-v${NATS_STREAMING_SERVER}-linux-${natsArch}" 1
yum --assumeyes install /tmp/${RPMFILE} 1
apt-get update -qq && apt-get install -y openjdk-11-jre-headless && apt-get install -y --no-install-recommends /tmp/${DEBFILE} 1
apk update && apk upgrade && apk add --no-cache fontforge --repository=https://dl-cdn.alpinelinux.org/alpine/edge/testing && apk add --no-cache py3-pip && pip install configparser 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install --no-install-recommends -y bc fontforge && fontforge --version 2>&1 1
chmod +x netdata-installer.sh && cp -rp /deps/* /usr/local/ && /bin/echo -e "INSTALL_TYPE='oci'\nPREBUILT_ARCH='$(uname -m)'" > ./system/.install-type && CFLAGS="-O2 -pipe" ./netdata-installer.sh --dont-wait --dont-start-it --use-system-protobuf $EXTRA_INSTALL_OPTS --one-time-build "$([ "nightly" = stable ] && echo --stable-channel)" 1
mkdir -p /app/usr/sbin/ /app/usr/share /app/usr/libexec /app/usr/local /app/usr/lib /app/var/cache /app/var/lib /app/etc && mv /usr/share/netdata   /app/usr/share/ && mv /usr/libexec/netdata /app/usr/libexec/ && mv /usr/lib/netdata     /app/usr/lib/ && mv /var/cache/netdata   /app/var/cache/ && mv /var/lib/netdata     /app/var/lib/ && mv /etc/netdata         /app/etc/ && mv /usr/sbin/netdata    /app/usr/sbin/ && mv /usr/sbin/netdata-claim.sh    /app/usr/sbin/ && mv /usr/sbin/netdatacli    /app/usr/sbin/ && mv packaging/docker/run.sh        /app/usr/sbin/ && mv packaging/docker/health.sh     /app/usr/sbin/ && cp -rp /deps/* /app/usr/local/ && chmod +x /app/usr/sbin/run.sh 1
mkdir -p /opt/src /var/log/netdata && ln -sf /dev/stdout /var/log/netdata/access.log && ln -sf /dev/stdout /var/log/netdata/debug.log && ln -sf /dev/stderr /var/log/netdata/error.log && ln -snf /usr/sbin/fping /usr/local/bin/fping && chmod 4755 /usr/local/bin/fping && addgroup -g 201 -S "${DOCKER_GRP}" && adduser -S -H -s /usr/sbin/nologin -u 201 -h /etc/netdata -G "${DOCKER_GRP}" "${DOCKER_USR}" 1
chown -R root:root /etc/netdata /usr/share/netdata /usr/libexec/netdata && chown -R netdata:root /usr/lib/netdata /var/cache/netdata /var/lib/netdata /var/log/netdata && chown -R netdata:netdata /var/lib/netdata/cloud.d && chmod 0700 /var/lib/netdata/cloud.d && chmod 0755 /usr/libexec/netdata/plugins.d/*.plugin && chmod 4755 /usr/libexec/netdata/plugins.d/cgroup-network /usr/libexec/netdata/plugins.d/apps.plugin && if [ -f /usr/libexec/netdata/plugins.d/freeipmi.plugin ]; then chmod 4755 /usr/libexec/netdata/plugins.d/freeipmi.plugin; fi && find /var/lib/netdata /var/cache/netdata -type d -exec chmod 0770 {} \; && find /var/lib/netdata /var/cache/netdata -type f -exec chmod 0660 {} \; && pip --no-cache-dir install /wheels/* && rm -rf /wheels && cp -va /etc/netdata /etc/netdata.stock 1
npm config set registry "https://registry.npmmirror.com/" && npm install -g npm husky && npm install --production 1
cd /next-stats && pnpm install --production 1
git clone https://github.com/nginx-proxy/docker-gen && cd /go/docker-gen && git -c advice.detachedHead=false checkout 0.9.0 && go mod download && CGO_ENABLED=0 GOOS=linux go build -ldflags "-X main.buildVersion=0.9.0" ./cmd/docker-gen && go clean -cache && mv docker-gen /usr/local/bin/ && cd - && rm -rf /go/docker-gen 1
git clone https://github.com/nginx-proxy/forego/ && cd /go/forego && git -c advice.detachedHead=false checkout v0.17.0 && go mod download && CGO_ENABLED=0 GOOS=linux go build -o forego . && go clean -cache && mv forego /usr/local/bin/ && cd - && rm -rf /go/forego 1
apt-get update && apt-get install -y -q --no-install-recommends ca-certificates wget && apt-get clean && rm -r /var/lib/apt/lists/* 1
echo "daemon off;" >> /etc/nginx/nginx.conf && sed -i 's/worker_processes  1/worker_processes  auto/' /etc/nginx/nginx.conf && sed -i 's/worker_connections  1024/worker_connections  10240/' /etc/nginx/nginx.conf && mkdir -p '/etc/nginx/dhparam' 1
groupadd -r sonarqube && useradd -r -g sonarqube sonarqube 1
set -x && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.10/gosu-$(dpkg --print-architecture)" && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/1.10/gosu-$(dpkg --print-architecture).asc" && export GNUPGHOME="$(mktemp -d)" && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc && chmod +x /usr/local/bin/gosu && gosu nobody true 1
set -x && cd /opt && wget -O sonarqube.zip https://sonarsource.bintray.com/Distribution/sonarqube/sonarqube-7.2.1.zip && unzip sonarqube.zip && mv sonarqube-7.2.1 sonarqube && chown -R sonarqube:sonarqube sonarqube && rm sonarqube.zip && rm -rf $SONARQUBE_HOME/bin/* 1
npm ci --production --quiet && npx modclean --patterns="default:*" --ignore="nc-lib-gui/**,dayjs/**,express-status-monitor/**" --run  && rm -rf ./node_modules/sqlite3/deps && tar -czf ../appEntry/app.tar.gz ./* && chmod +x /usr/src/appEntry/start.sh 1
apk --update --no-cache add nodejs tar dumb-init 1
npm ci --production --quiet 1
npx modclean --patterns="default:*" --ignore="nc-lib-gui/**,dayjs/**,express-status-monitor/**" --run 1
rm -rf ./node_modules/sqlite3/deps 1
tar -czf ../appEntry/app.tar.gz ./* 1
chmod +x /usr/src/appEntry/start.sh 1
apk --update --no-cache add nodejs tar 1
buildDeps='binutils build-essential vim nasm git' && apt-get update && apt-get install -y --no-install-recommends --force-yes $buildDeps && apt-get clean && apt-get autoremove -y && cpan install Text::Template && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
mkdir -p /usr/src/app && chown -R node:node /usr/src/app 1
npm install --only=prod && npm cache clean --force 1
apt-get update && apt-get install -y curl locales && rm -rf /var/lib/apt/lists/* && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 1
curl --silent --location https://deb.nodesource.com/setup_10.x | bash - 1
apt-get install --yes nodejs build-essential 1
npm install -g npx 1
apt-get update; apt-get install -y apt-transport-https ca-certificates curl git  tree unzip wget 1
useradd --create-home vagrant && echo 'vagrant      ALL = (ALL) NOPASSWD: ALL' >> /etc/ers 1
/tmp/scripts/vagrant-linux-priv-config.sh 1
/tmp/scripts/vagrant-linux-priv-go.sh 1
/tmp/scripts/vagrant-linux-priv-buf.sh 1
/tmp/scripts/vagrant-linux-unpriv-ui.sh 1
/bin/bash -c '. ~/.nvm/nvm.sh && ln -s ~/.nvm/versions/node/$(nvm current) ~/.nvm/versions/node/.default' 1
mkdir -p /opt/gopath/src/github.com/hashicorp/nomad 1
mkdir -p /home/vagrant/bin && mkdir -p /home/vagrant/bin /home/vagrant/.ssh && git config --global user.email "nomad@hashicorp.com" && git config --global user.name "Nomad Release Bot" 1
git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true 1
echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' > /home/vagrant/.ssh/known_hosts 1
echo "$SSH_KEY" > /home/vagrant/.ssh/id_rsa && chmod 600 /home/vagrant/.ssh/id_rsa 1
set -eux; apk add --no-cache --virtual build-deps git go make musl-dev; export GOPATH=/go GOCACHE=/go/cache; mkdir -p ${GOPATH}/src/${NOTARYPKG}; git clone -b ${TAG} --depth 1 https://${NOTARYPKG} ${GOPATH}/src/${NOTARYPKG}; make -C ${GOPATH}/src/${NOTARYPKG} SKIPENVCHECK=1 PREFIX=. ./bin/static/notary-signer; cp -vL ${GOPATH}/src/${NOTARYPKG}/bin/static/notary-signer ./; apk del --no-network build-deps; rm -rf ${GOPATH}; ./notary-signer --version 1
set -eux; apk add --no-cache --virtual build-deps git go make musl-dev; export GOPATH=/go GOCACHE=/go/cache; mkdir -p ${GOPATH}/src/${NOTARYPKG}; git clone -b ${TAG} --depth 1 https://${NOTARYPKG} ${GOPATH}/src/${NOTARYPKG}; make -C ${GOPATH}/src/${NOTARYPKG} SKIPENVCHECK=1 PREFIX=. ./bin/static/notary-server; cp -vL ${GOPATH}/src/${NOTARYPKG}/bin/static/notary-server ./; apk del --no-network build-deps; rm -rf ${GOPATH}; ./notary-server --version 1
apt update && apt upgrade -y && apt install wget rsync imagemagick default-jre -y 1
mkdir /root/nsfw_data_scraper 1
apt update && apt upgrade -y && apt install -y --no-install-recommends --no-install-suggests ca-certificates aria2 curl git unzip && echo "dash dash/sh boolean false" | debconf-set-selections && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash && cd /lib; curl -s https://api.github.com/repos/nushell/nushell/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep linux | aria2c -i - && tar xvf nu_0*.tar.gz && cd nu_0* && cp -aR nushell*/** /usr/local/bin/ && mkdir -p /root/.config/nushell && cd /root/.config/nushell && aria2c https://raw.githubusercontent.com/nushell/nushell/main/docs/sample_config/default_env.nu -o env.nu && aria2c https://raw.githubusercontent.com/nushell/nushell/main/docs/sample_config/default_config.nu -o config.nu && cd /lib; rm -rf nu_0* nu-latest.tar.gz && rm -rf /var/lib/apt/lists/* && apt autoremove -y && echo '/usr/local/bin/nu' >> /etc/shells && useradd -m -s /usr/local/bin/nu nushell 1
yarn install --prefer-offline --frozen-lockfile --non-interactive --production=false 1
rm -rf node_modules && NODE_ENV=production yarn install --prefer-offline --pure-lockfile --non-interactive --production=true 1
sed -i 's/^deb-src\ /\#deb-src\ /g' /etc/apt/sources.list 1
sed -E -i "s/([a-z]+.)?archive.ubuntu.com/$UBUNTU_APT_SITE/g" /etc/apt/sources.list 1
sed -i "s/security.ubuntu.com/$UBUNTU_APT_SITE/g" /etc/apt/sources.list 1
apt update         && apt upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"  && apt install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"     coreutils             util-linux            bsdutils              file                  openssl               libssl-dev            locales               ca-certificates       ssh                   wget                  patch                                   htop                  dstat                 vim                   tmux                  curl                  git                   jq                    zsh                   ksh                   gcc-4.8               g++-4.8               xz-utils              build-essential       bash-completion       && apt-get clean 1
wget https://github.com/koalaman/shellcheck/releases/download/v0.7.0/shellcheck-v0.7.0.linux.x86_64.tar.xz -O- | tar xJvf - shellcheck-v0.7.0/shellcheck          && mv shellcheck-v0.7.0/shellcheck /bin             && rmdir shellcheck-v0.7.0 1
shellcheck -V 1
bash --version | head -n 1 1
zsh --version 1
ksh --version || true 1
dpkg -s dash | grep ^Version | awk '{print $2}' 1
git --version 1
curl --version 1
wget --version 1
useradd -ms /bin/bash nvm 1
chown nvm:nvm -R "home/nvm/.nvm" 1
echo 'nvm ALL=(ALL) NOPASSWD: ALL' >> /etc/ers 1
echo 'export NVM_DIR="$HOME/.nvm"'                                       >> "$HOME/.bashrc" 1
echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm' >> "$HOME/.bashrc" 1
echo '[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion" # This loads nvm bash_completion' >> "$HOME/.bashrc" 1
bash -c 'source $HOME/.nvm/nvm.sh   && nvm install node                    && npm install -g doctoc urchin eclint dockerfile_lint && npm install --prefix "$HOME/.nvm/"' 1
apt-get update && apt-get install -y git wget curl python3 python3-pip gcc g++ make && curl https://bootstrap.pypa.io/get-pip.py | python3 && curl -sL https://deb.nodesource.com/setup_10.x | bash - && apt-get install -y nodejs 1
git clone ${WIKI_REPO:-https://github.com/OI-wiki/OI-wiki.git} --depth=1 && cd OI-wiki && pip install -U -r requirements.txt && npm install 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential cmake curl git libcurl3-dev libleptonica-dev liblog4cplus-dev libopencv-dev libtesseract-dev wget 1
mkdir /srv/openalpr/src/build 1
cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_INSTALL_SYSCONFDIR:PATH=/etc .. && make -j2 && make install 1
python3 -m venv /venv 1
pip install --no-cache-dir . 1
pip install pytest 1
pytest tests 1
apk add --update cmake alpine-sdk openssl qt5-qtbase-dev qt5-qttools-dev 1
mkdir -p ./build 1
cmake  -DNODEBUG:STRING="ON" .. 1
apk add --update libgcc  libstdc++  qt5-qtbase openssl 1
apk --no-cache add tzdata ## ca-certificates 1
addgroup sinatra 1
adduser -S -G sinatra sinatra 1
apt-get update && apt-get install git wget python3 python3-pip -y 1
mkdir OpenBBTerminal && wget https://github.com/OpenBB-finance/OpenBBTerminal/tarball/master.tar.gz -O - | tar -xz -C OpenBBTerminal --strip-components 1 1
pip install -r requirements-full.txt && pip cache purge 1
printf '#!/bin/sh\npython3 /OpenBBTerminal/terminal.py\n' > /bin/run && chmod +x /bin/run 1
chmod +x /bin/gotty 1
apt-get update && apt-get -y install --no-install-recommends gcc g++ make wget curl telnet net-tools iputils-ping dnsutils git gnupg unzip bzip2 libsm6 libxt6 libgl1-mesa-glx libpng16-16 procps python3-tk && curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh && bash nodesource_setup.sh && apt-get install -y nodejs && apt-get -y autoremove && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
useradd --create-home --shell /bin/bash python 1
pip install "poetry==1.1.12" 1
apt-get update && apt-get --no-install-recommends install -y libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev cmake g++ ninja-build && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y build-essential cmake curl gfortran git graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python-dev python-numpy python-protobu software-properties-common zip && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bash -e 1
git clone https://github.com/torch/distro.git ~/torch --recursive 1
cd ~/torch && ./install.sh && cd install/bin && ./luarocks install nn && ./luarocks install dpnn && ./luarocks install image && ./luarocks install optim && ./luarocks install csvigo && ./luarocks install torchx && ./luarocks install tds 1
cd ~ && mkdir -p ocv-tmp && cd ocv-tmp && curl -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip && unzip ocv.zip && cd opencv-2.4.11 && mkdir release && cd release && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_PYTHON_SUPPORT=ON .. && make -j8 && make install && rm -rf ~/ocv-tmp 1
cd ~ && mkdir -p dlib-tmp && cd dlib-tmp && curl -L https://github.com/davisking/dlib/archive/v19.0.tar.gz -o dlib.tar.bz2 && tar xf dlib.tar.bz2 && cd dlib-19.0/python_examples && mkdir build && cd build && cmake ../../tools/python && cmake --build . --config Release && cp dlib.so /usr/local/lib/python2.7/dist-packages && rm -rf ~/dlib-tmp 1
apk add --no-cache java-cacerts 1
set -eux;  arch="$(apk --print-arch)"; case "$arch" in 'x86_64') downloadUrl='https://download.java.net/java/early_access/alpine/5/binaries/openjdk-19-ea+5_linux-x64-musl_bin.tar.gz'; downloadSha256='0ee67a41fe97341f131bd4f065ed6092d55c15de5f00f8ba1e57d21eefb2c787'; ;; *) echo >&2 "error: unsupported architecture: '$arch'"; exit 1 ;; esac;  wget -O openjdk.tgz "$downloadUrl"; echo "$downloadSha256 *openjdk.tgz" | sha256sum -c -;  mkdir -p "$JAVA_HOME"; tar --extract --file openjdk.tgz --directory "$JAVA_HOME" --strip-components 1 --no-same-owner ; rm openjdk.tgz*;  rm -rf "$JAVA_HOME/lib/security/cacerts"; ln -sT /etc/ssl/certs/java/cacerts "$JAVA_HOME/lib/security/cacerts";  java -Xshare:dump;  fileEncoding="$(echo 'System.out.println(System.getProperty("file.encoding"))' | jshell -s -)"; [ "$fileEncoding" = 'UTF-8' ]; rm -rf ~/.java; javac --version; java --version 1
mkdir -p ${OPENPILOT_PATH} 1
pip install --no-cache-dir pipenv==2021.5.29 pip==21.3.1 && pipenv install --system --deploy --dev --clear && pip uninstall -y pipenv 1
scons -j$(nproc) 1
apt update && apt install doxygen -y 1
git init . 1
make html 1
apt-get update && apt-get install -y --no-install-recommends libvtk6-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev && rm -rf /var/lib/apt/lists/* && mkdir /tmp/opencv_build && cd /tmp/opencv_build && curl -L -O https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz && tar -xvf ${OPENCV_VERSION}.tar.gz && mv opencv-${OPENCV_VERSION} OpenCV && cd OpenCV && mkdir build && cd build && cmake -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DENABLE_PRECOMPILED_HEADERS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_apps=OFF .. && make -j8 && make install && ldconfig && cd / && rm -rf /tmp/* 1
apk add --update tar curl && rm -rf /var/cache/apk/* 1
apt update -q -y 1
apt upgrade -q -y 1
apt install -q -y --no-install-recommends git make ccache python python3  wget ca-certificates tar icu-devtools flex bison xz-utils python3-setuptools python3-psutil python3-pip python3-six rpm dpkg-dev file elfutils locales python3-wheel 1
pip3 install timeout_decorator thrift==0.11.0 osquery pexpect==3.3 docker 1
case $(uname -m) in aarch64) ARCH="aarch64" ;; amd64|x86_64) ARCH="x86_64" ;; esac && wget https://github.com/osquery/osquery-toolchain/releases/download/1.1.0/osquery-toolchain-1.1.0-${ARCH}.tar.xz &&  tar xvf osquery-toolchain-1.1.0-${ARCH}.tar.xz -C /usr/local && rm osquery-toolchain-1.1.0-${ARCH}.tar.xz 1
case $(uname -m) in aarch64) ARCH="aarch64" ;; amd64|x86_64) ARCH="x86_64" ;; esac && wget https://github.com/Kitware/CMake/releases/download/v${cmakeVer}/cmake-${cmakeVer}-Linux-${ARCH}.tar.gz &&  tar xvf cmake-${cmakeVer}-Linux-${ARCH}.tar.gz -C /usr/local --strip 1 && rm cmake-${cmakeVer}-Linux-${ARCH}.tar.gz 1
case $(uname -m) in amd64|x86_64) git clone https://github.com/danmar/cppcheck.git && apt install -q -y --no-install-recommends clang-9 libpcre3-dev && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 20 && update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 20 && cd cppcheck && git checkout ${cppcheckVer} && mkdir build && cd build && cmake ../ -DCMAKE_BUILD_TYPE=Release -DHAVE_RULES=ON -DUSE_MATCHCOMPILER=ON && cmake --build . --target cppcheck -j $(nproc) && DESTDIR=../install cmake --build . --target install ;; *) mkdir -p /root/cppcheck/install/usr/local/ ;; esac 1
apt autoremove --purge -y 1
rm -rf /usr/local/doc /usr/local/bin/cmake-gui 1
apt clean 1
addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001 && chown -R nodejs:nodejs /opt/outline/build 1
apk add --no-cache git bash openssl ca-certificates 1
set -eux && apk add --no-cache git bash wget openssl gnupg && gpg --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F && mkdir -p /tmp/build && cd /tmp/build && apkArch="$(apk --print-arch)" && case "${apkArch}" in aarch64) packerArch='arm64' ;; armhf) packerArch='arm' ;; x86) packerArch='386' ;; x86_64) packerArch='amd64' ;; *) echo >&2 "error: unsupported architecture: ${apkArch} (see https://releases.hashicorp.com/packer/${VERSION}/)" && exit 1 ;; esac && wget https://releases.hashicorp.com/packer/${VERSION}/packer_${VERSION}_linux_${packerArch}.zip && wget https://releases.hashicorp.com/packer/${VERSION}/packer_${VERSION}_SHA256SUMS && wget https://releases.hashicorp.com/packer/${VERSION}/packer_${VERSION}_SHA256SUMS.sig && gpg --batch --verify packer_${VERSION}_SHA256SUMS.sig packer_${VERSION}_SHA256SUMS && grep packer_${VERSION}_linux_${packerArch}.zip packer_${VERSION}_SHA256SUMS | sha256sum -c && unzip -d /tmp/build packer_${VERSION}_linux_${packerArch}.zip && cp /tmp/build/packer /bin/packer && cd /tmp && rm -rf /tmp/build && gpgconf --kill all && apk del gnupg openssl && rm -rf /root/.gnupg && packer version 1
apk add --no-cache git bash wget openssl gnupg 1
/bin/bash miniconda3.sh -b -p /opt/python3/ && rm -f miniconda3.sh 1
mkdir -p ~/.pip && echo "[global]" >> ~/.pip/pip.conf && echo "trusted-host =  mirrors.aliyun.com" >> ~/.pip/pip.conf && echo "index-url = https://mirrors.aliyun.com/pypi/simple" >> ~/.pip/pip.conf 1
echo "channels:" >> ~/.condarc && echo "  - conda-forge" >> ~/.condarc && echo "  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/" >> ~/.condarc && echo "  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/" >> ~/.condarc && echo "  - defaults" >> ~/.condarc && echo "custom_channels:" >> ~/.condarc && echo "  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud" >> ~/.condarc && echo "  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud" >> ~/.condarc && echo "  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud" >> ~/.condarc && echo "  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud" >> ~/.condarc && echo "  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud" >> ~/.condarc && echo "  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud" >> ~/.condarc && echo "show_channel_urls: true" >> ~/.condarc && echo "channel_priority: strict" >> ~/.condarc 1
conda install -y r -c conda-forge 1
/opt/python3/bin/python -m pip install https://paddle-wheel.bj.bcebos.com/0.0.0-cpu-mkl/paddlepaddle-0.0.0-cp37-cp37m-linux_x86_64.whl 1
Rscript -e 'install.packages("reticulate", repos="https://cran.rstudio.com")' 1
cd example && curl -O https://paddle-inference-dist.cdn.bcebos.com/mobilenet-test-model-data.tar.gz && tar -zxvf mobilenet-test-model-data.tar.gz && rm mobilenet-test-model-data.tar.gz 1
apt-get -qq update && apt-get --no-install-recommends -qq -y install git && apt-get -qq clean 1
apt-get -qq update && apt-get --no-install-recommends -qq -y install python2.7 nodejs cmake default-jre && apt-get -qq clean 1
go get github.com/gopherjs/gopherjs 1
$GOPATH/bin/qtsetup check js 1
QT_STUB=true $GOPATH/bin/qtsetup generate 1
$GOPATH/bin/qtsetup generate js 1
$GOPATH/bin/qtsetup install js 1
cd $GOPATH/src/github.com/peterq/pan-light/qt/internal/examples/widgets/line_edits && $GOPATH/bin/qtdeploy build js && rm -rf ./deploy 1
apt-get -qq update && apt-get --no-install-recommends -qq -y install ca-certificates curl git 1
GO=go1.11.2.linux-amd64.tar.gz && curl -sL --retry 10 --retry-delay 60 -O https://dl.google.com/go/$GO && tar -xzf $GO -C /usr/local 1
/usr/local/go/bin/go get -tags=no_env github.com/peterq/pan-light/qt/cmd/... 1
apt-get -qq update && apt-get --no-install-recommends -qq -y install dbus fontconfig libx11-6 libx11-xcb1 1
QT=qt-unified-linux-x64-online.run && curl -sL --retry 10 --retry-delay 60 -O https://download.qt.io/official_releases/online_installers/$QT && chmod +x $QT && QT_QPA_PLATFORM=minimal ./$QT --script $GOPATH/src/github.com/peterq/pan-light/qt/internal/ci/iscript.qs LINUX=true 1
find /opt/Qt/5.12.0 -type f -name "*.debug" -delete 1
find /opt/Qt/Docs -type f ! -name "*.index" -delete 1
find /opt/Qt/5.12.0/gcc_64 -type f ! -name "*.a" -name "lib*" -exec strip -s {} \; 1
apt-get -qq update && apt-get --no-install-recommends -qq -y install build-essential libglib2.0-dev libglu1-mesa-dev libpulse-dev && apt-get --no-install-recommends -qq -y install fontconfig libasound2 libegl1-mesa libnss3 libpci3 libxcomposite1 libxcursor1 libxi6 libxrandr2 libxtst6 && apt-get -qq clean 1
$GOPATH/bin/qtsetup check 1
$GOPATH/bin/qtsetup generate 1
cd $GOPATH/src/github.com/peterq/pan-light/qt/internal/examples/widgets/line_edits && $GOPATH/bin/qtdeploy build linux && rm -rf ./deploy 1
apt-get update && apt-get -y install --no-install-recommends apt-utils dialog 2>&1 && apt-get -y install tzdata && ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && dpkg-reconfigure -f noninteractive tzdata && apt-get -y install git iproute2 procps iproute2 lsb-release && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* 1
mkdir "/home/pandas" && git clone "https://github.com/pandas-dev/pandas.git" "/home/pandas" && cd "/home/pandas" && git remote add upstream "https://github.com/pandas-dev/pandas.git" && git pull upstream main 1
conda install -y mamba 1
mamba env update -n base -f "/home/pandas/environment.yml" 1
. /opt/conda/etc/profile.d/conda.sh && conda activate base && cd "/home/pandas" && export && python setup.py build_ext -j 4 && python -m pip install --no-build-isolation -e . 1
npm ci --production --ignore-scripts 1
mkdir -p logs && chown -R node: logs 1
set -ex; mkdir -p /etc/resolvconf/resolv.conf.d; echo "nameserver 8.8.8.8" > /etc/resolvconf/resolv.conf.d/tail; apt-get -qq update; apt-get -qqy install --no-install-recommends locales gnupg2 ca-certificates wget  tmux vim curl bash git rlwrap unzip rsync fakeroot netcat file ; echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen; locale-gen; rm -rf /var/lib/apt/lists/*; 1
set -ex; useradd -m -g users -s /bin/bash penpot; passwd penpot -d; echo "penpot ALL=(ALL) NOPASSWD:ALL" >> /etc/ers 1
set -ex; apt-get -qq update; apt-get -qqy install --no-install-recommends python build-essential imagemagick ghostscript netpbm poppler-utils potrace webp nginx jq redis-tools woff-tools woff2 fontforge ; rm -rf /var/lib/apt/lists/*; 1
set -ex; apt-get -qq update; apt-get -qqy install gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxshmfence1 libxss1 libxtst6 fonts-liberation libappindicator1 libnss3 libgbm1 xvfb ; rm -rf /var/lib/apt/lists/*; 1
set -ex; curl -LfsSo /tmp/openjdk.tar.gz https://github.com/adoptium/temurin18-binaries/releases/download/jdk-18%2B36/OpenJDK18U-jdk_x64_linux_hotspot_18_36.tar.gz; mkdir -p /usr/lib/jvm/openjdk; cd /usr/lib/jvm/openjdk; tar -xf /tmp/openjdk.tar.gz --strip-components=1; rm -rf /tmp/openjdk.tar.gz; 1
set -ex; curl -LfsSo /tmp/clojure.sh https://download.clojure.org/install/linux-install-$CLOJURE_VERSION.sh; chmod +x /tmp/clojure.sh; /tmp/clojure.sh; rm -rf /tmp/clojure.sh; 1
set -ex; curl https://www.postgresql.org/media/keys/ACCC4CF8.asc |  apt-key add -; echo "deb http://apt.postgresql.org/pub/repos/apt focal-pgdg main" >> /etc/apt/sources.list.d/postgresql.list; apt-get -qq update; apt-get -qqy install postgresql-client-13; rm -rf /var/lib/apt/lists/*; 1
set -ex; curl -LfsSo /tmp/nodejs.tar.xz https://nodejs.org/dist/v16.15.1/node-v16.15.1-linux-x64.tar.xz; mkdir -p /usr/local/nodejs; cd /usr/local/nodejs; tar -xf /tmp/nodejs.tar.xz --strip-components=1; chown -R root /usr/local/nodejs; PATH="/usr/lib/jvm/openjdk/bin:/usr/local/nodejs/bin:$PATH:/usr/local/nodejs/bin"; /usr/local/nodejs/bin/npm install -g yarn; /usr/local/nodejs/bin/npm install -g svgo; rm -rf /tmp/nodejs.tar.xz; 1
set -ex; curl -LfsSo /tmp/clj-kondo.zip https://github.com/borkdude/clj-kondo/releases/download/v$CLJKONDO_VERSION/clj-kondo-$CLJKONDO_VERSION-linux-amd64.zip; cd /usr/local/bin; unzip /tmp/clj-kondo.zip; rm /tmp/clj-kondo.zip; 1
set -ex; cd /tmp; curl -LfsSo /tmp/babashka.tar.gz https://github.com/babashka/babashka/releases/download/v$BABASHKA_VERSION/babashka-$BABASHKA_VERSION-linux-amd64.tar.gz; cd /usr/local/bin; tar -xf /tmp/babashka.tar.gz; rm -rf /tmp/babashka.tar.gz; 1
set -ex; curl -LfsSo /tmp/mc https://dl.min.io/client/mc/release/linux-amd64/mc --user-agent "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15"; mv /tmp/mc /usr/local/bin/; chmod +x /usr/local/bin/mc; 1
git clone --branch=main https://github.com/percona/percona-xtradb-cluster-operator.git /go/src/github.com/percona/percona-xtradb-cluster-operator/ 1
curl -o /go/bin/mc -O https://dl.minio.io/client/mc/release/linux-amd64/archive/mc.RELEASE.2022-05-04T06-07-55Z && chmod +x /go/bin/mc && echo "f207b7fdf8ff126caf4c26603de752c918e3b8441040830dd62d749b22895d2d /go/bin/mc" | sha256sum -c - && curl -o /go/bin/LICENSE.mc https://raw.githubusercontent.com/minio/mc/RELEASE.2022-05-04T06-07-55Z/LICENSE 1
set -ex; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A 99DB70FAE1D7CE227FB6488205B555B38483C65D 94E279EB8D8F25B21810ADF121EA45AB2F86D6A1; gpg --batch --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona; gpg --batch --export --armor 99DB70FAE1D7CE227FB6488205B555B38483C65D > ${GNUPGHOME}/RPM-GPG-KEY-centosofficial; gpg --batch --export --armor 94E279EB8D8F25B21810ADF121EA45AB2F86D6A1 > ${GNUPGHOME}/RPM-GPG-KEY-EPEL-8; rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona ${GNUPGHOME}/RPM-GPG-KEY-centosofficial ${GNUPGHOME}/RPM-GPG-KEY-EPEL-8; microdnf install -y findutils; curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm; rpmkeys --checksig /tmp/percona-release.rpm; rpm -i /tmp/percona-release.rpm; rm -rf "$GNUPGHOME" /tmp/percona-release.rpm; rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY; percona-release enable-only tools release; percona-release enable pxc-57 release 1
set -ex; curl -Lf -o /tmp/numactl-libs.rpm http://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/numactl-libs-2.0.12-13.el8.x86_64.rpm; curl -Lf -o /tmp/libev.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/libev-4.24-6.el8.x86_64.rpm; curl -Lf -o /tmp/jq.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/jq-1.5-12.el8.x86_64.rpm; curl -Lf -o /tmp/oniguruma.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/oniguruma-6.8.2-2.el8.x86_64.rpm; curl -Lf -o /tmp/pv.rpm http://download.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/p/pv-1.6.6-7.el8.x86_64.rpm; curl -Lf -o /tmp/compat-openssl.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/compat-openssl10-1.0.2o-3.el8.x86_64.rpm; curl -Lf -o /tmp/socat.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/socat-1.7.4.1-1.el8.x86_64.rpm; rpmkeys --checksig /tmp/socat.rpm /tmp/numactl-libs.rpm /tmp/libev.rpm /tmp/jq.rpm /tmp/oniguruma.rpm /tmp/pv.rpm /tmp/compat-openssl.rpm; rpm -i /tmp/compat-openssl.rpm --nodeps; rpm -i /tmp/socat.rpm /tmp/numactl-libs.rpm /tmp/libev.rpm /tmp/jq.rpm /tmp/oniguruma.rpm /tmp/pv.rpm; rm -rf /tmp/socat.rpm /tmp/numactl-libs.rpm /tmp/libev.rpm /tmp/jq.rpm /tmp/oniguruma.rpm /tmp/pv.rpm /tmp/compat-openssl.rpm 1
set -ex; microdnf install -y shadow-utils hostname findutils diffutils procps-ng qpress tar cracklib-dicts libaio; microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum 1
set -ex; curl -Lf -o /tmp/Percona-XtraDB-Cluster-garbd-57.rpm https://repo.percona.com/yum/release/8/RPMS/x86_64/Percona-XtraDB-Cluster-garbd-57-${FULL_PERCONA_XTRADBCLUSTER_VERSION}.x86_64.rpm; curl -Lf -o /tmp/Percona-XtraDB-Cluster-client-57.rpm https://repo.percona.com/yum/release/8/RPMS/x86_64/Percona-XtraDB-Cluster-client-57-${FULL_PERCONA_XTRADBCLUSTER_VERSION}.x86_64.rpm; curl -Lf -o /tmp/percona-xtrabackup-24.rpm http://repo.percona.com/percona/yum/release/8/RPMS/x86_64/percona-xtrabackup-24-${FULL_PERCONA_XTRABACKUP_VERSION}.x86_64.rpm; curl -Lf -o /tmp/iputils.rpm http://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/iputils-20180629-7.el8.x86_64.rpm; rpm --checksig /tmp/iputils.rpm /tmp/Percona-XtraDB-Cluster-garbd-57.rpm /tmp/percona-xtrabackup-24.rpm /tmp/Percona-XtraDB-Cluster-client-57.rpm; rpm -iv /tmp/iputils.rpm /tmp/Percona-XtraDB-Cluster-garbd-57.rpm /tmp/percona-xtrabackup-24.rpm /tmp/Percona-XtraDB-Cluster-client-57.rpm --nodeps; rm -rf /tmp/iputils.rpm /tmp/Percona-XtraDB-Cluster-garbd-57.rpm /tmp/percona-xtrabackup-24.rpm /tmp/Percona-XtraDB-Cluster-client-57.rpm; rpm -ql Percona-XtraDB-Cluster-client-57 | egrep -v "mysql$|mysqldump$|mysqlbinlog$" | xargs rm -rf; microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum /var/lib/mysql 1
cp /usr/share/doc/percona-xtrabackup-24/COPYING /licenses/LICENSE.xtrabackup; cp /usr/share/doc/percona-xtradb-cluster-garbd-3/COPYING /licenses/LICENSE.garbd 1
curl -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.19.12/bin/linux/amd64/kubectl; chmod +x /usr/bin/kubectl; echo "9a9123b58e3287fdca20db45ab003426d30e7a77ec57605fa25947bc68f6cabf /usr/bin/kubectl" | sha256sum -c -; curl -o /licenses/LICENSE.kubectl https://raw.githubusercontent.com/kubernetes/kubectl/master/LICENSE 1
install -d -o 1001 -g 0 -m 0775 /backup; mkdir /usr/lib/pxc 1
set -ex; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A 99DB70FAE1D7CE227FB6488205B555B38483C65D 94E279EB8D8F25B21810ADF121EA45AB2F86D6A1; gpg --batch --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona; gpg --batch --export --armor 99DB70FAE1D7CE227FB6488205B555B38483C65D > ${GNUPGHOME}/RPM-GPG-KEY-centosofficial; gpg --batch --export --armor 94E279EB8D8F25B21810ADF121EA45AB2F86D6A1 > ${GNUPGHOME}/RPM-GPG-KEY-EPEL-8; rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona ${GNUPGHOME}/RPM-GPG-KEY-centosofficial ${GNUPGHOME}/RPM-GPG-KEY-EPEL-8; microdnf install -y findutils; curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm; rpmkeys --checksig /tmp/percona-release.rpm; rpm -i /tmp/percona-release.rpm; rm -rf "$GNUPGHOME" /tmp/percona-release.rpm; rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY; percona-release setup pxc80; percona-release enable tools testing 1
set -ex; curl -Lf -o /tmp/jq.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/jq-1.5-12.el8.x86_64.rpm; curl -Lf -o /tmp/oniguruma.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/oniguruma-6.8.2-2.el8.x86_64.rpm; rpmkeys --checksig /tmp/jq.rpm /tmp/oniguruma.rpm; rpm -i /tmp/jq.rpm /tmp/oniguruma.rpm; rm -rf /tmp/jq.rpm /tmp/oniguruma.rpm 1
set -ex; microdnf install -y percona-xtradb-cluster-client-${FULL_PERCONA_VERSION} shadow-utils which hostname procps-ng perl-DBD-MySQL perl-DBI tar; microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum 1
groupadd -g 1001 proxysql; useradd -u 1001 -r -g 1001 -s /sbin/nologin -c "Default Application User" proxysql 1
set -ex; curl -Lf -o /tmp/util-linux.rpm http://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/util-linux-2.32.1-28.el8.x86_64.rpm; curl -Lf -o /tmp/proxysql2-${FULL_PROXYSQL_VERSION}.rpm http://repo.percona.com/proxysql/yum/release/8/RPMS/x86_64/proxysql2-${FULL_PROXYSQL_VERSION}.x86_64.rpm; rpmkeys --checksig /tmp/proxysql2-${FULL_PROXYSQL_VERSION}.rpm /tmp/util-linux.rpm; rpm -iv /tmp/proxysql2-${FULL_PROXYSQL_VERSION}.rpm /tmp/util-linux.rpm --nodeps; rm -rf /tmp/proxysql2-${FULL_PROXYSQL_VERSION}.rpm /tmp/util-linux.rpm; microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum /etc/proxysql /var/lib/proxysql; rpm -ql percona-xtradb-cluster-client | egrep -v "mysql$|mysqldump$" | xargs rm -rf; install -o 1001 -g 0 -m 775 -d /etc/proxysql /var/lib/proxysql 1
cp /usr/share/doc/proxysql2/LICENSE /licenses/LICENSE.proxysql 1
chown 1001:1001 /etc/proxysql/proxysql.cnf /etc/proxysql-admin.cnf; chmod 664 /etc/proxysql/proxysql.cnf /etc/proxysql-admin.cnf 1
export GNUPGHOME="$(mktemp -d)" && gpg --keyserver https://packages.fluentbit.io/fluentbit-legacy.key  --recv-keys F209D8762A60CD49E680633B4FF8368B6EA0722A && gpg --export --armor F209D8762A60CD49E680633B4FF8368B6EA0722A > ${GNUPGHOME}/RPM-GPG-KEY-Fluent && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 567E347AD0044ADE55BA8A5F199E2F91FD431D51 && gpg --batch --export --armor 567E347AD0044ADE55BA8A5F199E2F91FD431D51 > ${GNUPGHOME}/RPM-GPG-KEY-redhat-release && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 99DB70FAE1D7CE227FB6488205B555B38483C65D && gpg --batch --export --armor 99DB70FAE1D7CE227FB6488205B555B38483C65D > ${GNUPGHOME}/RPM-GPG-KEY-centosofficial && rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Fluent ${GNUPGHOME}/RPM-GPG-KEY-redhat-release ${GNUPGHOME}/RPM-GPG-KEY-centosofficial && gpg --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A && gpg --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona && rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona && microdnf install -y findutils && curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm && rpmkeys --checksig /tmp/percona-release.rpm && rpm -i /tmp/percona-release.rpm && rm -rf "$GNUPGHOME" /tmp/percona-release.rpm && rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY && percona-release setup pdpxc-8.0.27 1
set -ex; microdnf install -y postgresql-libs shadow-utils yum-utils logrotate make libpq compat-openssl10 percona-xtradb-cluster-client-${PERCONA_VERSION} tar vim-minimal; curl -Lf -o /tmp/procps-ng.rpm http://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/procps-ng-3.3.15-6.el8.x86_64.rpm; curl -Lf https://github.com/michaloo/go-cron/releases/download/v0.0.2/go-cron.tar.gz -o /tmp/go-cron.tar.gz; tar xvf /tmp/go-cron.tar.gz -C /usr/bin; curl -Lf https://packages.fluentbit.io/centos/7/x86_64/td-agent-bit-1.8.11-1.x86_64.rpm -o /tmp/td-agent-bit.rpm; rpmkeys --checksig /tmp/procps-ng.rpm /tmp/td-agent-bit.rpm; rpm -i /tmp/td-agent-bit.rpm /tmp/procps-ng.rpm --nodeps; rm -f /tmp/td-agent-bit.rpm /tmp/procps-ng.rpm; rm -rf /var/cache 1
set -ex; ln -s /opt/td-agent-bit/bin/td-agent-bit /opt/td-agent-bit/bin/fluent-bit; mkdir -p /etc/fluentbit; chown -R 1001:1001 /etc/fluentbit /opt/percona /usr/local/bin; chmod 664 /etc/passwd; chmod -R 775 /opt/percona 1
export GNUPGHOME="$(mktemp -d)" && microdnf install -y findutils && gpg --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A && gpg --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona && rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona && curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm && rpmkeys --checksig /tmp/percona-release.rpm && rpm -i /tmp/percona-release.rpm && rm -rf "$GNUPGHOME" /tmp/percona-release.rpm && rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY && percona-release setup pdpxc-8.0.27 1
set -ex; microdnf install -y shadow-utils percona-haproxy percona-xtradb-cluster-client-${PERCONA_VERSION} which tar socat procps-ng vim-minimal policycoreutils;  microdnf clean all; rm -rf /var/cache 1
set -ex; mkdir -p /etc/haproxy/pxc /etc/haproxy-custom; chown -R 1001:1001 /run /etc/haproxy /etc/haproxy/pxc /etc/haproxy-custom 1
cp /usr/share/licenses/percona-haproxy/LICENSE /licenses/LICENSE.haproxy 1
set -ex; chown 1001:1001 /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy-global.cfg /usr/local/bin/check_pxc.sh 1
set -ex; microdnf -y update; microdnf -y install glibc-langpack-en nss_wrapper shadow-utils; microdnf clean all; groupadd -g 1001 mysql; useradd -u 1001 -r -g 1001 -s /sbin/nologin -c "Default Application User" mysql 1
set -ex; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A 99DB70FAE1D7CE227FB6488205B555B38483C65D; gpg --batch --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona; gpg --batch --export --armor 99DB70FAE1D7CE227FB6488205B555B38483C65D > ${GNUPGHOME}/RPM-GPG-KEY-centosofficial; rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona ${GNUPGHOME}/RPM-GPG-KEY-centosofficial; microdnf install -y findutils; curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm; rpmkeys --checksig /tmp/percona-release.rpm; rpm -i /tmp/percona-release.rpm; rm -rf "$GNUPGHOME" /tmp/percona-release.rpm; rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY; curl -Lf -o /tmp/numactl-libs.rpm http://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/numactl-libs-2.0.12-13.el8.x86_64.rpm; rpmkeys --checksig /tmp/numactl-libs.rpm; rpm -i /tmp/numactl-libs.rpm; rm -rf /tmp/numactl-libs.rpm 1
set -ex; rpm -e --nodeps tzdata; microdnf -y install tzdata jemalloc which cracklib-dicts policycoreutils;   microdnf -y install Percona-Server-server-57-${FULL_PERCONA_VERSION} Percona-Server-devel-57-${FULL_PERCONA_VERSION} Percona-Server-tokudb-57-${FULL_PERCONA_VERSION} Percona-Server-rocksdb-57-${FULL_PERCONA_VERSION}; microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum /var/lib/mysql 1
set -ex; /usr/bin/install -m 0775 -o mysql -g root -d /var/lib/mysql /var/run/mysqld /docker-entrypoint-initdb.d; find /etc/percona-server.cnf /etc/percona-server.conf.d /etc/my.cnf.d -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log|user)' | xargs -rt -0 sed -Ei 's/^(bind-address|log|user)/#&/'; printf '[mysqld]\nskip-host-cache\nskip-name-resolve\n' > /etc/my.cnf.d/docker.cnf; /usr/bin/install -m 0664 -o mysql -g root /dev/null /etc/sysconfig/mysql; echo "LD_PRELOAD=/usr/lib64/libjemalloc.so.1" >> /etc/sysconfig/mysql; echo "THP_SETTING=never" >> /etc/sysconfig/mysql; ln -s /etc/my.cnf.d /etc/mysql; chown -R mysql:root /etc/percona-server.cnf /etc/percona-server.conf.d /etc/my.cnf.d; chmod -R ug+rwX /etc/percona-server.cnf /etc/percona-server.conf.d /etc/my.cnf.d 1
microdnf -y update; microdnf -y install glibc-langpack-en 1
set -ex; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A 99DB70FAE1D7CE227FB6488205B555B38483C65D; gpg --batch --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona; gpg --batch --export --armor 99DB70FAE1D7CE227FB6488205B555B38483C65D > ${GNUPGHOME}/RPM-GPG-KEY-centosofficial; rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona ${GNUPGHOME}/RPM-GPG-KEY-centosofficial; microdnf install -y findutils; curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm; rpmkeys --checksig /tmp/percona-release.rpm; rpm -i /tmp/percona-release.rpm; rm -rf "$GNUPGHOME" /tmp/percona-release.rpm; rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY; percona-release disable all; percona-release enable ps-80 release; percona-release enable tools testing 1
set -ex; curl -Lf -o /tmp/libev.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/libev-4.24-6.el8.x86_64.rpm; rpm -i /tmp/libev.rpm; rm -rf /tmp/libev.rpm; microdnf -y install percona-xtrabackup-80-${FULL_PERCONA_XTRABACKUP_VERSION} percona-server-shared-${FULL_PERCONA_VERSION} percona-server-client-${FULL_PERCONA_VERSION} socat procps qpress;  microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum 1
export GO111MODULE=off; go get k8s.io/apimachinery/pkg/util/sets; curl -Lf -o /go/src/github.com/percona/percona-xtradb-cluster-operator/src/peer-list.go https://raw.githubusercontent.com/percona/percona-xtradb-cluster-operator/main/cmd/peer-list/main.go; go build peer-list.go 1
set -ex; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A 99DB70FAE1D7CE227FB6488205B555B38483C65D 94E279EB8D8F25B21810ADF121EA45AB2F86D6A1; gpg --batch --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona; gpg --batch --export --armor 99DB70FAE1D7CE227FB6488205B555B38483C65D > ${GNUPGHOME}/RPM-GPG-KEY-centosofficial; gpg --batch --export --armor 94E279EB8D8F25B21810ADF121EA45AB2F86D6A1 > ${GNUPGHOME}/RPM-GPG-KEY-EPEL-8; rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona ${GNUPGHOME}/RPM-GPG-KEY-centosofficial ${GNUPGHOME}/RPM-GPG-KEY-EPEL-8; microdnf install -y findutils; curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm; rpmkeys --checksig /tmp/percona-release.rpm; rpm -i /tmp/percona-release.rpm; rm -rf "$GNUPGHOME" /tmp/percona-release.rpm; rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY; percona-release enable-only tools release; percona-release enable pxc-57 ${PXC_REPO} 1
set -ex; curl -Lf -o /tmp/numactl-libs.rpm http://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/numactl-libs-2.0.12-13.el8.x86_64.rpm; curl -Lf -o /tmp/libev.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/libev-4.24-6.el8.x86_64.rpm; curl -Lf -o /tmp/jq.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/jq-1.5-12.el8.x86_64.rpm; curl -Lf -o /tmp/oniguruma.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/oniguruma-6.8.2-2.el8.x86_64.rpm; curl -Lf -o /tmp/pv.rpm http://download.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/p/pv-1.6.6-7.el8.x86_64.rpm; curl -Lf -o /tmp/socat.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/socat-1.7.4.1-1.el8.x86_64.rpm; rpmkeys --checksig /tmp/socat.rpm /tmp/numactl-libs.rpm /tmp/libev.rpm /tmp/jq.rpm /tmp/oniguruma.rpm /tmp/pv.rpm; rpm -i /tmp/socat.rpm /tmp/numactl-libs.rpm /tmp/libev.rpm /tmp/jq.rpm /tmp/oniguruma.rpm /tmp/pv.rpm; rm -rf /tmp/socat.rpm /tmp/numactl-libs.rpm /tmp/libev.rpm /tmp/jq.rpm /tmp/oniguruma.rpm /tmp/pv.rpm 1
set -ex; rpm -e --nodeps tzdata; microdnf --setopt=install_weak_deps=0 --best install -y jemalloc openssl shadow-utils hostname curl tzdata diffutils libaio which pam procps-ng qpress cracklib-dicts; microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum 1
set -ex; curl -Lf -o /tmp/nss-pam-ldapd.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/nss-pam-ldapd-0.9.9-3.el8.x86_64.rpm; rpmkeys --checksig /tmp/nss-pam-ldapd.rpm; rpm -iv /tmp/nss-pam-ldapd.rpm --nodeps; rm -rf /tmp/nss-pam-ldapd.rpm; curl -Lf -o /tmp/percona-xtradb-cluster-server.rpm https://repo.percona.com/pxc-57/yum/${PXC_REPO}/8/RPMS/x86_64/Percona-XtraDB-Cluster-server-57-${FULL_PERCONA_XTRADBCLUSTER_VERSION}.x86_64.rpm; curl -Lf -o /tmp/percona-xtradb-cluster-shared.rpm https://repo.percona.com/pxc-57/yum/${PXC_REPO}/8/RPMS/x86_64/Percona-XtraDB-Cluster-shared-57-${FULL_PERCONA_XTRADBCLUSTER_VERSION}.x86_64.rpm; curl -Lf -o /tmp/percona-xtradb-cluster-client.rpm https://repo.percona.com/pxc-57/yum/${PXC_REPO}/8/RPMS/x86_64/Percona-XtraDB-Cluster-client-57-${FULL_PERCONA_XTRADBCLUSTER_VERSION}.x86_64.rpm; curl -Lf -o /tmp/percona-xtrabackup-24.rpm https://repo.percona.com/pxb-24/yum/${PXC_REPO}/8/RPMS/x86_64/percona-xtrabackup-24-${FULL_PERCONA_XTRABACKUP_VERSION}.x86_64.rpm; rpmkeys --checksig /tmp/percona-xtrabackup-24.rpm /tmp/percona-xtradb-cluster-server.rpm /tmp/percona-xtradb-cluster-shared.rpm /tmp/percona-xtradb-cluster-client.rpm; rpm -iv /tmp/percona-xtrabackup-24.rpm /tmp/percona-xtradb-cluster-server.rpm /tmp/percona-xtradb-cluster-shared.rpm /tmp/percona-xtradb-cluster-client.rpm --nodeps; microdnf clean all; rm -rf /tmp/percona-xtrabackup-24.rpm /tmp/percona-xtradb-cluster-server.rpm /tmp/percona-xtradb-cluster-shared.rpm /tmp/percona-xtradb-cluster-client.rpm; rm -rf /usr/bin/mysqltest /usr/bin/perror /usr/bin/replace /usr/bin/resolve_stack_dump /usr/bin/resolveip; rm -rf /var/cache/dnf /var/cache/yum /var/lib/mysql /usr/lib64/mysql/plugin/debug /usr/sbin/mysqld-debug /usr/lib64/mecab /usr/lib64/mysql/mecab /usr/bin/myisam*; rpm -ql Percona-XtraDB-Cluster-client-57 | egrep -v "mysql$|mysqldump$" | xargs rm -rf 1
cp /usr/share/doc/percona-xtradb-cluster-galera/COPYING /licenses/LICENSE.galera; cp /usr/share/doc/percona-xtradb-cluster-galera/LICENSE.* /licenses/ 1
set -ex; rm -rf /etc/my.cnf.d; ln -s /etc/mysql/conf.d /etc/my.cnf.d; rm -f /etc/percona-xtradb-cluster.conf.d/*.cnf; echo '!include /etc/mysql/node.cnf' > /etc/my.cnf; echo '!includedir /etc/my.cnf.d/' >> /etc/my.cnf; echo '!includedir /etc/percona-xtradb-cluster.conf.d/' >> /etc/my.cnf; mkdir -p /etc/mysql/conf.d/ /var/log/mysql /var/lib/mysql /docker-entrypoint-initdb.d; chown -R 1001:1001 /etc/mysql/ /var/log/mysql /var/lib/mysql /docker-entrypoint-initdb.d; chmod -R g=u /etc/mysql/ /var/log/mysql /var/lib/mysql /docker-entrypoint-initdb.d 1
if [[ -n $DEBUG ]] ; then set -ex; sed -i '/\[mysqld\]/a wsrep_log_conflicts\nlog_error_verbosity=3\nwsrep_debug=1' /etc/mysql/node.cnf; mv /usr/sbin/mysqld /usr/sbin/mysqld-ps; cp /usr/local/bin/mysqld-debug /usr/sbin/mysqld; microdnf install -y net-tools nc gdb; curl -Lf -o /tmp/telnet.rpm http://vault.centos.org/centos/8/AppStream/x86_64/os/Packages/telnet-0.17-76.el8.x86_64.rpm; curl -Lf -o /tmp/percona-xtradb-cluster-debuginfo.rpm https://repo.percona.com/pxc-57/yum/${PXC_REPO}/8/RPMS/x86_64/Percona-XtraDB-Cluster-57-debuginfo-${FULL_PERCONA_XTRADBCLUSTER_VERSION}.x86_64.rpm; curl -Lf -o /tmp/percona-xtradb-cluster-server-debuginfo.rpm https://repo.percona.com/pxc-57/yum/${PXC_REPO}/8/RPMS/x86_64/Percona-XtraDB-Cluster-server-57-debuginfo-${FULL_PERCONA_XTRADBCLUSTER_VERSION}.x86_64.rpm; rpmkeys --checksig /tmp/telnet.rpm /tmp/percona-xtradb-cluster-debuginfo.rpm /tmp/percona-xtradb-cluster-server-debuginfo.rpm; rpm -i /tmp/telnet.rpm /tmp/percona-xtradb-cluster-debuginfo.rpm /tmp/percona-xtradb-cluster-server-debuginfo.rpm --nodeps; rm -rf /tmp/telnet.rpm /tmp/percona-xtradb-cluster-debuginfo.rpm /tmp/percona-xtradb-cluster-server-debuginfo.rpm; microdnf clean all; rm -rf /var/cache/dnf /var/cache/yum; fi 1
cd /app && pip install -e . 1
echo 'APT::Acquire::Retries "3";' > /etc/apt/apt.conf.d/80retries && echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/80recommends && echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/80suggests && echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/80forceyes && echo 'APT::Get::Fix-Missing "true";' > /etc/apt/apt.conf.d/80fixmissing && mv /opt/photoprism/sbin/gosu /usr/local/sbin/gosu && chown root:root /usr/local/sbin/gosu && chmod 755 /usr/local/sbin/gosu && apt-get update && apt-get -qq dist-upgrade && apt-get -qq install --no-install-recommends ca-certificates jq gpg lshw wget curl make  bash mariadb-client sqlite3 tzdata libc6 libatomic1 libheif-examples librsvg2-bin exiftool rawtherapee ffmpeg ffmpegthumbnailer libavcodec-extra && /scripts/install-darktable.sh && echo 'alias ll="ls -alh"' >> /etc/skel/.bashrc && echo 'export PS1="\u@$DOCKER_TAG:\w\$ "' >> /etc/skel/.bashrc && echo "ALL ALL=(ALL) NOPASSWD:SETENV: /scripts/entrypoint-init.sh" >> /etc/ers.d/init && cp /etc/skel/.bashrc /root/.bashrc && /scripts/create-users.sh && /scripts/cleanup.sh && cp /scripts/heif-convert.sh /usr/local/bin/heif-convert && install -d -m 0777 -o 1000 -g 1000 /var/lib/photoprism /tmp/photoprism /photoprism/originals /photoprism/import /photoprism/storage /photoprism/storage/sidecar /photoprism/storage/albums /photoprism/storage/backups /photoprism/storage/config /photoprism/storage/cache 1
echo 'APT::Acquire::Retries "3";' > /etc/apt/apt.conf.d/80retries && echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/80recommends && echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/80suggests && echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/80forceyes && echo 'APT::Get::Fix-Missing "true";' > /etc/apt/apt.conf.d/80fixmissing && apt-get update && apt-get -qq dist-upgrade && apt-get -qq install apt-utils gpg pkg-config software-properties-common ca-certificates build-essential gcc g++  bash make nano lsof lshw wget curl rsync jq git zip unzip gettext chromium chromium-driver chromium-sandbox firefox-esr sqlite3 libc6-dev libssl-dev libxft-dev libhdf5-serial-dev libpng-dev libheif-examples librsvg2-bin libzmq3-dev libx264-dev libx265-dev libnss3 libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev fonts-roboto tzdata exiftool rawtherapee ffmpeg ffmpegthumbnailer libavcodec-extra davfs2 chrpath apache2-utils && /scripts/install-nodejs.sh && /scripts/install-mariadb.sh mariadb-client && /scripts/install-tensorflow.sh && /scripts/install-darktable.sh && /scripts/install-go-tools.sh && echo 'alias go=richgo ll="ls -alh"' >> /etc/skel/.bashrc && echo 'export PS1="\u@$DOCKER_TAG:\w\$ "' >> /etc/skel/.bashrc && echo "ALL ALL=(ALL) NOPASSWD:SETENV: ALL" >> /etc/ers.d/all && cp /etc/skel/.bashrc /root/.bashrc && /scripts/create-users.sh && /scripts/cleanup.sh && cp /scripts/heif-convert.sh /usr/local/bin/heif-convert && install -d -m 0777 -o 1000 -g 1000 /var/lib/photoprism /tmp/photoprism /photoprism/originals /photoprism/import /photoprism/storage /photoprism/storage/sidecar /photoprism/storage/albums /photoprism/storage/backups /photoprism/storage/config /photoprism/storage/cache 1
wget "https://dl.photoprism.app/tensorflow/nsfw.zip?${BUILD_TAG}" -O /tmp/photoprism/nsfw.zip && wget "https://dl.photoprism.app/tensorflow/nasnet.zip?${BUILD_TAG}" -O /tmp/photoprism/nasnet.zip && wget "https://dl.photoprism.app/tensorflow/facenet.zip?${BUILD_TAG}" -O /tmp/photoprism/facenet.zip && wget "https://dl.photoprism.app/qa/testdata.zip?${BUILD_TAG}" -O /tmp/photoprism/testdata.zip 1
echo 'APT::Acquire::Retries "3";' > /etc/apt/apt.conf.d/80retries && echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/80recommends && echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/80suggests && echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/80forceyes && echo 'APT::Get::Fix-Missing "true";' > /etc/apt/apt.conf.d/80fixmissing && mv /opt/photoprism/sbin/gosu /usr/local/sbin/gosu && chown root:root /usr/local/sbin/gosu && chmod 755 /usr/local/sbin/gosu && apt-get update && apt-get -qq dist-upgrade && apt-get -qq install --no-install-recommends ca-certificates jq lshw gpg wget curl make  bash mariadb-client sqlite3 tzdata libc6 libatomic1 libheif-examples librsvg2-bin exiftool rawtherapee ffmpeg ffmpegthumbnailer libavcodec-extra && /scripts/install-darktable.sh && echo 'alias ll="ls -alh"' >> /etc/skel/.bashrc && echo 'export PS1="\u@$DOCKER_TAG:\w\$ "' >> /etc/skel/.bashrc && echo "ALL ALL=(ALL) NOPASSWD:SETENV: /scripts/entrypoint-init.sh" >> /etc/ers.d/init && cp /etc/skel/.bashrc /root/.bashrc && /scripts/create-users.sh && /scripts/cleanup.sh && cp /scripts/heif-convert.sh /usr/local/bin/heif-convert && install -d -m 0777 -o 1000 -g 1000 /var/lib/photoprism /tmp/photoprism /photoprism/originals /photoprism/import /photoprism/storage /photoprism/storage/sidecar /photoprism/storage/albums /photoprism/storage/backups /photoprism/storage/config /photoprism/storage/cache 1
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends libargon2-dev libcurl4-openssl-dev libonig-dev libreadline-dev libsodium-dev libsqlite3-dev libssl-dev libxml2-dev zlib1g-dev ;  export CFLAGS="-fstack-protector-strong" CPPFLAGS="-fstack-protector-strong" LDFLAGS="-Wl,-O1" ; docker-php-source extract; cd /usr/src/php; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; if [ ! -d /usr/include/curl ]; then ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; fi; ./configure --build="$gnuArch" --with-config-file-path="$PHP_INI_DIR" --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"  --enable-option-checking=fatal  --with-mhash  --with-pic  --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-pdo-sqlite=/usr --with-sqlite3=/usr  --with-curl --with-iconv --with-openssl --with-readline --with-zlib  --disable-phpdbg  --with-pear  $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') --with-libdir="lib/$debMultiarch"  --disable-cgi  --enable-embed  --enable-zts ; make -j "$(nproc)"; find -type f -name '*.a' -delete; make install; find /usr/local -type f -perm '/0111' -exec sh -euxc ' strip --strip-all "$@" || : ' -- '{}' + ; make clean;  cp -v php.ini-* "$PHP_INI_DIR/";  cd /; docker-php-source delete;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*;  pecl update-channels; rm -rf /tmp/pear ~/.pearrc;  php --version 1
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends libargon2-dev libcurl4-openssl-dev libonig-dev libreadline-dev libsodium-dev libsqlite3-dev libssl-dev libxml2-dev zlib1g-dev ;  export CFLAGS="-fstack-protector-strong" CPPFLAGS="-fstack-protector-strong" LDFLAGS="-Wl,-O1" ; docker-php-source extract; cd /usr/src/php; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; if [ ! -d /usr/include/curl ]; then ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; fi; ./configure --build="$gnuArch" --with-config-file-path="$PHP_INI_DIR" --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"  --enable-option-checking=fatal  --with-mhash  --with-pic  --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-pdo-sqlite=/usr --with-sqlite3=/usr  --with-curl --with-iconv --with-openssl --with-readline --with-zlib  --disable-phpdbg  --with-pear  $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') --with-libdir="lib/$debMultiarch"  --disable-cgi  --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data ; make -j "$(nproc)"; find -type f -name '*.a' -delete; make install; find /usr/local -type f -perm '/0111' -exec sh -euxc ' strip --strip-all "$@" || : ' -- '{}' + ; make clean;  cp -v php.ini-* "$PHP_INI_DIR/";  cd /; docker-php-source delete;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*;  pecl update-channels; rm -rf /tmp/pear ~/.pearrc;  php --version 1
apt-get update && apt-get install -y iproute2 curl libmysqlclient20 unzip git zend-server-nginx=2021.0.0+b74 && rm -rf /var/lib/apt/lists/* && /usr/local/zend/bin/zendctl.sh stop 1
apt-get update && apt-get install -y curl libmysqlclient18 unzip git zend-server-php-5.6=8.5.17+b19 && rm -rf /var/lib/apt/lists/* && /usr/local/zend/bin/zendctl.sh stop 1
apt-get update && apt-get install -y curl libmysqlclient20 unzip git zend-server-php-7.1=9.1.12+b211 && rm -rf /var/lib/apt/lists/* && /usr/local/zend/bin/zendctl.sh stop 1
apt-get update && apt-get -y install gnupg wget aptitude apt-utils && cd /repos_installer_nightly && ./install_zs.sh 7.2 --automatic && apt-get install -y libmysqlclient20 unzip git curl net-tools && rm -rf /var/lib/apt/lists/* && /usr/local/zend/bin/zendctl.sh stop 1
/usr/sbin/a2enconf drop-http-proxy-header && /usr/sbin/a2enmod headers 1
/usr/local/zend/bin/php /usr/local/zend/bin/composer.phar self-update && /usr/local/zend/bin/php /usr/local/zend/bin/composer.phar update 1
apt-get install -y libmysqlclient18 unzip git zend-server-nginx-php-7.2=2018.0.0+b464 && /usr/local/zend/bin/zendctl.sh stop 1
apt-get update && apt-get install -y iproute2 curl libmysqlclient20 unzip git zend-server-nginx=2019.0.7+b403 && rm -rf /var/lib/apt/lists/* && /usr/local/zend/bin/zendctl.sh stop 1
apt-get install -y libmysqlclient18 unzip git zend-server-nginx-php-7.1=9.1.9+b197 && /usr/local/zend/bin/zendctl.sh stop 1
mkdir -p /var/pm2 1
apk update && apk add bash git curl python python3 php5 && rm -rf /var/cache/apk/* 1
ln -s /usr/bin/php5 /usr/bin/php 1
npm install -g mocha@3.5 1
export GOOS="${TARGETOS}"; export GOARCH="${TARGETARCH}"; if [ "${TARGETARCH}" = "arm" ] && [ "${TARGETVARIANT}" ]; then export GOARM="${TARGETVARIANT#v}"; fi; CGO_ENABLED=0 go build 1
mkdir /tmp/destination 1
ln -s /tmp/destination /tmp/link 1
apt-get update --fix-missing && apt-get install -qq dialog apt-utils curl build-essential git wget apt-transport-https ca-certificates gnupg-agent software-properties-common 1
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" && apt-get update && apt-get install -y docker-ce-cli 1
curl -fsSL https://deb.nodesource.com/setup_14.x | bash - && apt-get install -y nodejs 1
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && apt-get update && apt-get -y install yarn 1
cd /tmp && wget -q https://dl.google.com/go/go1.17.6.linux-amd64.tar.gz && tar -xf go1.17.6.linux-amd64.tar.gz && mv go /usr/local 1
chmod +x /run.sh 1
./scripts/build 1
yarn install --frozen-lockfile --production=true --no-progress 1
set -eux;  wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"; echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -; mkdir -p /usr/src/postgresql; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2;  apk add --no-cache --virtual .build-deps bison coreutils dpkg-dev dpkg flex gcc krb5-dev libc-dev libedit-dev libxml2-dev libxslt-dev linux-headers make openldap-dev openssl-dev perl-dev perl-ipc-run perl-utils python3-dev tcl-dev util-linux-dev zlib-dev icu-dev ;  cd /usr/src/postgresql; awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'; wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'; ./configure --build="$gnuArch" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu ; make -j "$(nproc)" world; make install-world; make -C contrib install;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' | grep -v -e perl -e python -e tcl )"; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash su-exec tzdata zstd icu-data-full ; apk del --no-network .build-deps; cd /; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ;  postgres --version 1
apt-get update -y && apt install -y --no-install-recommends libpq-dev zlib1g-dev jq gcc libnuma-dev && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && echo 'golang-go golang-go/dashboard boolean false' | debconf-set-selections && DEBIAN_FRONTEND=noninteractive apt-get install -y curl git zsh=5.1.1-1ubuntu2.2 mercurial subversion golang jq nodejs ruby python python-virtualenv  locales 1
apt-get update && echo 'golang-go golang-go/dashboard boolean false' | debconf-set-selections && DEBIAN_FRONTEND=noninteractive apt-get install -y curl git zsh=5.0.2-3ubuntu6.2 mercurial subversion golang jq node ruby python python-virtualenv 1
apt-get update && echo 'golang-go golang-go/dashboard boolean false' | debconf-set-selections && DEBIAN_FRONTEND=noninteractive apt-get install -y curl git zsh=5.4.2-3ubuntu3 mercurial subversion golang jq nodejs ruby python python-virtualenv  locales 1
apt-get update && apt-get install -y --no-install-recommends apt-utils apt-utils libc6 libcurl4 ca-certificates libgcc1 libicu60 libssl1.0.0 libstdc++6 libtinfo5 libunwind8 libuuid1 libcroco3 libgraphite2-3 zlib1g curl git apt-transport-https locales wget && apt-get clean && rm -rf /var/lib/apt/lists/* 1
yum install -y glibc libcurl ca-certificates libgcc libicu openssl libstdc++ ncurses-base libunwind uuid zlib which curl git wget && yum clean all 1
apt-get update && apt-get install -y --no-install-recommends apt-utils apt-utils libc6 libcurl3 ca-certificates libgcc1 libicu55 libssl1.0.0 libstdc++6 libtinfo5 libunwind8 libuuid1 libcroco3 libgraphite2-3 zlib1g curl git apt-transport-https locales wget && apt-get clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get -y install --no-install-recommends apt-utils 2>&1 && apt-get -y install --no-install-recommends git procps lsb-release && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y dpkg-dev fakeroot && apt-get clean && rm -rf /var/lib/apt/lists/* 1
git clone -b v0.13.0 https://github.com/apache/predictionio.git 1
bash ./make-distribution.sh -Dscala.version=2.11.12 -Dspark.version=2.2.3 -Dhadoop.version=2.7.7 -Delasticsearch.version=5.5.3 --with-deb && dpkg -i ./assembly/target/predictionio_*.deb && cp -r ./python /usr/share/predictionio && mkdir /var/log/predictionio && rm -rf /opt/src/predictionio/* 1
cp /etc/predictionio/pio-env.sh /etc/predictionio/pio-env.sh.orig && echo "#!/usr/bin/env bash" > /etc/predictionio/pio-env.sh 1
curl -o /usr/share/predictionio/lib/postgresql-42.2.4.jar http://central.maven.org/maven2/org/postgresql/postgresql/42.2.4/postgresql-42.2.4.jar && echo "POSTGRES_JDBC_DRIVER=/usr/share/predictionio/lib/postgresql-42.2.4.jar" >> /etc/predictionio/pio-env.sh && echo "MYSQL_JDBC_DRIVER=/usr/share/predictionio/lib/mysql-connector-java-8.0.12.jar" >> /etc/predictionio/pio-env.sh 1
curl -o /opt/src/spark-2.2.3.tgz http://archive.apache.org/dist/spark/spark-2.2.3/spark-2.2.3-bin-hadoop2.7.tgz && tar zxvf /opt/src/spark-2.2.3.tgz && echo "SPARK_HOME="`pwd`/`ls -d spark*` >> /etc/predictionio/pio-env.sh && rm -rf /opt/src 1
su node -c "npm install -g pnpm@6 ts-node" 1
apt-get update && apt-get install -y autoconf autotools-dev build-essential bzip2 ccache cmake curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel pkg-config time wget maven openjdk-11-jdk openjdk-17-jdk python2 python3-dev python3-setuptools python3-pip python3-venv && apt-get clean 1
apt-get update && apt-get install -y autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget maven openjdk-8-jdk && apt-get clean 1
gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB 1
\curl -sSL https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer | bash -s master 1
/bin/bash -l -c "rvm install 2.5.1" 1
/bin/bash -l -c "rvm install 2.6.0" 1
/bin/bash -l -c "rvm install 2.7.0" 1
/bin/bash -l -c "rvm install 3.0.0" 1
/bin/bash -l -c "rvm install 3.1.0" 1
/bin/bash -l -c "rvm install jruby-9.2.20.1" 1
/bin/bash -l -c "rvm install jruby-9.3.3.0" 1
/bin/bash -l -c "rvm install jruby-9.3.4.0" 1
apt-get update && apt-get install -y autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget && apt-get clean 1
apt-get update && apt-get install -y ca-certificates && apt-get clean 1
apt-get update && apt-get install -y libunwind8 libicu63 && apt-get clean 1
wget -q https://dot.net/v1/dotnet-install.sh && chmod u+x dotnet-install.sh && ./dotnet-install.sh --version 3.1.415 && ./dotnet-install.sh --version 6.0.100 && ln -s /root/.dotnet/dotnet /usr/local/bin 1
wget -q www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe 1
apt-get update && apt-get install -y autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget re2c sqlite3 vim libonig-dev libsqlite3-dev && apt-get clean 1
apt-get clean && apt-get update && apt-get install -y --force-yes php libcurl4-openssl-dev libgmp-dev libgmp3-dev libssl-dev libxml2-dev unzip zlib1g-dev pkg-config && apt-get clean 1
ln -sf /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h 1
wget https://ftp.gnu.org/gnu/bison/bison-3.0.1.tar.gz -O /var/local/bison-3.0.1.tar.gz 1
cd /var/local && tar -zxvf bison-3.0.1.tar.gz && cd /var/local/bison-3.0.1 && ./configure && make && make install 1
curl -sS https://getcomposer.org/installer | php 1
mv composer.phar /usr/local/bin/composer 1
git clone https://github.com/php/php-src 1
cd php-src && git checkout php-8.0.0 && ./buildconf --force 1
cd php-src && ./configure --enable-bcmath --enable-mbstring --with-gmp --with-openssl --with-zlib --prefix=/usr/local/php-8.0 && make && make install && make clean 1
cd php-src && ./configure --enable-bcmath --enable-mbstring --enable-maintainer-zts --with-gmp --with-openssl --with-zlib --prefix=/usr/local/php-8.0-zts && make && make install && make clean 1
wget -O phpunit https://phar.phpunit.de/phpunit-9.phar && chmod +x phpunit && cp phpunit /usr/local/php-8.0/bin && mv phpunit /usr/local/php-8.0-zts/bin 1
cd php-src && git checkout php-8.1.2 && ./buildconf --force 1
cd php-src && ./configure --enable-bcmath --enable-mbstring --with-gmp --with-openssl --with-zlib --prefix=/usr/local/php-8.1 && make && make install && make clean 1
cd php-src && ./configure --enable-bcmath --enable-mbstring --enable-maintainer-zts --with-gmp --with-openssl --with-zlib --prefix=/usr/local/php-8.1-zts && make && make install && make clean 1
apt-get clean && apt-get update && apt-get install -y --force-yes valgrind && apt-get clean 1
apk update && apk upgrade && apk add --no-cache cmake make build-base curl python3-dev libffi-dev perl linux-headers bash alpine-sdk 1
curl -O -L https://boostorg.jfrog.io/artifactory/main/release/1.72.0/source/boost_1_72_0.tar.gz && tar xfz boost_1_72_0.tar.gz && cd /boost_1_72_0 && ./bootstrap.sh --with-libraries=program_options,regex,system,python --with-python=/usr/bin/python3 && ./b2  cxxflags=-fPIC link=static threading=multi variant=release install && rm -rf /boost_1_72_0.tar.gz /boost_1_72_0 1
curl -O -L https://zlib.net/zlib-1.2.12.tar.gz  && tar xfz zlib-1.2.12.tar.gz && cd zlib-1.2.12 && CFLAGS="-fPIC -O3" ./configure && make -j4 && make install && rm -rf /zlib-1.2.12.tar.gz /zlib-1.2.12 1
curl -O -L https://github.com/openssl/openssl/archive/OpenSSL_1_1_0j.tar.gz && tar xfz OpenSSL_1_1_0j.tar.gz && cd openssl-OpenSSL_1_1_0j/ && ./Configure -fPIC no-shared linux-x86_64 && make -j8 && make install && rm -rf /OpenSSL_1_1_0j.tar.gz /openssl-OpenSSL_1_1_0j 1
curl -O -L  https://github.com/curl/curl/releases/download/curl-7_61_0/curl-7.61.0.tar.gz && tar xvfz curl-7.61.0.tar.gz && cd curl-7.61.0 && CFLAGS=-fPIC ./configure && make -j8 && make install && rm -rf /curl-7.61.0.tar.gz /curl-7.61.0 1
curl -L https://github.com/google/snappy/archive/1.1.8.tar.gz --output snappy-1.1.8.tar.gz && tar xvfz snappy-1.1.8.tar.gz && cd snappy-1.1.8 && CXXFLAGS="-fPIC -O3" cmake . && make -j8 && make install && rm -rf /snappy-1.1.8 /snappy-1.1.8.tar.gz 1
pip3 install wheel twine 1
adduser pulsar -D && addgroup pulsar abuild 1
apt-get update -y && apt-get install -y curl g++ make python-dev libxml2-utils git 1
apt-get install -y dpkg-dev 1
curl -O -L  https://github.com/google/protobuf/releases/download/v3.20.0/protobuf-cpp-3.20.0.tar.gz && tar xvfz protobuf-cpp-3.20.0.tar.gz && cd protobuf-3.20.0/ && CXXFLAGS=-fPIC ./configure && make -j8 && make install && ldconfig && rm -rf /protobuf-cpp-3.20.0.tar.gz /protobuf-3.20.0 1
curl -O -L  https://github.com/libexpat/libexpat/archive/R_2_2_0.tar.gz && tar xfvz R_2_2_0.tar.gz && cd libexpat-R_2_2_0/expat && ./buildconf.sh && CFLAGS=-fPIC CXXFLAGS=-fPIC ./configure  && make -j8 && make installlib && rm -rf /R_2_2_0.tar.gz /libexpat-R_2_2_0 1
curl -O -L https://github.com/Kitware/CMake/archive/v3.12.1.tar.gz && tar xvfz v3.12.1.tar.gz && cd CMake-3.12.1 && ./configure && make -j8 && make install && rm -rf /v3.12.1.tar.gz /CMake-3.12.1 1
yum update -y && yum install -y gcc-c++ make cmake git rpm-build python-devel createrepo libstdc++-static.x86_64 1
apk add cmake 1
mkdir /pulsar 1
apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:openjdk-r/ppa && apt-get update && apt-get install -y tig g++ cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev google-mock libgtest-dev libboost-dev libboost-program-options-dev libboost-system-dev libboost-python-dev libxml2-utils wget curl doxygen openjdk-17-jdk-headless clang-format gnupg2 golang-go zip unzip libzstd-dev libsnappy-dev wireshark-dev 1
cd /usr/src/googletest && cmake . && make && make install 1
git clone https://github.com/google/gtest-parallel.git 1
curl -O -L https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protobuf-cpp-3.17.3.tar.gz && tar xvfz protobuf-cpp-3.17.3.tar.gz && cd protobuf-3.17.3/ && CXXFLAGS=-fPIC ./configure && make -j8 && make install && cd .. && rm -rf protobuf-3.17.3/ protobuf-cpp-3.17.3.tar.gz 1
(curl -sSL https://rvm.io/mpapis.asc | gpg --import -) && (curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -) && (curl -sSL https://get.rvm.io | bash -s stable) 1
rvm install 2.4.1 1
curl -sL https://deb.nodesource.com/setup_12.x | bash - 1
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - 1
apt-get update && apt-get install yarn 1
wget https://artifacts.crowdin.com/repo/deb/crowdin.deb -O crowdin.deb 1
dpkg -i crowdin.deb 1
curl https://bootstrap.pypa.io/get-pip.py  | python3 - 1
pip3 install pdoc 1
wget --no-verbose -O /tmp/apache-maven-3.6.3-bin.tar.gz http://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz 1
tar xzf /tmp/apache-maven-3.6.3-bin.tar.gz  -C /opt/ && ln -s /opt/apache-maven-3.6.3 /opt/maven && ln -s /opt/maven/bin/mvn /usr/local/bin 1
unset MAVEN_VERSION 1
groupadd -g 10001 pulsar 1
adduser -u 10000 --gid 10001 --disabled-login --disabled-password --gecos '' pulsar 1
mv /apache-pulsar-* /pulsar 1
chown -R root:root /pulsar 1
chmod a+rx /pulsar/bin/* 1
sed -i "s|http://archive\.ubuntu\.com/ubuntu/|${UBUNTU_MIRROR:-mirror://mirrors.ubuntu.com/mirrors.txt}|g" /etc/apt/sources.list && apt-get update && apt-get -y dist-upgrade && apt-get -y install openjdk-17-jdk-headless 1
echo networkaddress.cache.ttl=1 >> /usr/lib/jvm/java-17-openjdk-amd64/conf/security/java.security 1
apt-get install -y python3-kazoo python3-protobuf python3-yaml && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 1
apt-get install -y supervisor procps curl less netcat dnsutils iputils-ping 1
mkdir -p /var/log/pulsar && mkdir -p /var/run/supervisor/ && mkdir -p /pulsar/ssl 1
mv /etc/supervisord/conf.d/supervisord.conf /etc/supervisord.conf 1
chown -R pulsar:0 /pulsar && chmod -R g=u /pulsar 1
apt-get -y --purge autoremove && apt-get autoclean && apt-get clean && rm -rf /var/lib/apt/lists/* 1
rm -f /etc/apt/apt.conf.d/docker-clean 1
--mount=target=/var/lib/apt/lists,type=cache --mount=target=/var/cache/apt,type=cache /build-scripts/install-packages.sh 1
GOLANG_VERSION=1.17 GOLANG_SHA256=6bf89fc4f5ad763871cf7eac80a2d594492de7a818303283f1366a7f6a30372d /build-scripts/install-go.sh 1
--mount=target=/var/lib/apt/lists,type=cache --mount=target=/var/cache/apt,type=cache NODE_VERSION=10.x NODE_DISTRO=bionic YARN_VERSION=1.21.1 /build-scripts/install-node.sh 1
--mount=target=/var/lib/apt/lists,type=cache --mount=target=/var/cache/apt,type=cache PYTHON_VERSION=3.7 PIPENV_VERSION=2018.11.26 AWSCLI_VERSION=1.17.9 WHEEL_VERSION=0.34.2 TWINE_VERSION=3.1.1 /build-scripts/install-python.sh 1
PROTOC_VERSION=3.20.1 PROTOC_SHA256=3a0e900f9556fbcac4c3a913a00d07680f0fdf6b990a341462d822247b265562 PROTOC_GEN_GO_VERSION=1.5.2 NODEJS_GRPC_VERSION=1.24.2 NODEJS_GRPC_TOOLS_VERSION=1.8.1 PYTHON_GRPCIO_VERSION=1.46.3 PYTHON_GRPCIO_TOOLS_VERSION=1.46.3 /build-scripts/install-protobuf-tools.sh 1
version=1.42.1 && curl -fsSL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /go/bin v$version && golangci-lint version 1
version=0.0.25 && curl -fsSLO https://github.com/pulumi/pulumictl/releases/download/v$version/pulumictl-v$version-linux-amd64.tar.gz && tar -xzf pulumictl-v$version-linux-amd64.tar.gz --directory /usr/local/bin --no-same-owner pulumictl && rm -f pulumictl-v$version-linux-amd64.tar.gz && pulumictl version 1
groupadd --gid 1000 user && useradd --uid 1000 --gid 1000 --shell /bin/bash -m user && mkdir -p /etc/ers.d && echo "user ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/ers.d/user && chmod 0440 /etc/ers.d/user 1
mkdir -p /go/bin && chown -R user: /go && mkdir -p $HOME/.pulumi/bin && chown -R user: $HOME/.pulumi 1
echo "export PATH=$HOME/.pulumi:$HOME/.pulumi/bin:$GOPATH/bin:/usr/local/go/bin:$PATH" >> ~/.bashrc && echo "alias l='ls -aF'" >> ~/.bash_aliases && echo "alias ll='ls -ahlF'" >> ~/.bash_aliases && echo "alias ls='ls --color=auto --group-directories-first'" >> ~/.bash_aliases 1
apt-get update -y && apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git && rm -rf /var/lib/apt/lists/* 1
eval "$(pyenv init -)" 1
set -eux;  dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in 'amd64') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-linux64.tar.bz2'; sha256='172a928b0096a7e00b7d58f523f57300c35c3de7f822491e2a7bc845375c23f8'; ;; 'arm64') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-aarch64.tar.bz2'; sha256='aff4e4dbab53448f662cd01acb2251571d60f836d2f48382a7d8da54ca5b3442'; ;; 'i386') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-linux32.tar.bz2'; sha256='bbf4e7343d43c8217099a9bffeed6a1781f4b5a3e186ed1a0befca65e647aeb9'; ;; 's390x') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-s390x.tar.bz2'; sha256='62481dd3c6472393ca05eb3a0880c96e4f5921747157607dbaa772a7369cab77'; ;; *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;; esac;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends libexpat1 libncurses5 libncursesw6 libsqlite3-0 ;  wget -O pypy.tar.bz2 "$url" --progress=dot:giga; echo "$sha256 *pypy.tar.bz2" | sha256sum --check --strict -; mkdir /opt/pypy; tar -xjC /opt/pypy --strip-components=1 -f pypy.tar.bz2; find /opt/pypy/lib* -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +; rm pypy.tar.bz2;  ln -sv '/opt/pypy/bin/pypy' /usr/local/bin/;  pypy --version;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /opt/pypy -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*; pypy --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' + 1
set -ex;  wget -O get-pip.py "$PYTHON_GET_PIP_URL"; echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -;  pipVersion="$(pypy -c 'import ensurepip; print(ensurepip._PIP_VERSION)')"; setuptoolsVersion="$(pypy -c 'import ensurepip; print(ensurepip._SETUPTOOLS_VERSION)')";  pypy get-pip.py --disable-pip-version-check --no-cache-dir "pip == $pipVersion" "setuptools == $setuptoolsVersion" ; pip --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' +; rm -f get-pip.py 1
set -eux;  dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in 'amd64') url='https://downloads.python.org/pypy/pypy3.9-v7.3.9-linux64.tar.bz2'; sha256='46818cb3d74b96b34787548343d266e2562b531ddbaf330383ba930ff1930ed5'; ;; 'arm64') url='https://downloads.python.org/pypy/pypy3.9-v7.3.9-aarch64.tar.bz2'; sha256='2e1ae193d98bc51439642a7618d521ea019f45b8fb226940f7e334c548d2b4b9'; ;; 'i386') url='https://downloads.python.org/pypy/pypy3.9-v7.3.9-linux32.tar.bz2'; sha256='0de4b9501cf28524cdedcff5052deee9ea4630176a512bdc408edfa30914bae7'; ;; 's390x') url='https://downloads.python.org/pypy/pypy3.9-v7.3.9-s390x.tar.bz2'; sha256='774dca83bcb4403fb99b3d155e7bd572ef8c52b9fe87a657109f64e75ad71732'; ;; *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;; esac;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends bzip2 wget libexpat1 libncurses5 libncursesw6 libsqlite3-0 ;  wget -O pypy.tar.bz2 "$url" --progress=dot:giga; echo "$sha256 *pypy.tar.bz2" | sha256sum --check --strict -; mkdir /opt/pypy; tar -xjC /opt/pypy --strip-components=1 -f pypy.tar.bz2; find /opt/pypy/lib* -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +; rm pypy.tar.bz2;  ln -sv '/opt/pypy/bin/pypy3' /usr/local/bin/;  pypy3 --version;  cd /opt/pypy/lib/pypy3.9; if [ -f _gdbm_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev libgdbm-dev; pypy3 _gdbm_build.py; fi; if [ -f _ssl_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev libssl-dev; pypy3 _ssl_build.py; fi; if [ -f _lzma_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev liblzma-dev; pypy3 _lzma_build.py; fi; if [ -f _sqlite3_build.py ]; then apt-get install -y --no-install-recommends gcc libc6-dev libsqlite3-dev; pypy3 _sqlite3_build.py; fi;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /opt/pypy -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*; pypy3 --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' + 1
set -eux;  dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in 'amd64') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-linux64.tar.bz2'; sha256='172a928b0096a7e00b7d58f523f57300c35c3de7f822491e2a7bc845375c23f8'; ;; 'arm64') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-aarch64.tar.bz2'; sha256='aff4e4dbab53448f662cd01acb2251571d60f836d2f48382a7d8da54ca5b3442'; ;; 'i386') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-linux32.tar.bz2'; sha256='bbf4e7343d43c8217099a9bffeed6a1781f4b5a3e186ed1a0befca65e647aeb9'; ;; 's390x') url='https://downloads.python.org/pypy/pypy2.7-v7.3.9-s390x.tar.bz2'; sha256='62481dd3c6472393ca05eb3a0880c96e4f5921747157607dbaa772a7369cab77'; ;; *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;; esac;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends bzip2 wget libexpat1 libncurses5 libncursesw6 libsqlite3-0 ;  wget -O pypy.tar.bz2 "$url" --progress=dot:giga; echo "$sha256 *pypy.tar.bz2" | sha256sum --check --strict -; mkdir /opt/pypy; tar -xjC /opt/pypy --strip-components=1 -f pypy.tar.bz2; find /opt/pypy/lib* -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +; rm pypy.tar.bz2;  ln -sv '/opt/pypy/bin/pypy' /usr/local/bin/;  pypy --version;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /opt/pypy -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; rm -rf /var/lib/apt/lists/*; pypy --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' + 1
set -ex; apt-get update; apt-get install -y --no-install-recommends wget; rm -rf /var/lib/apt/lists/*;  wget -O get-pip.py "$PYTHON_GET_PIP_URL"; echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -;  pipVersion="$(pypy -c 'import ensurepip; print(ensurepip._PIP_VERSION)')"; setuptoolsVersion="$(pypy -c 'import ensurepip; print(ensurepip._SETUPTOOLS_VERSION)')";  pypy get-pip.py --disable-pip-version-check --no-cache-dir "pip == $pipVersion" "setuptools == $setuptoolsVersion" ; apt-get purge -y --auto-remove wget; pip --version;  find /opt/pypy -depth \( \( -type d -a \( -name test -o -name tests \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' +; rm -f get-pip.py 1
--mount=type=cache,id=apt-dev,target=/var/cache/apt apt-get update && apt-get install -y --no-install-recommends build-essential ca-certificates ccache cmake curl git libjpeg-dev libpng-dev && rm -rf /var/lib/apt/lists/* 1
/usr/sbin/update-ccache-symlinks 1
mkdir /opt/ccache && ccache --set-config=cache_dir=/opt/ccache 1
curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && chmod +x ~/miniconda.sh && ~/miniconda.sh -b -p /opt/conda && rm ~/miniconda.sh && /opt/conda/bin/conda install -y python=3.8 conda-build pyyaml numpy ipython && /opt/conda/bin/conda clean -ya 1
git submodule update --init --recursive --jobs 0 1
--mount=type=cache,target=/opt/ccache TORCH_CUDA_ARCH_LIST="3.5 5.2 6.0 6.1 7.0+PTX 8.0" TORCH_NVCC_FLAGS="-Xfatbin -compress-all" CMAKE_PREFIX_PATH="$(dirname $(which conda))/../" python setup.py install 1
/opt/conda/bin/conda install -c "pytorch-nightly" -c "nvidia" -y python=3.8 pytorch torchvision torchtext "cudatoolkit=11.3" && /opt/conda/bin/conda clean -ya 1
/opt/conda/bin/pip install torchelastic 1
--mount=type=cache,id=apt-final,target=/var/cache/apt apt-get update && apt-get install -y --no-install-recommends ca-certificates libjpeg-dev libpng-dev && rm -rf /var/lib/apt/lists/* 1
bash ./install_base.sh && rm install_base.sh 1
yum -y remove git 1
yum -y remove git-* 1
yum -y install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.9-1.x86_64.rpm 1
bash ./install_devtoolset.sh && rm install_devtoolset.sh 1
if [ -n "${GLIBC_VERSION}" ]; then bash ./install_glibc.sh; fi 1
rm install_glibc.sh 1
bash ./install_user.sh && rm install_user.sh 1
bash ./install_conda.sh && rm install_conda.sh 1
rm /opt/conda/requirements-ci.txt 1
if [ -n "${PROTOBUF}" ]; then bash ./install_protobuf.sh; fi 1
rm install_protobuf.sh 1
if [ -n "${DB}" ]; then bash ./install_db.sh; fi 1
rm install_db.sh 1
if [ -n "${VISION}" ]; then bash ./install_vision.sh; fi 1
rm install_vision.sh 1
bash ./install_rocm.sh 1
rm install_rocm.sh 1
if [ -n "${CMAKE_VERSION}" ]; then bash ./install_cmake.sh; fi 1
rm install_cmake.sh 1
if [ -n "${NINJA_VERSION}" ]; then bash ./install_ninja.sh; fi 1
rm install_ninja.sh 1
bash ./install_cache.sh && rm install_cache.sh 1
apt-get update && apt-get install -y apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends apt-utils gnupg2 curl && curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list & apt-get purge --autoremove -y curl && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends cuda-cudart-$CUDA_PKG_VERSION cuda-compat-10-1 && ln -s cuda-10.1 /usr/local/cuda && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends cuda-libraries-$CUDA_PKG_VERSION cuda-nvtx-$CUDA_PKG_VERSION libcublas10=10.2.1.243-1 libnccl2=$NCCL_VERSION-1+cuda10.1 && apt-mark hold libnccl2 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION libnccl-dev=$NCCL_VERSION-1+cuda10.1 libcublas-dev=10.2.1.243-1 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends libcudnn7=$CUDNN_VERSION-1+cuda10.1 libcudnn7-dev=$CUDNN_VERSION-1+cuda10.1 && apt-mark hold libcudnn7 && rm -rf /var/lib/apt/lists/* 1
rm /etc/apt/sources.list.d/cuda.list && rm /etc/apt/sources.list.d/nvidia-ml.list 1
apt-get update &&  apt-get install -y curl ca-certificates vim  git bzip2 libx11-6 && rm -rf /var/lib/apt/lists/* 1
adduser --disabled-password --gecos '' --shell /bin/bash user && chown -R user:user /app 1
echo "user ALL=(ALL) NOPASSWD:ALL" > /etc/ers.d/90-user 1
chmod 777 /home/user 1
curl -so ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && chmod +x ~/miniconda.sh && ~/miniconda.sh -b -p ~/miniconda && rm ~/miniconda.sh 1
/home/user/miniconda/bin/conda install conda-build && /home/user/miniconda/bin/conda create -y --name py36 python=3.6.5 && /home/user/miniconda/bin/conda clean -ya 1
conda install -y -c pytorch cudatoolkit=10.1 "pytorch=1.4.0=py3.6_cuda10.1.243_cudnn7.6.3_0" torchvision=0.5.0=py36_cu101 && conda clean -ya 1
conda install -y h5py=2.8.0 && conda clean -ya 1
pip install h5py-cache==1.0 1
pip install torchnet==0.0.4 1
conda install -y requests=2.19.1 && conda clean -ya 1
conda install -y graphviz=2.40.1 python-graphviz=0.8.4 && conda clean -ya 1
apt-get update &&  apt-get install -y --no-install-recommends libgtk2.0-0 libcanberra-gtk-module &&  rm -rf /var/lib/apt/lists/* 1
conda install -y -c menpo opencv3=3.1.0 && conda clean -ya 1
CPATH=/usr/local/cuda/include:$CPATH && LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH && DYLD_LIBRARY_PATH=/usr/local/cuda/lib:$DYLD_LIBRARY_PATH 1
pip install scipy 1
pip install --no-index torch-scatter -f https://data.pyg.org/whl/torch-1.4.0+cu101.html && pip install --no-index torch-sparse -f https://data.pyg.org/whl/torch-1.4.0+cu101.html && pip install --no-index torch-cluster -f https://data.pyg.org/whl/torch-1.4.0+cu101.html && pip install --no-index torch-spline-conv -f https://data.pyg.org/whl/torch-1.4.0+cu101.html && pip install torch-geometric 1
apk --update-cache add boost-dev cmake g++ libtorrent-rasterbar-dev ninja qt6-qtbase-dev qt6-qttools-dev 1
if [ "$QBT_VERSION" = "devel" ]; then wget https://github.com/qbittorrent/qBittorrent/archive/refs/heads/master.zip && unzip master.zip && cd qBittorrent-master ; else wget "https://github.com/qbittorrent/qBittorrent/archive/refs/tags/release-${QBT_VERSION}.tar.gz" && tar -xf "release-${QBT_VERSION}.tar.gz" && cd "qBittorrent-release-${QBT_VERSION}" ; fi && cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGUI=OFF -DQT6=ON -DSTACKTRACE=OFF && cmake --build build && cmake --install build 1
apk --no-cache add doas libtorrent-rasterbar python3 qt6-qtbase tini 1
adduser -D -H -s /sbin/nologin -u 1000 qbtUser && echo "permit nopass :root" >> "/etc/doas.d/doas.conf" 1
apt-get update && apt-get install --no-install-recommends -y  openssh-server && rm -rf /var/lib/apt/lists/* 1
mkdir /var/run/sshd 1
sed -i 's/PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config 1
echo 'UseDNS no' >> /etc/ssh/sshd_config 1
rm /usr/sbin/policy-rc.d 1
groupadd vagrant 1
useradd -c "Vagrant" -g vagrant -d /home/vagrant -m -s /bin/bash vagrant 1
echo 'root:vagrant' | chpasswd 1
echo 'vagrant:vagrant' | chpasswd 1
echo 'vagrant ALL=(ALL) NOPASSWD: ALL' > /etc/ers.d/vagrant 1
mkdir /home/vagrant/.ssh 1
chmod 0600 /home/vagrant/.ssh/authorized_keys 1
chown -R vagrant:vagrant /home/vagrant/.ssh 1
chmod 0700 /home/vagrant/.ssh 1
rm /etc/dpkg/dpkg.cfg.d/excludes 1
apt-get -qq install -y apt-utils > /dev/null 1
apt-get -qq install -y moreutils 1
chronic apt-get -qq install -y afnix algol68g aplus-fsf aspectj && chronic apt-get clean 1
chronic apt-get -qq install -y asymptote ats2-lang bash bc && chronic apt-get clean 1
chronic apt-get -qq install -y bf bison bsdgames bsh && chronic apt-get clean 1
chronic apt-get -qq install -y clisp clojure cmake coffeescript && chronic apt-get clean 1
chronic apt-get -qq install -y curl dafny dc dhall && chronic apt-get clean 1
chronic apt-get -qq install -y elixir emacs-nox erlang f2c && chronic apt-get clean 1
chronic apt-get -qq install -y fish flex fp-compiler fsharp && chronic apt-get clean 1
chronic apt-get -qq install -y g++ gambas3-gb-pcre gambas3-scripter gap && chronic apt-get clean 1
chronic apt-get -qq install -y gawk gcc gdb gdc && chronic apt-get clean 1
chronic apt-get -qq install -y generator-scripting-language genius gforth gfortran && chronic apt-get clean 1
chronic apt-get -qq install -y ghc ghostscript gnat gnu-smalltalk && chronic apt-get clean 1
chronic apt-get -qq install -y gnucobol4 gnuplot gobjc golang && chronic apt-get clean 1
chronic apt-get -qq install -y gpt groff groovy guile-3.0 && chronic apt-get clean 1
chronic apt-get -qq install -y gzip haxe icont iconx && chronic apt-get clean 1
chronic apt-get -qq install -y intercal iverilog jasmin-sable jq && chronic apt-get clean 1
chronic apt-get -qq install -y kotlin ksh libgd-dev libpng-dev && chronic apt-get clean 1
chronic apt-get -qq install -y libpolyml-dev lisaac livescript llvm && chronic apt-get clean 1
chronic apt-get -qq install -y lua5.3 m4 make maxima && chronic apt-get clean 1
chronic apt-get -qq install -y minizinc mono-devel mono-mcs mono-vbnc && chronic apt-get clean 1
chronic apt-get -qq install -y nasm neko nickle node-typescript && chronic apt-get clean 1
chronic apt-get -qq install -y nodejs ocaml octave openjdk-11-jdk && chronic apt-get clean 1
chronic apt-get -qq install -y pari-gp parser3-cgi perl php-cli && chronic apt-get clean 1
chronic apt-get -qq install -y polyml python3 r-base rakudo && chronic apt-get clean 1
chronic apt-get -qq install -y ratfor rc regina-rexx ruby && chronic apt-get clean 1
chronic apt-get -qq install -y ruby-mustache rustc scala scilab-cli && chronic apt-get clean 1
chronic apt-get -qq install -y sed slsh spin squirrel3 && chronic apt-get clean 1
chronic apt-get -qq install -y surgescript swi-prolog tcl tcsh && chronic apt-get clean 1
chronic apt-get -qq install -y valac vim wabt xsltproc && chronic apt-get clean 1
chronic apt-get -qq install -y yabasic yorick zoem zsh && chronic apt-get clean 1
make -C vendor 1
apt update && apt install -y git curl make patch build-essential bash 1
chmod +x /fuzz.sh 1
apt update && apt install -y git curl make patch build-essential 1
echo -e "Building versions:\ R2_VERSION=master\ R2_PIPE_PY_VERSION=1.6.5" 1
DEBIAN_FRONTEND=noninteractive dpkg --add-architecture i386 && apt-get update && apt-get install -y curl wget gcc git bison pkg-config make glib-2.0 libc6:i386 libncurses5:i386 libstdc++6:i386 gnupg2 python-pip ${with_arm64_as:+binutils-aarch64-linux-gnu} ${with_arm32_as:+binutils-arm-linux-gnueabi} ${with_ppc_as:+binutils-powerpc64le-linux-gnu} && pip install r2pipe=="1.6.5" && cd /mnt && git clone -b "master" -q --depth 1 https://github.com/radareorg/radare2.git && cd radare2 && ./configure && make && make install && apt-get install -y xz-utils && apt-get remove --purge -y bison python-pip glib-2.0 && apt-get autoremove --purge -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
useradd -m r2 && adduser r2  && echo "r2:r2" | chpasswd 1
r2pm init && r2pm update && chown -R r2:r2 /home/r2/.config 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends mariadb-server libmariadb-dev postgresql postgresql-client postgresql-contrib libpq-dev redis-server memcached ffmpeg mupdf mupdf-tools libvips poppler-utils 1
wget -qO /tmp/im.tar.xz https://imagemagick.org/download/releases/ImageMagick-7.1.0-5.tar.xz && wget -qO /tmp/im.sig https://imagemagick.org/download/releases/ImageMagick-7.1.0-5.tar.xz.asc && gpg --batch --keyserver keyserver.ubuntu.com --recv 89AB63D48277377A && gpg --batch --verify /tmp/im.sig /tmp/im.tar.xz && tar xJf /tmp/im.tar.xz -C /tmp && cd /tmp/ImageMagick-7.1.0-5 && ./configure --with-rsvg && make -j 9 && make install && ldconfig /usr/local/lib && rm -rf /tmp/* 1
mkdir -p /tmp/rails 1
cd /tmp/rails && bundle install && yarn install && rm -rf /tmp/rails 1
chmod 777 /usr/share/nginx/html 1
apt-get update -y && apt-get install -y python-pip python-dev build-essential curl dnsutils iputils-ping openssh-server net-tools && mkdir /var/run/sshd && echo 'root:screencast' | chpasswd &&  sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && pip install -r requirements.txt 1
apt-get update && apt-get install -y ranger 1
if [ "none" != "nne" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install none 2>&1"; fi 1
pip install poetry==1.1.10 pre-commit 1
cd /tmp/pip-tmp/rasa && poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi --no-root 1
apt-get update && apt-get install -y gcc-aarch64-linux-gnu build-essential 1
apt-get update -y && apt-get install -y  tzdata && useradd -ms /bin/bash -d /home/ray ray --uid 1000 --gid 100 && usermod -aG  ray && echo 'ray ALL=NOPASSWD: ALL' >> /etc/ers && rm -rf /var/lib/apt/lists/* && apt-get clean 1
apt-get update -y &&  apt-get upgrade -y &&  apt-get install -y git wget cmake g++ zlib1g-dev $(if [ "autoscaler" = "autoscaler" ]; then echo tmux screen rsync openssh-client gnupg; fi) && wget --quiet "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" -O /tmp/miniconda.sh && /bin/bash /tmp/miniconda.sh -b -u -p /home/ray/anaconda3 && /home/ray/anaconda3/bin/conda init && echo 'export PATH=/home/ray/anaconda3/bin:$PATH' >> /home/ray/.bashrc && rm /tmp/miniconda.sh && /home/ray/anaconda3/bin/conda install -y libgcc python=3.7.7 && /home/ray/anaconda3/bin/conda clean -y --all && /home/ray/anaconda3/bin/pip install --no-cache-dir flatbuffers cython==0.29.26 numpy\>=1.20 psutil && /home/ray/anaconda3/bin/pip uninstall -y dask &&  apt-get autoremove -y cmake zlib1g-dev $(if [ "ubuntu:focal" = "ubuntu:focal" ]; then echo g++; fi) && (if [ "autoscaler" = "autoscaler" ]; then wget -O - -q https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key add - &&  touch /etc/apt/sources.list.d/kubernetes.list && echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" |  tee -a /etc/apt/sources.list.d/kubernetes.list &&  apt-get update &&  apt-get install kubectl; else  apt-get autoremove -y wget; fi;) &&  rm -rf /var/lib/apt/lists/* &&  apt-get clean 1
apt-get update -qq && apt-get upgrade -qq 1
apt-get install -y -qq curl python-is-python3 git build-essential  unzip unrar apt-utils dialog tzdata wget rsync language-pack-en tmux cmake gdb vim htop libgtk2.0-dev zlib1g-dev libgl1-mesa-dev maven openjdk-8-jre openjdk-8-jdk clang-format-12 jq clang-tidy-12 clang-12 1
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9 1
ln -s /usr/bin/clang-format-12 /usr/bin/clang-format && ln -s /usr/bin/clang-tidy-12 /usr/bin/clang-tidy && ln -s /usr/bin/clang-12 /usr/bin/clang 1
curl -o- https://get.docker.com | sh 1
locale -a 1
echo "ulimit -c 0" >> /root/.bashrc 1
(echo "build --remote_cache=${REMOTE_CACHE_URL}" >> /root/.bazelrc); (if [ "${BUILDKITE_PULL_REQUEST}" != "false" ]; then (echo "build --remote_upload_local_results=false" >> /root/.bazelrc); fi); cat /root/.bazelrc 1
mkdir /ray 1
./ci/ci.sh init 1
bash --login -i ./ci/ci.sh build 1
(if [ "${INSTALL_DEPENDENCIES}" = "ML" ]; then RLLIB_TESTING=1 TRAIN_TESTING=1 TUNE_TESTING=1 bash --login -i ./ci/env/install-dependencies.sh; fi) 1
bash --login -i -c "python ./ci/pipeline/determine_tests_to_run.py --output=json > affected_set.json" 1
cat affected_set.json 1
mkdir -p /data/config /data/cache /mnt && apk --no-cache add ca-certificates fuse tzdata && echo "user_allow_other" >> /etc/fuse.conf && rclone version 1
apk add openssh && ssh-keygen -A && adduser -D rclone && echo "rclone:password" | chpasswd 1
CGO_ENABLED=0 make 1
./rclone version 1
apk --no-cache add ca-certificates fuse tzdata && echo "user_allow_other" >> /etc/fuse.conf 1
addgroup -g 1009 rclone && adduser -u 1009 -Ds /bin/sh -G rclone rclone 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends openjdk-8-jdk net-tools curl python krb5-user krb5-kdc krb5-admin-server && rm -rf /var/lib/apt/lists/* 1
set -x && curl -fSL "$HADOOP_URL" -o /tmp/hadoop.tar.gz && tar -xvf /tmp/hadoop.tar.gz -C /opt/ && rm /tmp/hadoop.tar.gz* 1
ln -s /opt/hadoop-$HADOOP_VERSION/etc/hadoop /etc/hadoop 1
mkdir /opt/hadoop-$HADOOP_VERSION/logs 1
mkdir /hadoop-data 1
mkdir -p /hadoop/dfs/name 1
mkdir -p /hadoop/dfs/data 1
echo '*/admin@KERBEROS.RCLONE *' > /etc/krb5kdc/kadm5.acl 1
chmod a+x /run.sh 1
apt-get clean && apt-get -y update && apt-get install -y locales && locale-gen en_US.UTF-8 1
ln -snf /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime && echo Europe/Copenhagen > /etc/timezone 1
DEBIAN_FRONTEND=noninteractive && apt-get update -qq && apt-get install -y tzdata && apt-get install -y bsdmainutils bridge-utils build-essential ccache curl file git jq libc6 libgcc1 libglu1 libncurses5 libstdc++6 libz1 libvirt-clients libvirt-daemon-system openjdk-11-jdk-headless openjdk-8-jdk-headless qemu-kvm s3cmd unzip virt-manager wget zip ninja-build && apt-get clean 1
cd /opt && wget -q https://dl.google.com/android/repository/commandlinetools-linux-7302050_latest.zip -O android-tools-linux.zip && mkdir --parents ${ANDROID_HOME}/cmdline-tools/latest && unzip android-tools-linux.zip -d ${ANDROID_HOME}/cmdline-tools/latest && mv ${ANDROID_HOME}/cmdline-tools/latest/cmdline-tools/* ${ANDROID_HOME}/cmdline-tools/latest/ && rm -f android-tools-linux.zip 1
sdkmanager --update 1
yes | sdkmanager 'build-tools;30.0.3' 'emulator' 'extras;android;m2repository' 'platforms;android-30' 'platform-tools' 'ndk;23.1.7779620' 'system-images;android-29;default;x86' 1
chmod -R a+rwX ${ANDROID_HOME} 1
cd /opt && wget -nv https://cmake.org/files/v3.21/cmake-3.21.4-linux-x86_64.tar.gz && tar zxf cmake-3.21.4-linux-x86_64.tar.gz 1
ln -s /usr/bin/ninja /opt/cmake-3.21.4-linux-x86_64/bin/ninja 1
if [ "${VIRTUAL_ENV}" = "conda" ] ; then curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o anaconda.sh && /bin/bash anaconda.sh -b -p conda && rm anaconda.sh && echo ". /root/conda/etc/profile.d/conda.sh" >> ~/.bashrc && echo "conda activate base" >> ~/.bashrc ; fi 1
if [ "${VIRTUAL_ENV}" = "venv" ] ; then python3.7 -m venv /root/${VIRTUAL_ENV}; source /root/${VIRTUAL_ENV}/bin/activate; pip install --upgrade pip; pip install --upgrade setuptools wheel; fi 1
if [ "${VIRTUAL_ENV}" = "virtualenv" ] ; then python3.7 -m virtualenv /root/${VIRTUAL_ENV}; source /root/${VIRTUAL_ENV}/bin/activate; pip install --upgrade pip; pip install --upgrade setuptools wheel; fi 1
if [ "${VIRTUAL_ENV}" = "venv" ] || [ "${VIRTUAL_ENV}" = "virtualenv" ]; then source /root/${VIRTUAL_ENV}/bin/activate; pip install recommenders[examples]; fi 1
if [ "${VIRTUAL_ENV}" = "conda" ] ; then pip install recommenders[examples]; fi 1
if [ "${VIRTUAL_ENV}" = "venv" ] || [ "${VIRTUAL_ENV}" = "virtualenv" ]; then source /root/${VIRTUAL_ENV}/bin/activate; pip install recommenders[spark,examples]; fi 1
if [ "${VIRTUAL_ENV}" = "conda" ] ; then pip install recommenders[spark,examples]; fi 1
if [ "${VIRTUAL_ENV}" = "conda" ] ; then curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o anaconda.sh && /bin/bash anaconda.sh -b -p conda && rm anaconda.sh && echo ". /root/conda/etc/profile.d/conda.sh" >> ~/.bashrc && echo "conda activate base" >> ~/.bashrc; fi 1
if [ "${VIRTUAL_ENV}" = "venv" ] ; then python3.7 -m venv /root/${VIRTUAL_ENV}; source /root/${VIRTUAL_ENV}/bin/activate; pip install --upgrade pip; pip install --upgrade setuptools wheel; pip install recommenders[gpu,examples]; fi 1
if [ "${VIRTUAL_ENV}" = "virtualenv" ] ; then python3.7 -m virtualenv /root/${VIRTUAL_ENV}; source /root/${VIRTUAL_ENV}/bin/activate; pip install --upgrade pip; pip install --upgrade setuptools wheel; pip install recommenders[gpu,examples]; fi 1
if [ "${VIRTUAL_ENV}" = "conda" ] ; then pip install recommenders[gpu,examples] -f https://download.pytorch.org/whl/cu111/torch_stable.html ; fi 1
if [ "${VIRTUAL_ENV}" = "venv" ] || [ "${VIRTUAL_ENV}" = "virtualenv" ]; then source /root/${VIRTUAL_ENV}/bin/activate; pip install recommenders[all]; fi 1
if [ "${VIRTUAL_ENV}" = "conda" ] ; then pip install recommenders[all]; fi 1
mkdir /root/.jupyter && echo "c.NotebookApp.token = ''" >> /root/.jupyter/jupyter_notebook_config.py && echo "c.NotebookApp.ip = '0.0.0.0'" >> /root/.jupyter/jupyter_notebook_config.py && echo "c.NotebookApp.allow_root = True" >> /root/.jupyter/jupyter_notebook_config.py && echo "c.NotebookApp.open_browser = False" >> /root/.jupyter/jupyter_notebook_config.py && echo "c.MultiKernelManager.default_kernel_name = 'python3'" >> /root/.jupyter/jupyter_notebook_config.py 1
if [ "${VIRTUAL_ENV}" = "conda" ]; then python -m ipykernel install --user --name base --display-name "Python (base)"; fi 1
if [ "${VIRTUAL_ENV}" = "venv" ] || [ "${VIRTUAL_ENV}" = "virtualenv" ]; then source /root/${VIRTUAL_ENV}/bin/activate; python -m ipykernel install --user --name venv --display-name "Python (venv)"; fi 1
set -eux;  apk add --no-cache --virtual .build-deps coreutils dpkg-dev dpkg gcc linux-headers make musl-dev openssl-dev wget ;  wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -; mkdir -p /usr/src/redis; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; rm redis.tar.gz;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h; grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; extraJemallocConfigureFlags="--build=$gnuArch"; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64 | i386 | x32) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=12" ;; *) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=16" ;; esac; extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-hugepage=21"; grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; sed -ri 's!cd jemalloc && ./configure !&'"$extraJemallocConfigureFlags"' !' /usr/src/redis/deps/Makefile; grep -F "cd jemalloc && ./configure $extraJemallocConfigureFlags " /usr/src/redis/deps/Makefile;  make -C /usr/src/redis -j "$(nproc)" all; make -C /usr/src/redis install;  serverMd5="$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)"; export serverMd5; find /usr/local/bin/redis* -maxdepth 0 -type f -not -name redis-server -exec sh -eux -c ' md5="$(md5sum "$1" | cut -d" " -f1)"; test "$md5" = "$serverMd5"; ' -- '{}' ';' -exec ln -svfT 'redis-server' '{}' ';' ;  rm -r /usr/src/redis;  runDeps="$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' )"; apk add --no-network --virtual .redis-rundeps $runDeps; apk del --no-network .build-deps;  redis-cli --version; redis-server --version 1
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates wget  dpkg-dev gcc libc6-dev make ; rm -rf /var/lib/apt/lists/*;  wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -; mkdir -p /usr/src/redis; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; rm redis.tar.gz;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h; grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; extraJemallocConfigureFlags="--build=$gnuArch"; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64 | i386 | x32) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=12" ;; *) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=16" ;; esac; extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-hugepage=21"; grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; sed -ri 's!cd jemalloc && ./configure !&'"$extraJemallocConfigureFlags"' !' /usr/src/redis/deps/Makefile; grep -F "cd jemalloc && ./configure $extraJemallocConfigureFlags " /usr/src/redis/deps/Makefile;  make -C /usr/src/redis -j "$(nproc)" all; make -C /usr/src/redis install;  serverMd5="$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)"; export serverMd5; find /usr/local/bin/redis* -maxdepth 0 -type f -not -name redis-server -exec sh -eux -c ' md5="$(md5sum "$1" | cut -d" " -f1)"; test "$md5" = "$serverMd5"; ' -- '{}' ';' -exec ln -svfT 'redis-server' '{}' ';' ;  rm -r /usr/src/redis;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  redis-cli --version; redis-server --version 1
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates wget  dpkg-dev gcc libc6-dev-i386 gcc-multilib make ; rm -rf /var/lib/apt/lists/*;  wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -; mkdir -p /usr/src/redis; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; rm redis.tar.gz;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h; grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; extraJemallocConfigureFlags="--build=$gnuArch"; dpkgArch="$(dpkg --print-architecture)"; case "${dpkgArch##*-}" in amd64 | i386 | x32) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=12" ;; *) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=16" ;; esac; extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-hugepage=21"; grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; sed -ri 's!cd jemalloc && ./configure !&'"$extraJemallocConfigureFlags"' !' /usr/src/redis/deps/Makefile; grep -F "cd jemalloc && ./configure $extraJemallocConfigureFlags " /usr/src/redis/deps/Makefile;  make -C /usr/src/redis -j "$(nproc)" 32bit; make -C /usr/src/redis install;  serverMd5="$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)"; export serverMd5; find /usr/local/bin/redis* -maxdepth 0 -type f -not -name redis-server -exec sh -eux -c ' md5="$(md5sum "$1" | cut -d" " -f1)"; test "$md5" = "$serverMd5"; ' -- '{}' ';' -exec ln -svfT 'redis-server' '{}' ';' ;  rm -r /usr/src/redis;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  redis-cli --version; redis-server --version 1
set -eux;  savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends gcc make ; rm -rf /var/lib/apt/lists/*;  gem install passenger --version "$PASSENGER_VERSION"; passenger-config build-native-support; if [ -n "$(passenger-config build-native-support 2>&1)" ]; then cat /tmp/passenger_native_support-*.log; false; fi;  apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false 1
set -eux; passenger-config install-agent; passenger-config download-nginx-engine 1
apk update && apk add --no-cache git 1
npm ci --no-optional --ignore-scripts 1
npm run bundle:standalone 1
chgrp -R 0 /etc/nginx && chgrp -R 0 /usr/share/nginx/html && chgrp -R 0 /var/cache/nginx && chgrp -R 0 /var/log/nginx && chgrp -R 0 /var/run && chmod -R g+rwX /etc/nginx && chmod -R g+rwX /usr/share/nginx/html && chmod -R g+rwX /var/cache/nginx && chmod -R g+rwX /var/log/nginx && chmod -R g+rwX /var/run 1
npm install -g redoc-cli 1
set -ex;                                                                   apt-get update;                                                            apt-get install -q -y --no-install-recommends                              apt-transport-https                                                    bison                                                                  flex                                                                   fuse                                                                   gosu                                                                   libfuse-dev                                                            nasm                                                                   qemu-utils                                                                                                                                texinfo                                                                autopoint                                                              git                                                                    cmake                                                                  gperf                                                                  libhtml-parser-perl                                                    ;                                                                      apt-key adv --keyserver keyserver.ubuntu.com --recv-keys AA12E97F0881517F; echo "deb https://static.redox-os.org/toolchain/apt/ /" >>                 /etc/apt/sources.list.d/redox.list;                                    apt-get update -o Dir::Etc::sourcelist="redox.list";                       apt-get install -q -y --no-install-recommends                              x86-64-unknown-redox-newlib                                            x86-64-unknown-redox-binutils                                          x86-64-unknown-redox-gcc                                               ;                                                                      cargo install xargo;                                                       cargo install cargo-config;                                                apt-get autoremove -q -y;                                                  apt-get clean -q -y;                                                       rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y openssl sqlite3 1
echo "#!/bin/sh\nset -x\nsqlite3 \file:/data/sqlite.db" > /usr/local/bin/database-cli && chmod +x /usr/local/bin/database-cli 1
apt-get -qqy update && apt-get install -y --no-install-recommends ca-certificates gnupg2 curl && rm -rf /var/lib/apt/lists/* 1
GNUPGHOME="$(mktemp -d)" && export GNUPGHOME && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys 539A3A8C6692E6E3F69B3FE81D85E93F801BB43F && gpg --batch --export 539A3A8C6692E6E3F69B3FE81D85E93F801BB43F > /usr/share/keyrings/rethinkdb.gpg && gpgconf --kill all && rm -rf "$GNUPGHOME" && echo "deb [signed-by=/usr/share/keyrings/rethinkdb.gpg] https://download.rethinkdb.com/repository/debian-bullseye bullseye main" > /etc/apt/sources.list.d/rethinkdb.list 1
apt-get -qqy update && apt-get install -y rethinkdb=$RETHINKDB_PACKAGE_VERSION && rm -rf /var/lib/apt/lists/* 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends curl git 1
set -ex && if [ "0" = 1 ]; then echo 'use npm mirror' && npm config set registry https://registry.npmmirror.com && yarn config set registry https://registry.npmmirror.com ; fi; 1
set -ex && export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true && yarn install --production --frozen-lockfile --network-timeout 1000000 && yarn cache clean 1
set -ex && grep -Po '(?<="puppeteer": ")[^\s"]*(?=")' /app/package.json | tee /ver/.puppeteer_version && grep -Po '(?<="@vercel/nft": ")[^\s"]*(?=")' /app/package.json | tee /ver/.nft_version && grep -Po '(?<="fs-extra": ")[^\s"]*(?=")' /app/package.json | tee /ver/.fs_extra_version 1
set -ex && if [ "0" = 1 ]; then npm config set registry https://registry.npmmirror.com && yarn config set registry https://registry.npmmirror.com ; fi; yarn add @vercel/nft@$(cat .nft_version) fs-extra@$(cat .fs_extra_version) && yarn cache clean 1
set -ex && cp /app/scripts/docker/minify-docker.js /minifier/ && export PROJECT_ROOT=/app && node /minifier/minify-docker.js && rm -rf /app/node_modules /app/scripts && mv /app/app-minimal/node_modules /app/ && rm -rf /app/app-minimal && ls -la /app && du -hd1 /app 1
set -ex ; if [ "1" = 0 ] && [ "$TARGETPLATFORM" = 'linux/amd64' ]; then if [ "0" = 1 ]; then npm config set registry https://registry.npmmirror.com && yarn config set registry https://registry.npmmirror.com ; fi; echo 'Downloading Chromium...' && unset PUPPETEER_SKIP_CHROMIUM_DOWNLOAD && yarn add puppeteer@$(cat /app/.puppeteer_version) && yarn cache clean ; else mkdir -p /app/node_modules/puppeteer ; fi; 1
set -ex && apt-get update && apt-get install -yq --no-install-recommends dumb-init ; if [ "1" = 0 ]; then if [ "$TARGETPLATFORM" = 'linux/amd64' ]; then apt-get install -yq --no-install-recommends ca-certificates fonts-liberation wget xdg-utils libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libdrm2 libexpat1 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 ; else apt-get install -yq --no-install-recommends chromium && echo 'CHROMIUM_EXECUTABLE_PATH=chromium' | tee /app/.env ; fi; fi; rm -rf /var/lib/apt/lists/* 1
set -x && if [ "1" = 0 ] && [ "$TARGETPLATFORM" = 'linux/amd64' ]; then echo 'Verifying Chromium installation...' && ldd $(find /app/node_modules/puppeteer/ -name chrome) | grep "not found" ; if [ "$?" = 0 ]; then echo "!!! Chromium has unmet shared libs !!!" && exit 1 ; else echo "Awesome! All shared libs are met!" ; fi; fi; 1
./download-openssl-curl.sh 1
sed -i '/updates/d' /etc/apt/sources.list && sed -i 's/httpredir/archive/' /etc/apt/sources.list 1
apt-get update && apt-get install --allow-unauthenticated -y --no-install-recommends automake bzip2 file g++ g++-multilib gcc gcc-multilib git lib32z1-dev libedit-dev libncurses-dev make patch perl pkg-config unzip wget xz-utils zlib1g-dev 1
mkdir /home/user 1
./build-openssl.sh 1
./build-curl.sh 1
./build-binutils.sh 1
./build-gcc.sh && apt-get remove -y gcc g++ 1
./build-python.sh 3.9.1 1
./build-cmake.sh 1
./build-clang.sh 1
curl -LS -o perf.zip https://github.com/rust-lang/rustc-perf/archive/$PERF_COMMIT.zip && unzip perf.zip && mv rustc-perf-$PERF_COMMIT rustc-perf && rm perf.zip 1
apt-get update && apt-get install -y --no-install-recommends g++ make ninja-build file curl ca-certificates python3 git cmake  gdb xz-utils libssl-dev pkg-config mingw-w64 1
curl -sL https://nodejs.org/dist/v16.9.0/node-v16.9.0-linux-x64.tar.xz | tar -xJ 1
npm install es-check@6.1.1 -g 1
npm install eslint@8.6.0 -g 1
sed -i 's/^# deb-src/deb-src/' /etc/apt/sources.list 1
apt-get update && apt-get build-dep -y clang llvm && apt-get install -y --no-install-recommends build-essential g++-8-multilib libedit-dev libgmp-dev libisl-dev libmpc-dev libmpfr-dev libtinfo5 ninja-build nodejs python3-dev software-properties-common unzip dirmngr gpg-agent g++-8-arm-linux-gnueabi 1
apt-key adv --batch --yes --keyserver keyserver.ubuntu.com --recv-keys 74DA7924C5513486 1
add-apt-repository -y 'deb https://apt.dilos.org/dilos dilos2 main' 1
env CC=arm-linux-gnueabi-gcc-8 CFLAGS="-march=armv7-a" CXX=arm-linux-gnueabi-g++-8 CXXFLAGS="-march=armv7-a" bash musl.sh armv7 && rm -rf /build/* 1
/tmp/build-fuchsia-toolchain.sh 1
/tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386  pc 1
/tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386  sun 1
/tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc sun 1
/tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh 1
/tmp/build-wasi-toolchain.sh 1
/tmp/freebsd-toolchain.sh i686 1
ln -s /usr/include/asm-generic /usr/local/include/asm 1
apt-get update && apt-get install -y --no-install-recommends g++ make ninja-build file curl ca-certificates python3 git cmake libssl-dev  xz-utils tidy 1
apt-get install -y gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget 1
curl -sL https://nodejs.org/dist/v14.4.0/node-v14.4.0-linux-x64.tar.xz | tar -xJ 1
npm install -g browser-ui-test@$(head -n 1 /tmp/browser-ui-test.version) --unsafe-perm=true 1
./build-s390x-toolchain.sh 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends g++ make ninja-build file wget curl ca-certificates python3 git cmake xz-utils  gdb patch libssl-dev pkg-config 1
CFLAGS="-Wa,-mrelax-relocations=no -Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=none" CXXFLAGS="-Wa,-mrelax-relocations=no -Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=none" REPLACE_CC=1 bash musl-toolchain.sh x86_64 && rm -rf build 1
CFLAGS="-Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=none" CXXFLAGS="-Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=none" bash musl-toolchain.sh aarch64 && rm -rf build 1
curl -f https://curl.se/ca/cacert.pem -o cacert.pem 1
sh /scripts/make3.sh 1
sh /scripts/crosstool-ng.sh 1
apt update -y && apt install -y g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake unzip zip 1
git clone https://github.com/microsoft/vcpkg && cd vcpkg && git checkout 134505003bb46e20fbace51ccfb69243fbbc5f82 1
/vcpkg/bootstrap-vcpkg.sh -disableMetrics 1
/vcpkg/vcpkg --disable-metrics install libvpx libyuv opus 1
groupadd -r user && useradd -r -g user user --home /home/user && mkdir -p /home/user && chown user /home/user && echo "user  ALL=(ALL) NOPASSWD:ALL" |  tee /etc/ers.d/user 1
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so 1
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup.sh 1
chmod +x rustup.sh 1
./rustup.sh -y 1
useradd -m daniel 1
apt-get update && apt-get upgrade --yes && apt-get install libasound-dev wget --yes && wget https://github.com/sqshq/sampler/releases/download/v1.1.0/sampler-1.1.0-linux-amd64 -O /usr/local/bin/sampler && chmod +x /usr/local/bin/sampler 1
apk update && apk upgrade && apk add alsa-lib-dev autoconf bash ca-certificates cpio cups-dev curl file fontconfig-dev g++ gcc git libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev libxtst-dev linux-headers make python3 py3-pip sed tar unzip wget zip 1
adduser --shell /bin/bash --uid 1000 --disabled-password jenkinsa 1
adduser --shell /bin/bash --uid 1001 --disabled-password jenkinsb 1
adduser --shell /bin/bash --uid 1002 --disabled-password jenkinsc 1
gcc /tmp/tinyreaper.c -o /opt/tinyreaper && chmod +x /opt/tinyreaper && rm /tmp/tinyreaper.c 1
wget --no-verbose --show-progress --progress=bar:force:noscroll https://$ARTIFACTORY_CREDS@common.repositories.cloud.sap/artifactory/sapmachine-mvn/io/sapmachine/build/devkit/linux-aarch64/devkit-fedora-gcc/21-8.3.0/devkit-fedora-gcc-21-8.3.0.tar.gz 2>&1 1
/opt/devkits/devkit-fedora-gcc-21-8.3.0/bin/gcc -I/usr/include -I/usr/include/aarch64-linux-gnu /tmp/tinyreaper.c -o /opt/tinyreaper && chmod +x /opt/tinyreaper && rm /tmp/tinyreaper.c 1
wget --no-verbose --show-progress --progress=bar:force:noscroll https://$ARTIFACTORY_CREDS@common.repositories.cloud.sap/artifactory/sapmachine-mvn/io/sapmachine/build/devkit/linux-x64/devkit-fedora-gcc/12-8.3.0/devkit-fedora-gcc-12-8.3.0.tar.gz 2>&1 1
tar xzf ../devkit-fedora-gcc-12-8.3.0.tar.gz 1
/opt/devkits/devkit-fedora-gcc-12-8.3.0/bin/gcc -I/usr/include -I/usr/include/x86_64-linux-gnu /tmp/tinyreaper.c -o /opt/tinyreaper && chmod +x /opt/tinyreaper && rm /tmp/tinyreaper.c 1
wget --no-verbose --show-progress --progress=bar:force:noscroll https://$ARTIFACTORY_CREDS@common.repositories.cloud.sap/artifactory/sapmachine-mvn/io/sapmachine/build/devkit/linux-ppc64le/devkit-fedora-gcc/21-8.3.0/devkit-fedora-gcc-21-8.3.0.tar.gz 2>&1 1
/opt/devkits/devkit-fedora-gcc-21-8.3.0/bin/gcc -I/usr/include -I/usr/include/powerpc64le-linux-gnu /tmp/tinyreaper.c -o /opt/tinyreaper && chmod +x /opt/tinyreaper && rm /tmp/tinyreaper.c 1
export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys CACB9FE09150307D1D22D82962754C3B3ABCFE23 && gpg --batch --export --armor 'CACB 9FE0 9150 307D 1D22 D829 6275 4C3B 3ABC FE23' > /etc/apt/trusted.gpg.d/sapmachine.gpg.asc && gpgconf --kill all && rm -rf "$GNUPGHOME" && echo "deb http://dist.sapmachine.io/debian/amd64/ ./" > /etc/apt/sources.list.d/sapmachine.list && apt-get update && apt-get -y --no-install-recommends install sapmachine-18-jdk=18.0.1.1 && rm -rf /var/lib/apt/lists/* 1
export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys CACB9FE09150307D1D22D82962754C3B3ABCFE23 && gpg --batch --export --armor 'CACB 9FE0 9150 307D 1D22 D829 6275 4C3B 3ABC FE23' > /etc/apt/trusted.gpg.d/sapmachine.gpg.asc && gpgconf --kill all && rm -rf "$GNUPGHOME" && echo "deb http://dist.sapmachine.io/debian/amd64/ ./" > /etc/apt/sources.list.d/sapmachine.list && apt-get update && apt-get -y --no-install-recommends install sapmachine-11-jdk=11.0.15.0.1 && rm -rf /var/lib/apt/lists/* 1
export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys CACB9FE09150307D1D22D82962754C3B3ABCFE23 && gpg --batch --export --armor 'CACB 9FE0 9150 307D 1D22 D829 6275 4C3B 3ABC FE23' > /etc/apt/trusted.gpg.d/sapmachine.gpg.asc && gpgconf --kill all && rm -rf "$GNUPGHOME" && echo "deb http://dist.sapmachine.io/debian/amd64/ ./" > /etc/apt/sources.list.d/sapmachine.list && apt-get update && apt-get -y --no-install-recommends install sapmachine-17-jdk=17.0.3.0.1 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -qq -y --no-install-recommends zip wget ca-certificates curl git unzip python3 python3-setuptools python3-pip python3-dev libffi-dev openssl libssl-dev gcc g++ maven gpg gpg-agent 1
pip3 install jenkins-job-builder 1
pip3 install jenkinsapi 1
pip3 install pyyaml 1
apt-get update && apt-get install -y maven python3 python3-pip git curl 1
addgroup -g 977 searx && adduser -u 977 -D -h /usr/local/searx -s /bin/sh -G searx searx 1
apk upgrade --no-cache && apk add --no-cache -t build-dependencies build-base py3-setuptools python3-dev libffi-dev libxslt-dev libxml2-dev openssl-dev tar git && apk add --no-cache ca-certificates su-exec python3 py3-pip libxml2 libxslt openssl tini uwsgi uwsgi-python3 brotli && pip3 install --upgrade pip wheel setuptools && pip3 install --no-cache -r requirements.txt && apk del build-dependencies && rm -rf /root/.cache 1
/usr/bin/python3 -m compileall -q searx; touch -c --date=@0 searx/settings.yml; touch -c --date=@0 dockerfiles/uwsgi.ini; if [ ! -z unknown ]; the echo "VERSION_STRING = VERSION_STRING + \"-unknown\"" >> /usr/local/searx/searx/version.py; fi; find /usr/local/searx/searx/static -a \( -name '*.html' -o -name '*.css' -o -name '*.js' -o -name '*.svg' -o -name '*.ttf' -o -name '*.eot' \) -type f -exec gzip -9 -k {} \+ -exec brotli --best {} \+ 1
apt-get update && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y git-core  tzdata 1
git clone https://github.com/ceph/s3-tests.git 1
git checkout 9a6a1e9f197fc9fb031b809d1e057635c2ff8d4e 1
./bootstrap 1
apt-get install --no-install-recommends -y php7.4 php7.4-gd php7.4-zip php7.4-curl php7.4-xml php7.4-mbstring php7.4-sqlite php7.4-xdebug php7.4-pgsql php7.4-intl php7.4-imagick php7.4-gmp php7.4-apcu php7.4-bcmath libmagickcore-6.q16-3-extra curl vim lsof make nodejs npm 1
echo "xdebug.remote_enable = 1" >> /etc/php/7.4/cli/conf.d/20-xdebug.ini 1
echo "xdebug.remote_autostart = 1" >> /etc/php/7.4/cli/conf.d/20-xdebug.ini 1
apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 1
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" 1
apt-get install -y docker-ce docker-ce-cli containerd.io 1
ln -s /var/run/docker-host.sock /var/run/docker.sock 1
curl -o- -L https://yarnpkg.com/install.sh | bash 1
apt-get update -y && apt-get install -y python-dev python-pip && pip install --no-cache-dir --upgrade pip 1
apt-get update -y && apt-get install -y screen 1
pip install --no-cache-dir awscli 1
apt-get -qqy update && apt-get -qqy install bridge-utils bzip2 ca-certificates curl dbus-x11 earlyoom fluxbox gdebi git gstreamer1.0-plugins-bad gstreamer1.0-gl libosmesa6-dev libvirt-daemon-system libvirt-clients libunwind8 libxcb-shape0-dev locales openjdk-8-jre-headless pulseaudio python3 python3-dev python3-pip software-properties-common qemu-kvm tzdata  unzip wget xvfb 1
apt-add-repository -y ppa:deadsnakes/ppa 1
apt-get -qqy update && apt-get install -qqy python-is-python3 1
apt-get -qqy install firefox libnss3-tools fonts-liberation indicator-application libappindicator1 libappindicator3-1 libdbusmenu-gtk3-4 libindicator3-7 libindicator7 1
apt-get -y autoremove 1
pip install virtualenv 1
echo "${TZ}" > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata 1
useradd test --shell /bin/bash  --create-home && usermod -a -G  test && usermod -a -G libvirt test && usermod -a -G libvirt-qemu test && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/ers && echo 'test:secret' | chpasswd 1
echo "" 1
mkdir -p /home/test/artifacts 1
mkdir -p /home/test/bin 1
apt-get -qqy update && apt-get -qqy install ca-certificates curl git npm python3 python3-distutils python3-pip python3.9 python3-distutils python3.9-venv software-properties-common tzdata  unzip && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2; 1
pip install --upgrade pip && pip install virtualenv 1
npm install . 1
apt-get install -qy --no-install-recommends python3-coverage g++ make cmake gperf xorg-dev autoconf2.13 clang llvm llvm-dev libpcre3-dev libssl-dev libdbus-1-dev libunwind-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-xfixes0-dev && curl https://sh.rustup.rs -sSf | sh -s -- --profile=minimal -y && ~/.cargo/bin/cargo install sccache --git https://github.com/mozilla/sccache/ --rev e66c9c15142a7e583d6ab80bd614bdffb2ebcc47 1
apt-get install -qy --no-install-recommends openjdk-8-jdk-headless libgl1 libpulse0 1
apt-get install -qy --no-install-recommends python3 jq 1
mv /opt/${APP_NAME} ${LOCAL_PATH} && mkdir -p ${LOCAL_PATH}/ext-lib 1
mv /opt/${APP_NAME} /opt/shardingsphere-proxy-agent-tracing-opentelemetry 1
mv /opt/${APP_NAME} /opt/shardingsphere-proxy 1
cat bin/start.sh | tr -d '\r' > _start.sh && mv _start.sh bin/start.sh 1
cat bin/stop.sh | tr -d '\r' > _stop.sh && mv _stop.sh bin/stop.sh 1
chmod +x -R ./bin 1
mv /opt/${APP_NAME} /opt/shardingsphere-proxy-agent-jaeger 1
mv /opt/${APP_NAME} /opt/shardingsphere-proxy-agent-zipkin 1
mv /opt/${APP_NAME} /opt/shardingsphere-proxy-agent-metrics 1
apk add ghc cabal g++ libffi-dev curl bash 1
apt-get install -y build-essential git ninja-build python3 pkg-config libglib2.0-dev libpixman-1-dev 1
git clone --depth 1 https://github.com/koalaman/qemu 1
cd qemu && ./configure --static && cd build && ninja qemu-arm 1
cp qemu/build/qemu-arm /build/qemu-arm-static 1
apt-get install -y debootstrap qemu-user-static 1
qemu-debootstrap --arch armhf bullseye pi http://mirrordirector.raspbian.org/raspbian || [ -e /pi/etc/issue ] 1
cp /build/qemu-arm-static /pi/usr/bin/qemu-arm-static 1
printf > /bin/pirun '%s\n' '#!/bin/sh' 'chroot /pi /usr/bin/qemu-arm-static /usr/bin/env "$@"' && chmod +x /bin/pirun 1
[ ! -e /pi/debootstrap ] || pirun '/debootstrap/debootstrap' --second-stage 1
pirun apt-get update 1
pirun apt-get install -y ghc cabal-install 1
pirun cabal update 1
IFS=";" && pirun cabal install --dependencies-only $CABALOPTS ShellCheck 1
apt-get update && apt-get install -y ghc automake autoconf build-essential llvm curl qemu-user-static gcc-$TARGET 1
curl -L "https://downloads.haskell.org/~ghc/8.10.4/ghc-8.10.4-src.tar.xz" | tar xJ --strip-components=1 1
./boot && ./configure --host x86_64-linux-gnu --build x86_64-linux-gnu --target "$TARGET" 1
cp mk/flavours/quick-cross.mk mk/build.mk && make -j "$(nproc)" 1
curl -L "https://downloads.haskell.org/~cabal/cabal-install-3.2.0.0/cabal-install-3.2.0.0-x86_64-unknown-linux.tar.xz" | tar xJv -C /usr/local/bin 1
cabal update && IFS=';' && cabal install --dependencies-only $CABALOPTS ShellCheck 1
apt-get update && apt-get install -y curl busybox wine winbind 1
curl -L "https://downloads.haskell.org/~ghc/8.10.4/ghc-8.10.4-x86_64-unknown-mingw32.tar.xz" | tar xJ --strip-components=1 1
curl -L "https://downloads.haskell.org/~cabal/cabal-install-3.2.0.0/cabal-install-3.2.0.0-x86_64-unknown-mingw32.zip" | busybox unzip - 1
curl -L "https://curl.se/windows/dl-7.75.0/curl-7.75.0-win64-mingw.zip" | busybox unzip - && mv curl-7.75.0-win64-mingw/bin/* . 1
wine /haskell/bin/cabal.exe update && IFS=';' && wine /haskell/bin/cabal.exe install --lib --dependencies-only $CABALOPTS ShellCheck 1
apk add --no-cache g++ gcc git libxml2 libxml2-dev libxslt-dev linux-headers 1
pip3 wheel -r /opt/sherlock/requirements.txt 1
pip3 install -r requirements.txt -f /wheels && rm -rf /wheels && rm -rf /root/.cache/pip/* 1
mkdir /usr/src/app/private 1
apk add python3 make g++ 1
npm install -g "npm@>=8" 1
NODE_ENV=development CYPRESS_INSTALL_BINARY=0 npm ci 1
mkdir -p /showdoc_data/html 1
cp -R /var/www/html/ /showdoc_data/ 1
rm -rf /app && ln -s /var/www/html /app 1
echo "<?php echo file_get_contents('index.html'); ?>" > /var/www/html/web/index.php 1
echo "upload_max_filesize=5000M;" >> /opt/docker/etc/php/php.ini 1
echo "post_max_size=5000M;" >> /opt/docker/etc/php/php.ini 1
echo "client_max_body_size 5000m;" > /opt/docker/etc/nginx/vhost.common.d/10-general.conf 1
apk update 1
apk add --update nodejs npm 1
mv /showdoc_data/html/mock/ /showdoc_data/mock 1
(cd /showdoc_data/mock/ && npm install ) 1
apt-get update -y && apt-get install -y apt-utils 1
apt-get update -y && apt-get install -y $(cat docker/dependencies.txt) 1
docker/print-versions.sh docker/dependencies.txt 1
cd /usr/local/ 1
wget -q "https://dl.google.com/android/repository/${ANDROID_COMMAND_LINE_TOOLS_FILENAME}" 1
unzip ${ANDROID_COMMAND_LINE_TOOLS_FILENAME} -d /usr/local/android-sdk-linux 1
rm ${ANDROID_COMMAND_LINE_TOOLS_FILENAME} 1
yes | sdkmanager --update --sdk_root="${ANDROID_HOME}" 1
yes | sdkmanager --sdk_root="${ANDROID_HOME}" "platforms;${ANDROID_API_LEVELS}" "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "extras;google;m2repository" "extras;android;m2repository" "extras;google;google_play_services" 1
update-java-alternatives -s java-1.8.0-openjdk-amd64 1
yes | sdkmanager --licenses --sdk_root="${ANDROID_HOME}" 1
update-java-alternatives -s java-1.11.0-openjdk-amd64 1
rm -rf ${ANDROID_HOME}/tools 1
docker/gradlewarmer/gradlew --version 1
echo "deb http://deb.debian.org/debian buster-backports main" >> /etc/apt/sources.list 1
apt-get update -qq 1
apt-get -t buster-backports install -y cmake 1
GOOS=$TARGETOS GOARCH=$TARGETARCH go build -gcflags="${SKAFFOLD_GO_GCFLAGS}" -trimpath -o /app main.go 1
tar -xzf "$DIST" --strip 1; rm -rf "$DIST"; rm -rf "config"; rm -rf "bin"; rm -rf "oap-libs"; rm -rf "agent"; 1
apk add --no-cache openssl 1
set -ex; dist=$(grep DISTRIB_CODENAME /etc/lsb-release | cut -d= -f2); echo "deb http://ppa.launchpad.net/ethereum/cpp-build-deps/ubuntu $dist main" >> /etc/apt/sources.list ; apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1c52189c923f6ca9 ; apt-get update; apt-get install -qqy --no-install-recommends build-essential software-properties-common cmake ninja-build libboost-filesystem-dev libboost-test-dev libboost-system-dev libboost-program-options-dev libcvc4-dev libz3-static-dev z3-static jq ; apt-get install -qy python3-pip python3-sphinx; pip3 install codecov; rm -rf /var/lib/apt/lists/* 1
set -ex; dist=$(grep DISTRIB_CODENAME /etc/lsb-release | cut -d= -f2); echo "deb http://ppa.launchpad.net/ethereum/cpp-build-deps/ubuntu $dist main" >> /etc/apt/sources.list ; apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1c52189c923f6ca9 ; apt-get update; apt-get install -qqy --no-install-recommends build-essential software-properties-common cmake ninja-build libboost-filesystem-dev libboost-test-dev libboost-system-dev libboost-program-options-dev clang libz3-static-dev jq ; rm -rf /var/lib/apt/lists/* 1
apk update && apk add boost-dev boost-static build-base cmake git 1
sed -i -E -e 's/include <sys\/poll.h>/include <poll.h>/' /usr/include/boost/asio/detail/socket_types.hpp 1
cmake -DCMAKE_BUILD_TYPE=Release -DTESTS=0 -DSOLC_LINK_STATIC=1 1
make solc -j$(awk "BEGIN {                                       if (0 != 0) {                   print(0);                   } else {                                           x=($(grep -c ^processor /proc/cpuinfo) * 2/3); if (x > 1) {                                   printf(\"%d\n\", x);                       } else {                                       print(1);                                  }                                              }                                                  }") 1
strip solc/solc 1
set -ex; apt-get update; apt-get -y install wget gpg dirmngr; rm -rf /var/lib/apt/lists/*; export GNUPGHOME="/tmp/gnupg_home"; mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"; echo "disable-ipv6" >> "$GNUPGHOME/dirmngr.conf"; if [ -n "3558857D1F5754B78C7F8B5A71A45A3D0D8D0B93" ]; then wget -nv "https://downloads.apache.org/solr/KEYS" -O- | gpg --batch --import --key-origin 'url,https://downloads.apache.org/solr/KEYS'; release_keys="$(gpg --batch --export -a 3558857D1F5754B78C7F8B5A71A45A3D0D8D0B93)"; rm -rf "$GNUPGHOME"/*; echo "${release_keys}" | gpg --batch --import; fi; MAX_REDIRECTS=2; if [ -n "$SOLR_DOWNLOAD_URL" ]; then MAX_REDIRECTS=4; SKIP_GPG_CHECK=true; elif [ -n "$SOLR_DOWNLOAD_SERVER" ]; then SOLR_DOWNLOAD_URL="$SOLR_DOWNLOAD_SERVER/9.0.0/solr-9.0.0.tgz"; fi; for url in $SOLR_DOWNLOAD_URL http://www.apache.org/dyn/closer.lua?action https://www.apache.org/dist/solr/solr/9.0.0/solr-9.0.0.tgz https://archive.apache.org/dist/solr/solr/9.0.0/solr-9.0.0.tgz; do if [ -f "/opt/solr-9.0.0.tgz" ]; then break; fi; echo "downloading $url"; if wget -t 10 --max-redirect $MAX_REDIRECTS --retry-connrefused -nv "$url" -O "/opt/solr-9.0.0.tgz"; then break; else rm -f "/opt/solr-9.0.0.tgz"; fi; done; if [ ! -f "/opt/solr-9.0.0.tgz" ]; then echo "failed all download attempts for solr-9.0.0.tgz"; exit 1; fi; if [ -z "$SKIP_GPG_CHECK" ]; then echo "downloading https://archive.apache.org/dist/solr/solr/9.0.0/solr-9.0.0.tgz.asc"; wget -nv "https://archive.apache.org/dist/solr/solr/9.0.0/solr-9.0.0.tgz.asc" -O "/opt/solr-9.0.0.tgz.asc"; echo "383c6b6f352f2a385ece99b2b0a82e1552430aea65c6c33e5569da422138844192db4e06f58699325af55ee631694e16f836a5bbf8556f86fdeabc0cfa0533d5 */opt/solr-9.0.0.tgz" | sha512sum -c -; (>&2 ls -l "/opt/solr-9.0.0.tgz" "/opt/solr-9.0.0.tgz.asc"); gpg --batch --verify "/opt/solr-9.0.0.tgz.asc" "/opt/solr-9.0.0.tgz"; else echo "Skipping GPG validation due to non-Apache build"; fi; { command -v gpgconf; gpgconf --kill all || :; }; rm -r "$GNUPGHOME"; tar -C /opt --extract --preserve-permissions --file "/opt/solr-9.0.0.tgz"; rm "/opt/solr-9.0.0.tgz"*; 1
set -ex; (cd /opt; ln -s solr-*/ solr); rm -Rf /opt/solr/docs /opt/solr/docker/Dockerfile; 1
set -ex; mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d; cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; chmod 0664 /etc/default/solr.in.sh; mkdir -p -m0770 /var/solr; chown -R "solr:0" /var/solr; ln -s /opt/solr/modules /opt/solr/contrib; ln -s /opt/solr/prometheus-exporter /opt/solr/modules/prometheus-exporter; 1
set -ex; apt-get update; apt-get -y install acl dirmngr lsof procps wget netcat gosu tini jattach; rm -rf /var/lib/apt/lists/*; 1
apt-get install -y build-essential clang 1
rustup --version 1
rustup component add rustfmt 1
rustc --version && rustup --version && cargo --version 1
cargo clean && cargo build --release --target x86_64-unknown-linux-gnu 1
strip ./target/x86_64-unknown-linux-gnu/release/sonic 1
mkdir .config && cd .config && mkdir sourcetrail 1
rpm --rebuilddb; yum install -y yum-plugin-ovl ca-certificates; 1
yum -y install centos-release-scl epel-release && yum -y install make wget file devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutils wget tar bzip2 git libtool which fuse fuse-devel libpng-devel automake glibc-headers libstdc++-devel gcc-c++ freetype-devel fontconfig-deve libxml2-devel libstdc++-devel libXrender libXrender-devel patch xcb-util-keysyms xcb-util-keysyms-devel libxcb libxcb-devel xcb-util xcb-util-devel xcb-util-wm xcb-util-wm-devel xcb-util xcb-util-devel libxkbcommon libxkbcommon-devel libXi-devel libudev-devel.x86_64 openssl-devel sqlite-devel.x86_64 gperftools.x86_64 gperf.x86_64 libicu-devel.x86_64 boost-devel.x86_64 libxslt-devel.x86_64 python27.x86_64 xz mesa-libEGL-devel mesa-libGL-devel glib-devel java-1.8.0-openjdk-devel re2c ccache ImageMagick vim lftp unzip && yum clean all 1
wget https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.tar.gz && tar xf cmake-3.8.2-Linux-x86_64.tar.gz && cp -R cmake-3.8.2-Linux-x86_64/* /usr/local/ && cmake --version && rm -rf cmake-3.8.2-Linux-x86_64 && rm cmake-3.8.2-Linux-x86_64.tar.gz 1
wget https://archive.apache.org/dist/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz && tar xzf apache-maven-3.5.0-bin.tar.gz && ln -s apache-maven-3.5.0 maven && rm apache-maven-3.5.0-bin.tar.gz 1
git clone https://github.com/martine/ninja.git && cd ninja && git checkout release && ./configure.py --bootstrap && mv ninja /usr/local/bin/ && cd .. && rm -rf ninja 1
make --version 1
cmake --version 1
mvn --version 1
ninja --version 1
apt-get clean && apt-get update && apt-get gnupg ca-certificates && echo 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' >> /etc/apt/sources.list && gpg --keyserver keyserver.ubuntu.com --recv-key E298A3A825C0D65DFD57CBB651716619E084DAB9 && gpg -a --export E084DAB9 | apt-key add - && apt-get clean && rm -rf /var/lib/apt/lists/* && apt-get clean && apt-get update && apt-get software-properties-common && apt-get update && apt-get openjdk-8-jdk && update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java && apt-get curl wget git maven ivy subversion make gcc lsof libffi-dev pandoc pandoc-citeproc libssl-dev libcurl4-openssl-dev libxml2-dev && curl -sL https://deb.nodesource.com/setup_12.x | bash && apt-get nodejs && apt-get python-is-python3 python3-pip python3-setuptools && apt-get qpdf jq && pip3 install sphinx && apt-get r-base r-base-dev && apt-get libcurl4-openssl-dev libgit2-dev libssl-dev libxml2-dev && apt-get texlive-latex-base texlive texlive-fonts-extra texinfo qpdf texlive-latex-extra && apt-get libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev && Rscript -e "install.packages(c('curl', 'xml2', 'httr', 'devtools', 'testthat', 'knitr', 'rmarkdown', 'markdown', 'roxygen2', 'e1071', 'survival'), repos='https://cloud.r-project.org/')" && Rscript -e "devtools::install_github('jimhester/lintr')" && Rscript -e "devtools::install_version('pkgdown', version='2.0.1', repos='https://cloud.r-project.org')" && Rscript -e "devtools::install_version('preferably', version='0.4', repos='https://cloud.r-project.org')" && apt-get ruby2.7 ruby2.7-dev && gem install --no-document bundler:2.2.9 1
useradd -m -s /bin/bash -p spark-rm -u $UID spark-rm 1
set -ex && sed -i 's/http:\/\/deb.\(.*\)/https:\/\/deb.\1/g' /etc/apt/sources.list && apt-get update && ln -s /lib /lib64 && apt install -y bash tini libc6 libpam-modules krb5-user libnss3 procps && mkdir -p /opt/spark && mkdir -p /opt/spark/examples && mkdir -p /opt/spark/work-dir && touch /opt/spark/RELEASE && rm /bin/sh && ln -sv /bin/bash /bin/sh && echo "auth required pam_wheel.so use_uid" >> /etc/pam.d/su && chgrp root /etc/passwd && chmod ug+rw /etc/passwd && rm -rf /var/cache/apt/* 1
chmod g+w /opt/spark/work-dir 1
chmod a+x /opt/decom.sh 1
apt-get update && apt-get install -y less openjdk-11-jre-headless iproute2 vim-tiny  openssh-server && rm -rf /var/lib/apt/lists/* 1
apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates curl git && apt-get clean && rm -rf /var/lib/apt/lists/* && wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.6.14-Linux-x86_64.sh -O ~/miniconda.sh && /bin/bash ~/miniconda.sh -b -p /opt/conda && rm ~/miniconda.sh && /opt/conda/bin/conda clean -tipsy && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && echo "conda activate base" >> ~/.bashrc && ln -s /opt/conda/bin/conda /usr/bin/conda 1
apt-get update && apt-get install -y --no-install-recommends gnupg2 curl ca-certificates && curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && apt-get purge --autoremove -y curl && apt-get update && apt-get install -y --no-install-recommends cuda-cudart-$CUDA_PKG_VERSION cuda-compat-10-0 && ln -s cuda-10.0 /usr/local/cuda && echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && apt-get install -y --no-install-recommends cuda-toolkit-10-0 cuda-libraries-$CUDA_PKG_VERSION cuda-nvtx-$CUDA_PKG_VERSION libnccl2=$NCCL_VERSION-1+cuda10.0 libcudnn7=$CUDNN_VERSION-1+cuda10.0 && apt-mark hold libnccl2 && apt-mark hold libcudnn7 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends gnupg2 curl ca-certificates && curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && apt-get purge --autoremove -y curl && apt-get update && apt-get install -y --no-install-recommends cuda-cudart-$CUDA_PKG_VERSION cuda-compat-10-1 && ln -s cuda-10.1 /usr/local/cuda && echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && apt-get install -y --no-install-recommends cuda-libraries-$CUDA_PKG_VERSION cuda-npp-$CUDA_PKG_VERSION cuda-nvtx-$CUDA_PKG_VERSION libcublas10=10.2.1.243-1 libcudnn7=$CUDNN_VERSION-1+cuda10.1 libnccl2=$NCCL_VERSION-1+cuda10.1 && apt-mark hold libnccl2 && apt-mark hold libcudnn7 && apt-mark hold libcublas10 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends gnupg2 curl ca-certificates && curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1710/x86_64/7fa2af80.pub | apt-key add - && echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1710/x86_64 /" > /etc/apt/sources.list.d/cuda.list && echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && apt-get purge --autoremove -y curl && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends cuda-cudart-$CUDA_PKG_VERSION && ln -s cuda-9.2 /usr/local/cuda && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends cuda-libraries-$CUDA_PKG_VERSION cuda-nvtx-$CUDA_PKG_VERSION libnccl2=$NCCL_VERSION-1+cuda9.2 && apt-mark hold libnccl2 && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y --no-install-recommends libcudnn7=$CUDNN_VERSION-1+cuda9.2 && apt-mark hold libcudnn7 && rm -rf /var/lib/apt/lists/* 1
mkdir -p /model 1
apt-get update && apt-get install -y ffmpeg libsndfile1 1
pip install musdb museval 1
pip install spleeter-gpu==1.4.9 1
mkdir -p /opt/openjdk && cd /opt/openjdk && curl -L https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.1%2B12/OpenJDK17U-jdk_x64_linux_hotspot_17.0.1_12.tar.gz | tar zx --strip-components=1 1
git clone https://github.com/emscripten-core/emsdk.git $EMSDK 1
echo "## Install Emscripten" && cd ${EMSDK} && ./emsdk install ${EMSCRIPTEN_VERSION} && echo "## Done" 1
cd ${EMSDK} && echo "## Generate standard configuration" && ./emsdk activate ${EMSCRIPTEN_VERSION} && chmod 777 ${EMSDK}/upstream/emscripten && chmod -R 777 ${EMSDK}/upstream/emscripten/cache && echo "int main() { return 0; }" > hello.c && ${EMSDK}/upstream/emscripten/emcc -c hello.c && cat ${EMSDK}/upstream/emscripten/cache/sanity.txt && echo "## Done" 1
echo "## Aggressive optimization: Remove debug symbols" && cd ${EMSDK} && . ./emsdk_env.sh && strip -s `which node` && rm -fr ${EMSDK}/upstream/emscripten/tests && rm -fr ${EMSDK}/upstream/fastcomp && find ${EMSDK}/upstream/bin -type f -exec strip -s {} + || true && echo "## Done" 1
echo ". /emsdk/emsdk_env.sh" >> /etc/bash.bashrc 1
echo 'export EM_NODE_JS="$EMSDK_NODE"' >> /etc/bash.bashrc 1
apt-get update && apt-get install -y ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils 1
apt-get install -y libdigest-sha3-perl 1
rustup target add wasm32-unknown-unknown 1
mkdir /opt/wabt && curl -L https://github.com/WebAssembly/wabt/releases/download/1.0.11/wabt-1.0.11-linux.tar.gz  | tar -xzf - -C /opt/wabt --strip 1 1
yum install -y gcc make gcc-c++ patch unzip perl git 1
./configure --srt=on --jobs=2 && make -j2 && make install 1
cp -R conf /usr/local/srs/conf && cp research/api-server/static-dir/index.html /usr/local/srs/objs/nginx/html/ && cp research/api-server/static-dir/favicon.ico /usr/local/srs/objs/nginx/html/ && cp research/players/crossdomain.xml /usr/local/srs/objs/nginx/html/ && cp -R research/console /usr/local/srs/objs/nginx/html/ && cp -R research/players /usr/local/srs/objs/nginx/html/ && cp -R 3rdparty/signaling/www/demos /usr/local/srs/objs/nginx/html/ 1
cd /tmp/signaling && make 1
cp /tmp/signaling/objs/signaling /usr/local/bin/signaling 1
cp -R /tmp/signaling/www /usr/local/ 1
export DEBIAN_FRONTEND=noninteractive && useradd --system --create-home --shell /usr/sbin/nologin stf-build && useradd --system --create-home --shell /usr/sbin/nologin stf && sed -i'' 's@http://archive.ubuntu.com/ubuntu/@mirror://mirrors.ubuntu.com/mirrors.txt@' /etc/apt/sources.list && apt-get update && apt-get -y install wget python build-essential && cd /tmp && wget --progress=dot:mega https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz && tar -xJf node-v*.tar.xz --strip-components 1 -C /usr/local && rm node-v*.tar.xz && su stf-build -s /bin/bash -c '/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js install' && apt-get -y install libzmq3-dev libprotobuf-dev git graphicsmagick yasm && apt-get clean && rm -rf /var/cache/apt/* /var/lib/apt/lists/* 1
mkdir -p /app && chown -R stf-build:stf-build /tmp/build /app 1
set -x && cd /tmp/build && export PATH=$PWD/node_modules/.bin:$PATH && npm install --loglevel http && npm pack && tar xzf stf-*.tgz --strip-components 1 -C /app && bower cache clean && npm prune --production && mv node_modules /app && rm -rf ~/.node-gyp && cd /app && rm -rf /tmp/* 1
set -eux; ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -q -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; }; ddist "apache-storm-2.4.0.tar.gz" "storm/apache-storm-2.4.0/apache-storm-2.4.0.tar.gz"; ddist "apache-storm-2.4.0.tar.gz.asc" "storm/apache-storm-2.4.0/apache-storm-2.4.0.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --keyserver hkps://keyserver.pgp.com --recv-key "51379DA8A7AE5B02674EF15C134716AF768D9B6E" || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "51379DA8A7AE5B02674EF15C134716AF768D9B6E" || gpg --keyserver hkps://pgp.mit.edu --recv-keys "51379DA8A7AE5B02674EF15C134716AF768D9B6E"; gpg --batch --verify "apache-storm-2.4.0.tar.gz.asc" "apache-storm-2.4.0.tar.gz"; tar -xzf "apache-storm-2.4.0.tar.gz"; rm -rf "$GNUPGHOME" "apache-storm-2.4.0.tar.gz" "apache-storm-2.4.0.tar.gz.asc"; chown -R storm:storm "apache-storm-2.4.0" 1
set -eux; ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -q -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; }; ddist "apache-storm-1.2.4.tar.gz" "storm/apache-storm-1.2.4/apache-storm-1.2.4.tar.gz"; ddist "apache-storm-1.2.4.tar.gz.asc" "storm/apache-storm-1.2.4/apache-storm-1.2.4.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --keyserver hkps://keyserver.pgp.com --recv-key "5167DE337E7370373499FC1DA4A672F11B5050C8" || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "5167DE337E7370373499FC1DA4A672F11B5050C8" || gpg --keyserver hkps://pgp.mit.edu --recv-keys "5167DE337E7370373499FC1DA4A672F11B5050C8"; gpg --batch --verify "apache-storm-1.2.4.tar.gz.asc" "apache-storm-1.2.4.tar.gz"; tar -xzf "apache-storm-1.2.4.tar.gz"; rm -rf "$GNUPGHOME" "apache-storm-1.2.4.tar.gz" "apache-storm-1.2.4.tar.gz.asc"; chown -R storm:storm "apache-storm-1.2.4" 1
apt-get update && apt-get install -y python3 build-essential && rm -rf /var/lib/apt/lists/* 1
npm clean-install && npm cache clean --force 1
npm run build && rm -rf .next/cache/webpack && npm prune --production 1
apk update && apk add --no-cache "nodejs>=14.17.6-r0" 1
chmod 777 /usr/share/nginx/html/ /etc/nginx/ /var/cache/nginx/ /var/run/ 1
export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true && apt-get -q update && apt-get -q install -y binutils git gnupg2 libc6-dev libcurl4 libedit2 libgcc-9-dev libpython3.8 libsqlite3-0 libstdc++-9-dev libxml2 libz3-dev pkg-config tzdata zlib1g-dev && rm -r /var/lib/apt/lists/* 1
echo "https://download.swift.org/swift-5.7-branch/ubuntu2004-aarch64/latest-build.yml" 1
set -e; export DEBIAN_FRONTEND=noninteractive && apt-get -q update && apt-get -q install -y curl && rm -rf /var/lib/apt/lists/* && export $(curl -s https://download.swift.org/swift-5.7-branch/ubuntu2004-aarch64/latest-build.yml | grep 'download:' | sed 's/:[^:\/\/]/=/g')  && export $(curl -s https://download.swift.org/swift-5.7-branch/ubuntu2004-aarch64/latest-build.yml | grep 'download_signature:' | sed 's/:[^:\/\/]/=/g')  && export DOWNLOAD_DIR=$(echo $download | sed "s/-ubuntu20.04-aarch64.tar.gz//g") && echo $DOWNLOAD_DIR > .swift_tag && export GNUPGHOME="$(mktemp -d)" && curl -fsSL https://download.swift.org/swift-5.7-branch/ubuntu2004-aarch64/${DOWNLOAD_DIR}/${download} -o latest_toolchain.tar.gz https://download.swift.org/swift-5.7-branch/ubuntu2004-aarch64/${DOWNLOAD_DIR}/${download_signature} -o latest_toolchain.tar.gz.sig && curl -fSsL https://swift.org/keys/all-keys.asc | gpg --import -  && gpg --batch --verify latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && tar -xzf latest_toolchain.tar.gz --directory / --strip-components=1 && chmod -R o+r /usr/lib/swift && rm -rf "$GNUPGHOME" latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && apt-get purge --auto-remove -y curl 1
yum install shadow-utils.x86_64 -y binutils gcc git glibc-static libbsd-devel libcurl-devel libedit libedit-devel libicu-devel libstdc++-static libxml2-devel pkg-config python2 python3 sqlite zlib-devel 1
sed -i -e 's/\*__block/\*__libc_block/g' /usr/include/unistd.h 1
set -e; export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download:' | sed 's/:[^:\/\/]/=/g')  && export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download_signature:' | sed 's/:[^:\/\/]/=/g')  && export DOWNLOAD_DIR=$(echo $download | sed "s/-${OS_VER}.tar.gz//g") && echo $DOWNLOAD_DIR > .swift_tag && export GNUPGHOME="$(mktemp -d)" && curl -fL https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download} -o latest_toolchain.tar.gz https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download_signature} -o latest_toolchain.tar.gz.sig && curl -fL https://swift.org/keys/all-keys.asc | gpg --import -  && gpg --batch --verify latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && tar -xzf latest_toolchain.tar.gz --directory / --strip-components=1 && chmod -R o+r /usr/lib/swift && rm -rf "$GNUPGHOME" latest_toolchain.tar.gz.sig latest_toolchain.tar.gz 1
export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true && apt-get -q update && apt-get -q install -y binutils git libc6-dev libcurl4-openssl-dev libedit2 libgcc-5-dev libpython3.6 libsqlite3-0 libstdc++-5-dev libxml2-dev pkg-config tzdata zlib1g-dev && rm -r /var/lib/apt/lists/* 1
set -e; export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download:' | sed 's/:[^:\/\/]/=/g')  && export $(curl -s https://download.swift.org/swift-5.7-branch/latest-build.yml | grep 'download_signature:' | sed 's/:[^:\/\/]/=/g')  && export DOWNLOAD_DIR=$(echo $download | sed "s/-${OS_VER}.tar.gz//g") && echo $DOWNLOAD_DIR > .swift_tag && export GNUPGHOME="$(mktemp -d)" && curl -fsSL https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download} -o latest_toolchain.tar.gz https://download.swift.org/swift-5.7-branch/${DOWNLOAD_DIR}/${download_signature} -o latest_toolchain.tar.gz.sig && curl -fSsL https://swift.org/keys/all-keys.asc | gpg --import -  && gpg --batch --verify latest_toolchain.tar.gz.sig latest_toolchain.tar.gz && tar -xzf latest_toolchain.tar.gz --directory / --strip-components=1 ${DOWNLOAD_DIR}-${OS_VER}/usr/lib/swift/linux && chmod -R o+r /usr/lib/swift && rm -rf "$GNUPGHOME" latest_toolchain.tar.gz.sig latest_toolchain.tar.gz 1
export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true && apt-get -q update && apt-get -q install -y binutils git gnupg2 libc6-dev libcurl4-openssl-dev libedit2 libgcc-9-dev libpython3.8 libsqlite3-0 libstdc++-9-dev libxml2-dev libz3-dev pkg-config tzdata zlib1g-dev && rm -r /var/lib/apt/lists/* 1
apt-get update && apt-get install -y libcurl4-openssl-dev libxml2-dev && rm -r /var/lib/apt/lists/* 1
ln -s /usr/lib/swift/_InternalSwiftSyntaxParser . 1
swift build -c 1
mkdir -p /executables 1
for executable in $(swift package completion-tool list-executables); do install -v `swift build -c --show-bin-path`/$executable /executables; done 1
apt-get update && apt-get install -y libcurl4 libxml2 && rm -r /var/lib/apt/lists/* 1
swiftlint version 1
rm -f syncthing && go run build.go -no-upgrade build syncthing 1
apk add --no-cache ca-certificates su-exec tzdata 1
apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends build-essential 1
echo ${pkgFile} && echo ${dirName} 1
tar -zxf ${pkgFile} 1
cd /root/${dirName}/ && /bin/bash install.sh -e no && cd /root 1
rm /root/${pkgFile} 1
rm -rf /root/${dirName} 1
apt-get clean && apt-get update && apt-get install -y locales tzdata netcat && locale-gen en_US.UTF-8 1
bash -c 'echo -e "Downloading tini-${cpuType} ..."' 1
tar -zxf TDengine-server-1.6.5.10-Linux-x64.tar.gz 1
tar -zxf TDengine-tarbitrator-1.6.5.10-Linux-x64.tar.gz 1
mv TDengine-enterprise-server/driver ./lib 1
tar -zxf TDengine-enterprise-server/taos.tar.gz 1
mv TDengine-enterprise-arbitrator/bin/* /root/bin 1
apt-get install -y vim tmux net-tools 1
echo 'alias ll="ls -l --color=auto"' >> /root/.bashrc 1
ulimit -c unlimited 1
set -ex; apt update -y --fix-missing && apt install -y gnupg curl systemctl 1
set -ex; curl -fsSL https://repos.influxdata.com/influxdb.key | apt-key add - && . /etc/lsb-release && echo 'deb https://repos.influxdata.com/ubuntu focal stable' >  /etc/apt/sources.list.d/influxdb.list && apt update -y --fix-missing && apt-get install -y --no-install-recommends telegraf && apt remove -y gnupg curl && rm -rf /var/lib/apt/lists/* 1
set -ex; apt update -y --fix-missing && apt install -y gnupg 1
set -ex; apt-key add icinga.key && apt update -y --fix-missing && apt-get install -y --no-install-recommends icinga2 monitoring-plugins systemctl && icinga2 feature enable opentsdb && rm -rf /var/lib/apt/lists/* 1
set -ex; apt update -y --fix-missing && apt-get install -y --no-install-recommends collectd && rm -rf /var/lib/apt/lists/* 1
set -ex; apt update -y --fix-missing && apt-get install -y --no-install-recommends nodejs devscripts debhelper wget netcat-traditional npm && wget http://39.105.163.10:9000/statsd.tar.gz && tar -xvf statsd.tar.gz && cd statsd && npm install && npm audit fix && rm -rf statsd.tar.gz && apt remove -y wget && rm -rf /var/lib/apt/lists/* 1
set -ex; apt update -y --fix-missing && apt-get install -y --no-install-recommends wget && wget http://39.105.163.10:9000/node_exporter-1.3.0.linux-amd64.tar.gz && tar -xvf node_exporter-1.3.0.linux-amd64.tar.gz && mv node_exporter-1.3.0.linux-amd64/node_exporter /usr/bin/node_exporter && rm -rf node_exporter-1.3.0.linux-amd64 node_exporter-1.3.0.linux-amd64.tar.gz & apt remove -y wget && rm -rf /var/lib/apt/lists/* 1
set -ex; apt update -y --fix-missing && apt-get install -y --no-install-recommends git python && git clone git://github.com/OpenTSDB/tcollector.git && apt remove -y git && rm -rf /var/lib/apt/lists/* 1
yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm && yum -y install centos-release-scl && yum -y install git meson ninja-build autoconf automake libtool patch fontconfig-devel freetype-devel libX11-devel at-spi2-core-devel alsa-lib-devel pulseaudio-libs-devel mesa-libGL-devel mesa-libEGL-devel mesa-libgbm-devel libdrm-devel gtk3-devel perl-XML-Parser pkgconfig bison yasm file which xorg-x11-util-macros devtoolset-10-make devtoolset-10-gcc devtoolset-10-gcc-c++ devtoolset-10-binutils llvm-toolset-7.0 llvm-toolset-7.0-clang-devel llvm-toolset-7.0-llvm-devel && yum clean all 1
sed -i 's/char \*__block/char */' /usr/include/unistd.h 1
mkdir /opt/cmake && curl -sSLo $CMAKE_FILE $GIT/Kitware/CMake/releases/download/v$CMAKE_VER/$CMAKE_FILE && sh $CMAKE_FILE --prefix=/opt/cmake --skip-license && ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && rm $CMAKE_FILE 1
git clone $GIT/desktop-app/patches.git && cd patches && git checkout 4a5c759f8f && rm -rf .git 1
git clone -b v3.4.2 --depth=1 $GIT/libffi/libffi.git && cd libffi && ./autogen.sh && ./configure --enable-static --disable-docs && make -j$(nproc) && make DESTDIR="$LibrariesPath/libffi-cache" install && cd .. && rm -rf libffi 1
git clone -b v1.2.11 --depth=1 $GIT/madler/zlib.git && cd zlib && CFLAGS="-O3 $HFLAGS" ./configure --static && make -j$(nproc) && make DESTDIR="$LibrariesPath/zlib-cache" install && cd .. && rm -rf zlib 1
git clone -b v5.2.5 https://git.tukaani.org/xz.git && cd xz && CFLAGS="$HFLAGS" cmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release && cmake --build build --parallel && DESTDIR="$LibrariesPath/xz-cache" cmake --install build && cd .. && rm -rf xz 1
git clone -b 0.4.17 --depth=1 $GIT/libproxy/libproxy.git && cd libproxy && git apply ../patches/libproxy.patch && CFLAGS="$HFLAGS" CXXFLAGS="$HFLAGS" cmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release -DWITH_DBUS=OFF -DWITH_NM=OFF -DWITH_NMold=OFF && cmake --build build --parallel && DESTDIR="$LibrariesPath/libproxy-cache" cmake --install build && cd .. && rm -rf libproxy 1
git clone -b v4.0.3 --depth=1 $GIT/mozilla/mozjpeg.git && cd mozjpeg && CFLAGS="$HFLAGS" cmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_JPEG8=ON -DPNG_SUPPORTED=OFF && cmake --build build --parallel && DESTDIR="$LibrariesPath/mozjpeg-cache" cmake --install build && cd .. && rm -rf mozjpeg 1
git clone -b v1.3.1 --depth=1 $GIT/xiph/opus.git && cd opus && ./autogen.sh && CFLAGS="-g -O2 $HFLAGS" ./configure && make -j$(nproc) && make DESTDIR="$LibrariesPath/opus-cache" install && cd .. && rm -rf opus 1
git clone -b v1.11.0 --depth=1 $GIT/webmproject/libvpx.git && cd libvpx && ./configure --disable-examples --disable-unit-tests --disable-tools --disable-docs --enable-vp8 --enable-vp9 --enable-webm-io && make -j$(nproc) && make DESTDIR="$LibrariesPath/libvpx-cache" install && cd .. && rm -rf libvpx 1
git clone -b master --depth=1 $GIT/desktop-app/rnnoise && cd rnnoise && CFLAGS="$HFLAGS" cmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release && cmake --build build --parallel && mkdir -p "$LibrariesPath/rnnoise-cache/usr/local/include" && cp "include/rnnoise.h" "$LibrariesPath/rnnoise-cache/usr/local/include/" && mkdir -p "$LibrariesPath/rnnoise-cache/usr/local/lib" && cp "build/librnnoise.a" "$LibrariesPath/rnnoise-cache/usr/local/lib/" && cd .. && rm -rf rnnoise 1
git clone -b xcb-proto-1.14.1 --depth=1 $GIT_FREEDESKTOP/xcbproto.git && cd xcbproto && ./autogen.sh && make -j$(nproc) && make DESTDIR="$LibrariesPath/xcb-proto-cache" install && cd .. && rm -rf xcbproto 1
git clone -b libxcb-1.14 --depth=1 $GIT_FREEDESKTOP/libxcb.git && cd libxcb && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/xcb-cache" install && cd .. && rm -rf libxcb 1
git clone -b 0.4.1 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-wm.git && cd libxcb-wm && ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/xcb-wm-cache" install && cd .. && rm -rf libxcb-wm 1
git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-util.git && cd libxcb-util && ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/xcb-util-cache" install && cd .. && rm -rf libxcb-util 1
git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-image.git && cd libxcb-image && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/xcb-image-cache" install && cd .. && rm -rf libxcb-image 1
git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-keysyms.git && cd libxcb-keysyms && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/xcb-keysyms-cache" install && cd .. && rm -rf libxcb-keysyms 1
git clone -b 0.3.9 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-render-util.git && cd libxcb-render-util && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/xcb-render-util-cache" install && cd .. && rm -rf libxcb-render-util 1
git clone -b libXext-1.3.4 --depth=1 $GIT_FREEDESKTOP/libxext.git && cd libxext && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/libXext-cache" install && cd .. && rm -rf libxext 1
git clone -b libXtst-1.2.3 --depth=1 $GIT_FREEDESKTOP/libxtst.git && cd libxtst && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/libXtst-cache" install && cd .. && rm -rf libxtst 1
git clone -b libXfixes-5.0.3 --depth=1 $GIT_FREEDESKTOP/libxfixes.git && cd libxfixes && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/libXfixes-cache" install && cd .. && rm -rf libxfixes 1
git clone -b libXrandr-1.5.2 --depth=1 $GIT_FREEDESKTOP/libxrandr.git && cd libxrandr && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/libXrandr-cache" install && cd .. && rm -rf libxrandr 1
git clone -b libXrender-0.9.10 --depth=1 $GIT_FREEDESKTOP/libxrender.git && cd libxrender && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/libXrender-cache" install && cd .. && rm -rf libxrender 1
git clone -b libXdamage-1.1.5 --depth=1 $GIT_FREEDESKTOP/libxdamage.git && cd libxdamage && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/libXdamage-cache" install && cd .. && rm -rf libxdamage 1
git clone -b libXcomposite-0.4.5 --depth=1 $GIT_FREEDESKTOP/libxcomposite.git && cd libxcomposite && CFLAGS="-g -O2 $HFLAGS" ./autogen.sh --enable-static && make -j$(nproc) && make DESTDIR="$LibrariesPath/libXcomposite-cache" install && cd .. && rm -rf libxcomposite 1
git clone -b 1.20.0 --depth=1 $GIT_FREEDESKTOP/wayland.git && cd wayland && meson build --buildtype=release --default-library=both -Dtests=false -Ddocumentation=false -Ddtd_validation=false -Dicon_directory=/usr/share/icons && meson compile -C build && DESTDIR="$LibrariesPath/wayland-cache" meson install -C build && cd .. && rm -rf wayland 1
git clone -b n11.1.5.1 --depth=1 https://github.com/FFmpeg/nv-codec-headers.git && DESTDIR="$LibrariesPath/nv-codec-headers-cache" make -C nv-codec-headers install && rm -rf nv-codec-headers 1
git init ffmpeg && cd ffmpeg && git remote add origin $GIT/FFmpeg/FFmpeg.git && git fetch --depth=1 origin cc33e73618a981de7fd96385ecb34719de031f16 && git reset --hard FETCH_HEAD && ./configure --extra-cflags="-DCONFIG_SAFE_BITSTREAM_READER=1 $HFLAGS" --extra-cxxflags="-DCONFIG_SAFE_BITSTREAM_READER=1 $HFLAGS" --disable-debug --disable-programs --disable-doc --disable-network --disable-autodetect --disable-everything --enable-libopus --enable-libvpx --enable-ffnvcodec --enable-nvdec --enable-cuvid --enable-protocol=file --enable-hwaccel=av1_nvdec --enable-hwaccel=h264_nvdec --enable-hwaccel=hevc_nvdec --enable-hwaccel=mpeg2_nvdec --enable-hwaccel=mpeg4_nvdec --enable-hwaccel=vp8_nvdec --enable-decoder=aac --enable-decoder=aac_fixed --enable-decoder=aac_latm --enable-decoder=aasc --enable-decoder=ac3 --enable-decoder=alac --enable-decoder=av1 --enable-decoder=av1_cuvid --enable-decoder=eac3 --enable-decoder=flac --enable-decoder=gif --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=libvpx_vp8 --enable-decoder=libvpx_vp9 --enable-decoder=mp1 --enable-decoder=mp1float --enable-decoder=mp2 --enable-decoder=mp2float --enable-decoder=mp3 --enable-decoder=mp3adu --enable-decoder=mp3adufloat --enable-decoder=mp3float --enable-decoder=mp3on4 --enable-decoder=mp3on4float --enable-decoder=mpeg4 --enable-decoder=msmpeg4v2 --enable-decoder=msmpeg4v3 --enable-decoder=opus --enable-decoder=pcm_alaw --enable-decoder=pcm_f32be --enable-decoder=pcm_f32le --enable-decoder=pcm_f64be --enable-decoder=pcm_f64le --enable-decoder=pcm_lxf --enable-decoder=pcm_mulaw --enable-decoder=pcm_s16be --enable-decoder=pcm_s16be_planar --enable-decoder=pcm_s16le --enable-decoder=pcm_s16le_planar --enable-decoder=pcm_s24be --enable-decoder=pcm_s24daud --enable-decoder=pcm_s24le --enable-decoder=pcm_s24le_planar --enable-decoder=pcm_s32be --enable-decoder=pcm_s32le --enable-decoder=pcm_s32le_planar --enable-decoder=pcm_s64be --enable-decoder=pcm_s64le --enable-decoder=pcm_s8 --enable-decoder=pcm_s8_planar --enable-decoder=pcm_u16be --enable-decoder=pcm_u16le --enable-decoder=pcm_u24be --enable-decoder=pcm_u24le --enable-decoder=pcm_u32be --enable-decoder=pcm_u32le --enable-decoder=pcm_u8 --enable-decoder=pcm_zork --enable-decoder=vorbis --enable-decoder=vp8 --enable-decoder=wavpack --enable-decoder=wmalossless --enable-decoder=wmapro --enable-decoder=wmav1 --enable-decoder=wmav2 --enable-decoder=wmavoice --enable-encoder=libopus --enable-parser=aac --enable-parser=aac_latm --enable-parser=flac --enable-parser=h264 --enable-parser=hevc --enable-parser=mpeg4video --enable-parser=mpegaudio --enable-parser=opus --enable-parser=vorbis --enable-demuxer=aac --enable-demuxer=flac --enable-demuxer=gif --enable-demuxer=h264 --enable-demuxer=hevc --enable-demuxer=matroska --enable-demuxer=m4v --enable-demuxer=mov --enable-demuxer=mp3 --enable-demuxer=ogg --enable-demuxer=wav --enable-muxer=ogg --enable-muxer=opus && make -j$(nproc) && make DESTDIR="$LibrariesPath/ffmpeg-cache" install && cd .. && rm -rf ffmpeg 1
git clone -b 0.3.42 --depth=1 $GIT/PipeWire/pipewire.git && cd pipewire && meson build --buildtype=release -Dtests=disabled -Dexamples=disabled -Dpipewire-v4l2=disabled -Dspa-plugins=disabled -Dsession-managers=[] && meson compile -C build && DESTDIR="$LibrariesPath/pipewire-cache" meson install -C build && cd .. && rm -rf pipewire 1
git clone -b 1.22.0 --depth=1 $GIT/kcat/openal-soft.git && cd openal-soft && curl -sSL https://github.com/kcat/openal-soft/commit/2ea5bb91686ee1a7350672bf15b7b63649dbf111.patch | git apply && CFLAGS="$HFLAGS" CXXFLAGS="$HFLAGS" cmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release -DLIBTYPE:STRING=STATIC -DALSOFT_EXAMPLES=OFF -DALSOFT_TESTS=OFF -DALSOFT_UTILS=OFF -DALSOFT_INSTALL_CONFIG=OFF && cmake --build build --parallel && DESTDIR="$LibrariesPath/openal-cache" cmake --install build && cd .. && rm -rf openal-soft 1
git clone -b OpenSSL_${OPENSSL_VER}-stable --depth=1 $GIT/openssl/openssl.git $opensslDir && cd $opensslDir && ./config --prefix="$OPENSSL_PREFIX" --openssldir=/etc/ssl no-tests no-dso && make -j$(nproc) && make DESTDIR="$LibrariesPath/openssl-cache" install_sw && cd .. && rm -rf $opensslDir 1
git clone -b xkbcommon-1.3.1 --depth=1 $GIT/xkbcommon/libxkbcommon.git && cd libxkbcommon && meson build --buildtype=release --default-library=both -Denable-docs=false -Denable-wayland=false -Denable-xkbregistry=false -Dxkb-config-root=/usr/share/X11/xkb -Dxkb-config-extra-path=/etc/xkb -Dx-locale-root=/usr/share/X11/locale && meson compile -C build && DESTDIR="$LibrariesPath/xkbcommon-cache" meson install -C build && cd .. && rm -rf libxkbcommon 1
git clone -b 1.0.3 --depth=1 $GIT/GNOME/mm-common.git && cd mm-common && NOCONFIGURE=1 ./autogen.sh && ./configure --enable-network && make -j$(nproc) && make DESTDIR="$LibrariesPath/mm-common-cache" install && cd .. && rm -rf mm-common 1
git clone -b 2.10.7 --depth=1 $GIT/libsigcplusplus/libsigcplusplus.git && cd libsigcplusplus && export ACLOCAL_PATH="/usr/local/share/aclocal" && NOCONFIGURE=1 ./autogen.sh && CFLAGS="-g -O2 $HFLAGS" CXXFLAGS="-g -O2 $HFLAGS" ./configure --enable-maintainer-mode --enable-static --disable-documentation && make -j$(nproc) && make DESTDIR="$LibrariesPath/libsigcplusplus-cache" install && cd .. && rm -rf libsigcplusplus 1
git clone -b 2.40.0 --depth=1 $GIT/GNOME/glibmm.git && cd glibmm && git apply ../patches/glibmm.patch && export ACLOCAL_PATH="/usr/local/share/aclocal" && NOCONFIGURE=1 ./autogen.sh && CC="gcc -flto $HFLAGS" CXX="g++ -flto $HFLAGS" AR=gcc-ar RANLIB=gcc-ranlib ./configure --enable-maintainer-mode --enable-static --disable-documentation && make -j$(nproc) && make DESTDIR="$LibrariesPath/glibmm-cache" install && cd .. && rm -rf glibmm 1
git clone -b ${QT_TAG} --depth=1 git://code.qt.io/qt/qt5.git qt_${QT} && cd qt_${QT} && git submodule update --init --recursive --depth=1 qtbase qtwayland qtimageformats qtsvg qt5compat && cd qtbase && find ../../patches/qtbase_${QT} -type f -print0 | sort -z | xargs -r0 git apply && cd .. && ./configure -prefix "$QT_PREFIX" -release ${DEBUG:+-force-debug-info} -opensource -confirm-license -libproxy -qt-libpng -qt-harfbuzz -qt-pcre -no-icu -no-feature-xcb-sm -no-feature-egl-extension-platform-wayland -no-feature-wayland-server -no-feature-highdpiscaling -static -dbus-runtime -openssl-linked -nomake examples -nomake tests && cmake --build . --parallel && DESTDIR="$LibrariesPath/qt-cache" cmake --install . && cd .. && rm -rf qt_${QT} 1
git clone https://chromium.googlesource.com/breakpad/breakpad.git && cd breakpad && git checkout dfcb7b6799 && git apply ../patches/breakpad.diff && git clone https://chromium.googlesource.com/linux-syscall-support.git src/third_party/lss && cd src/third_party/lss && git checkout e1e7b0ad8e && cd ../../.. && ./configure && make -j$(nproc) && make DESTDIR="${LibrariesPath}/breakpad-cache" install && cd .. && rm -rf breakpad 1
git init tg_owt && cd tg_owt && git remote add origin $GIT/desktop-app/tg_owt.git && git fetch --depth=1 origin 442d5bb593c0ae314960308d78f2016ad1f80c3e && git reset --hard FETCH_HEAD && git submodule update --init --recursive --depth=1 && rm -rf .git && cmake -G"Ninja Multi-Config" -B out . -DCMAKE_C_FLAGS_RELEASE="-O3 -DNDEBUG $HFLAGS" -DCMAKE_C_FLAGS_DEBUG="-g $HFLAGS_DEBUG" -DCMAKE_CXX_FLAGS_RELEASE="-O3 -DNDEBUG $HFLAGS" -DCMAKE_CXX_FLAGS_DEBUG="-g $HFLAGS_DEBUG" -DTG_OWT_SPECIAL_TARGET=linux -DTG_OWT_LIBJPEG_INCLUDE_PATH=/usr/local/include -DTG_OWT_OPENSSL_INCLUDE_PATH=$OPENSSL_PREFIX/include -DTG_OWT_OPUS_INCLUDE_PATH=/usr/local/include/opus -DTG_OWT_LIBVPX_INCLUDE_PATH=/usr/local/include -DTG_OWT_FFMPEG_INCLUDE_PATH=/usr/local/include 1
cmake --build out --config Release --parallel && find out -mindepth 1 -maxdepth 1 ! -name Release -exec rm -rf {} \; 1
[ -z "$DEBUG" ] || (cmake --build out --config Debug --parallel && find out -mindepth 1 -maxdepth 1 ! -name Debug -exec rm -rf {} \;) 1
[ -n "$DEBUG" ] || mkdir -p out/Debug 1
apk add --no-cache ca-certificates libstdc++ su-exec libpq 1
set -eux; addgroup -g 9987 ts3server; adduser -u 9987 -Hh /var/ts3server -G ts3server -s /sbin/nologin -D ts3server; install -d -o ts3server -g ts3server -m 775 /var/ts3server /var/run/ts3server /opt/ts3server 1
set -eux; apk add --no-cache --virtual .fetch-deps tar; wget "https://files.teamspeak-services.com/releases/server/3.13.6/teamspeak3-server_linux_alpine-3.13.6.tar.bz2" -O server.tar.bz2; echo "f30a5366f12b0c5b00476652ebc06d9b5bc4754c4cb386c086758cceb620a8d0 *server.tar.bz2" | sha256sum -c -; mkdir -p /opt/ts3server; tar -xf server.tar.bz2 --strip-components=1 -C /opt/ts3server; rm server.tar.bz2; apk del .fetch-deps; mv /opt/ts3server/*.so /opt/ts3server/redist/* /usr/local/lib; ldconfig /usr/local/lib 1
apt-get update && apt-get install -y --no-install-recommends cmake && rm -rf /var/lib/apt/lists/* 1
git clone --depth=1 https://github.com/illiliti/libudev-zero.git -b 1.0.1 && cd libudev-zero && make install-static 1
git clone --depth=1 https://github.com/PJK/libcbor.git -b v0.9.0 && cd libcbor && cmake -DCBOR_CUSTOM_ALLOC=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DWITH_EXAMPLES=OFF . && make && make install 1
git clone --depth=1 https://github.com/Yubico/libfido2.git -b 1.11.0 && cd libfido2 && CFLAGS=-pthread cmake -DBUILD_EXAMPLES=OFF -DBUILD_MANPAGES=OFF -DBUILD_TOOLS=OFF -DCMAKE_BUILD_TYPE=Release . && make && make install 1
apt-get update -y --fix-missing && apt-get -q -y upgrade && apt-get install -q -y --no-install-recommends apt-utils build-essential ca-certificates clang-10 clang-format-10 curl default-jre `if [ "$BUILDARCH" = "amd64" ] ; then echo gcc-multilib; fi`  git gnupg gzip libc6-dev libelf-dev libpam-dev libsqlite3-0 libssl-dev libudev-dev llvm-10 locales mingw-w64 mingw-w64-x86-64-dev net-tools openssh-client osslsigncode python3-pip python3-setuptools python3-wheel pkg-config shellcheck softhsm2  tree unzip zip zlib1g-dev xauth && pip3 --no-cache-dir install yamllint && dpkg-reconfigure locales && apt-get -y clean && rm -rf /var/lib/apt/lists/* 1
curl -sSL https://sdk.cloud.google.com | bash -s -- --install-dir=/opt --disable-prompts 1
gcloud components install cloud-firestore-emulator beta 1
(groupadd ci --gid=$GID -o && useradd ci --uid=$UID --gid=$GID --create-home --shell=/bin/sh && mkdir -p -m0700 /var/lib/teleport && chown -R ci /var/lib/teleport) 1
(curl -L https://github.com/coreos/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-${BUILDARCH}.tar.gz | tar -xz && cp etcd-v3.3.9-linux-${BUILDARCH}/etcd* /bin/) 1
mkdir -p /opt && cd /opt && curl https://storage.googleapis.com/golang/$GOLANG_VERSION.linux-${BUILDARCH}.tar.gz | tar xz && mkdir -p /go/src/github.com/gravitational/teleport && chmod a+w /go && chmod a+w /var/lib && chmod a-w / 1
mkdir -p /opt && cd /opt && curl -L https://github.com/gravitational/libbpf/archive/refs/tags/v${LIBBPF_VERSION}.tar.gz | tar xz && cd /opt/libbpf-${LIBBPF_VERSION}/src && make && make install 1
go install github.com/google/addlicense@v1.0.0 1
(curl -L https://github.com/golangci/golangci-lint/releases/download/v1.46.0/golangci-lint-1.46.0-$(go env GOOS)-$(go env GOARCH).tar.gz | tar -xz && cp golangci-lint-1.46.0-$(go env GOOS)-$(go env GOARCH)/golangci-lint /bin/ && rm -r golangci-lint*) 1
(mkdir -p helm-tarball && curl -L https://get.helm.sh/helm-v3.5.2-$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C helm-tarball -xz && cp helm-tarball/$(go env GOOS)-$(go env GOARCH)/helm /bin/ && rm -r helm-tarball*) 1
helm plugin install https://github.com/vbehar/helm3-unittest && mkdir -p /home/ci/.local/share/helm && cp -r /root/.local/share/helm/plugins /home/ci/.local/share/helm && chown -R ci /home/ci/.local/share/helm && HELM_PLUGINS=/home/ci/.local/share/helm/plugins helm plugin list 1
(curl -L https://github.com/bats-core/bats-core/archive/v1.2.1.tar.gz | tar -xz && cd bats-core-1.2.1 && ./install.sh /usr/local && cd .. && rm -r bats-core-1.2.1) 1
(export PROTOC_TARBALL=protoc-${PROTOC_VER}-linux-$(if [ "$BUILDARCH" = "amd64" ]; then echo "x86_64"; else echo "aarch_64"; fi).zip && curl -L -o /tmp/${PROTOC_TARBALL} https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VER}/${PROTOC_TARBALL} && cd /tmp && unzip /tmp/${PROTOC_TARBALL} -d /usr/local && chmod -R a+r /usr/local/include/google/protobuf && chmod -R a+xr /usr/local/bin/protoc && rm /tmp/${PROTOC_TARBALL}) 1
(git clone https://github.com/gogo/protobuf.git /go/src/github.com/gogo/protobuf && cd /go/src/github.com/gogo/protobuf && git reset --hard ${GOGO_PROTO_TAG} && make install) 1
make -C /opt/pam_teleport install 1
mkdir -p /usr/local/rustup && chmod a+w /usr/local/rustup && mkdir -p $CARGO_HOME/registry && chmod -R a+w $CARGO_HOME 1
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain $RUST_VERSION && rustup --version && cargo --version && rustc --version && rustup component add rustfmt clippy && if [ "$BUILDARCH" = "amd64" ]; then rustup target add i686-unknown-linux-gnu arm-unknown-linux-gnueabihf aarch64-unknown-linux-gnu; fi && cargo install cbindgen 1
cd /usr/local/lib && ln -s libfido2.so.1.11.0 libfido2.so.1 && ln -s libfido2.so.1 libfido2.so && ldconfig 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y ca-certificates dumb-init libelf1 && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y net-tools iputils-ping inetutils-telnet netcat tcpdump busybox && busybox --install -s && update-ca-certificates && apt-get -y clean && rm -rf /var/lib/apt/lists/* 1
apt-get update && apt-get install -y htop vim screen && mkdir -p /root/go/src/github.com/gravitational/teleport 1
apt-get install -y ansible ssh inetutils-syslogd 1
mkdir /run/sshd 1
python3 -m pip install --no-cache-dir jupyter_http_over_ws ipykernel==5.1.1 nbformat==4.4.0 jedi==0.17.2 1
mkdir -p /tf/tensorflow-tutorials && chmod -R a+rwx /tf/ 1
apt-get update && apt-get install -y --no-install-recommends wget git 1
wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/classification.ipynb 1
wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/overfit_and_underfit.ipynb 1
wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/regression.ipynb 1
wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/save_and_load.ipynb 1
wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/text_classification.ipynb 1
wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/text_classification_with_hub.ipynb 1
apt-get autoremove -y && apt-get remove -y wget 1
apt-get update && apt-get install -y --no-install-recommends --fix-missing curl software-properties-common 1
apt-get update && apt-get install -y --no-install-recommends --fix-missing python3 1
curl -fSsL https://bootstrap.pypa.io/get-pip.py | python3 1
ln -sf $(which python3) /usr/local/bin/python && ln -sf $(which python3) /usr/local/bin/python3 && ln -sf $(which python3) /usr/bin/python && ln -sf $(which python3) /usr/bin/python3 1
python3 -m pip install --no-cache-dir tensorflow${TF_PACKAGE_VERSION:+==} 1
apt-get update && apt-get install -y --no-install-recommends --fix-missing mpich libmpich-dev openssh-client openssh-server && apt-get clean && rm -rf /var/lib/apt/lists/* 1
mv /usr/bin/mpirun /usr/bin/mpirun.real && echo '#!/bin/bash' > /usr/bin/mpirun && echo 'mpirun.real "$@"' >> /usr/bin/mpirun && chmod a+x /usr/bin/mpirun 1
sed -i 's/# if __GNUC__ > 5/# if __GNUC__ > 9/g' /usr/include/mpich/mpicxx.h 1
apt-get update && apt-get install -y --no-install-recommends --fix-missing software-properties-common 1
cd /usr/lib/python3/dist-packages && ln -sf apt_pkg.cpython-35m-x86_64-linux-gnu.so apt_pkg.so 1
add-apt-repository ppa:ubuntu-toolchain-r/test 1
apt-get update && apt-get install -y --no-install-recommends --fix-missing build-essential cmake g++-8 gcc-8 git python3-dev 1
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 500 --slave /usr/bin/g++ g++ /usr/bin/g++-5 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8 1
python3 -m pip install git+https://github.com/horovod/horovod.git@v0.21.1 1
yum clean all && yum update -y && yum install -y epel-release 1
sed -i 's#/usr/bin/python#/usr/bin/python2#g' /usr/bin/yum /usr/libexec/urlgrabber-ext-down 1
apk add --no-cache git bash openssh 1
/bin/bash ./scripts/build.sh 1
DEBIAN_FRONTEND=noninteractive apt-get install -y cmake curl git ruby bundler wget unzip && apt-get clean && rm -rf /var/lib/apt/lists/* 1
gem install bundler travis -no-ri -no-rdoc 1
git clone --depth 1 https://github.com/travis-ci/travis-build ~/.travis/travis-build 1
bundle install --gemfile ~/.travis/travis-build/Gemfile 1
travis compile | sed -e "s/--branch\\\=\\\'\\\'/--branch=master/g" | bash 1
pip3 --disable-pip-version-check --no-cache-dir install -r /tmp/pip-tmp/requirements.txt && rm -rf /tmp/pip-tmp 1
chmod a+x /tmp/*.sh && mv /tmp/start-tb-http-transport.sh /usr/bin 1
chmod a+x /tmp/*.sh && mv /tmp/start-tb-snmp-transport.sh /usr/bin 1
chmod a+x /tmp/*.sh && mv /tmp/start-tb-mqtt-transport.sh /usr/bin 1
chmod a+x /tmp/*.sh && mv /tmp/start-tb-coap-transport.sh /usr/bin 1
git clone https://github.com/pingcap/go-ycsb.git --depth=1 && cd go-ycsb && make 1
apt-get update && apt-get install -y --no-install-recommends git curl vim less default-mysql-client && rm -rf /var/lib/apt/lists/* 1
apk add --no-cache wget make git gcc binutils-gold musl-dev 1
wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64 && chmod +x /usr/local/bin/dumb-init 1
mkdir -p /go/src/github.com/pingcap/tidb 1
GO111MODULE=on go mod download 1
apk add --no-cache curl 1
apt-get update && apt-get install -y apt-utils make cmake clang-11 binutils-avr gcc-avr avr-libc ninja-build 1
cd /tinygo/ && make llvm-source 1
cd /tinygo/ && make llvm-build 1
cd /tmp/ && wget -q https://dl.espressif.com/dl/xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz && tar xzf xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz && cp ./xtensa-esp32-elf/bin/xtensa-esp32-elf-ld /usr/local/bin/ && rm -rf /tmp/xtensa* 1
cd /tinygo/ && rm -rf ./lib/*/ && git submodule sync && git submodule update --init --recursive --force 1
cd /tinygo/ && make 1
cd /tinygo/ && make wasi-libc binaryen && make gen-device -j4 && cp build/* $GOPATH/bin/ 1
mkdir -m 777 -p /deployments 1
chmod 777 /deployments/webapps 1
sh -c 'touch app.jar' 1
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - 1
echo "deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list 1
apt update && apt -y install postgresql-13 postgresql-client-13 1
service postgresql start && psql -c "create role tooljet with login superuser password 'postgres';" 1
npm --prefix server install --only=production 1
npm --prefix frontend install 1
npm --prefix server install 1
npm --prefix frontend install --only=production 1
apt-get update && apt-get -y install --no-install-recommends wget gnupg ca-certificates apt-utils curl luarocks make build-essential g++ gcc autoconf 1
luarocks install lua-resty-auto-ssl 1
mkdir /etc/resty-auto-ssl /var/log/openresty /var/www /etc/fallback-certs 1
pip install --no-cache-dir -r requirements.txt 1
apk --no-cache --no-progress add git mercurial bash gcc musl-dev curl tar ca-certificates tzdata && update-ca-certificates && rm -rf /var/cache/apk/* 1
mkdir -p /usr/local/bin && curl -fL https://download.docker.com/linux/static/stable/x86_64/docker-18.09.7.tgz | tar -xzC /usr/local/bin --transform 's#^.+/##x' 1
curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | bash -s -- -b $GOPATH/bin v1.46.2 1
curl -sfL https://raw.githubusercontent.com/client9/misspell/master/install-misspell.sh | bash -s -- -b $GOPATH/bin v0.3.4 1
curl -sfL https://gist.githubusercontent.com/traefiker/6d7ac019c11d011e4f131bb2cca8900e/raw/goreleaser.sh | sh 1
git config --global --add safe.directory "" 1
GO111MODULE=on GOPROXY=https://proxy.golang.org go mod download 1
apk --no-cache --no-progress add build-base libcurl libxml2-dev libxslt-dev ruby ruby-bigdecimal ruby-dev ruby-etc ruby-ffi ruby-json zlib-dev 1
gem install nokogiri --version 1.13.3 --no-document -- --use-system-libraries 1
gem install html-proofer --version 3.19.3 --no-document -- --use-system-libraries 1
apk --no-cache --no-progress add git nodejs npm 1
npm config set unsafe-perm true 1
npm install --global markdownlint@0.22.0 markdownlint-cli@0.26.0 1
apk --no-cache --no-progress add ca-certificates curl tini 1
apk --no-cache --no-progress add bash curl ca-certificates tzdata lsof iproute2 && update-ca-certificates && rm -rf /var/cache/apk/* 1
apk --no-cache --no-progress add py3-pip gcc musl-dev python3-dev && pip3 install --user -r requirements.txt 1
set -ex; apkArch="$(apk --print-arch)"; case "$apkArch" in armhf) arch='armv6' ;; aarch64) arch='arm64' ;; x86_64) arch='amd64' ;; *) echo >&2 "error: unsupported architecture: $apkArch"; exit 1 ;; esac; wget --quiet -O /tmp/traefik.tar.gz "https://github.com/containous/traefik/releases/download/${VERSION}/traefik_${VERSION}_linux_$arch.tar.gz"; tar xzvf /tmp/traefik.tar.gz -C /usr/local/bin traefik; rm -f /tmp/traefik.tar.gz; chmod +x /usr/local/bin/traefik 1
set -ex; apkArch="$(apk --print-arch)"; case "$apkArch" in armhf) arch='armv6' ;; aarch64) arch='arm64' ;; x86_64) arch='amd64' ;; *) echo >&2 "error: unsupported architecture: $apkArch"; exit 1 ;; esac; wget --quiet -O /tmp/traefik.tar.gz "https://github.com/containous/traefik/releases/download/v2.3.0-rc5/traefik_v2.3.0-rc5_linux_$arch.tar.gz"; tar xzvf /tmp/traefik.tar.gz -C /usr/local/bin traefik; rm -f /tmp/traefik.tar.gz; chmod +x /usr/local/bin/traefik 1
set -ex; apkArch="$(apk --print-arch)"; case "$apkArch" in armhf) arch='arm' ;; aarch64) arch='arm64' ;; x86_64) arch='amd64' ;; *) echo >&2 "error: unsupported architecture: $apkArch"; exit 1 ;; esac; wget --quiet -O /usr/local/bin/traefik "https://github.com/containous/traefik/releases/download/$VERSION/traefik_linux-$arch"; chmod +x /usr/local/bin/traefik 1
apk add git musl-dev 1
CGO_ENABLED=0 go build -tags netgo -ldflags "-X github.com/dutchcoders/transfer.sh/cmd.Version=$(git describe --tags) -a -s -w -extldflags '-static'" -o /go/bin/transfersh 1
mkdir -p /tmp/useradd && if [ ! -z "$RUNAS" ]; then echo "${RUNAS}:x:5000:${PGID}::/nonexistent:/sbin/nologin" >> /tmp/useradd/passwd && echo "${RUNAS}:!:::::::" >> /tmp/useradd/shadow && echo "${RUNAS}:x:${PGID}:" >> /tmp/useradd/group && echo "${RUNAS}:!::" >> /tmp/useradd/groupshadow; else touch /tmp/useradd/unused; fi 1
git clone https://github.com/huggingface/transformers 1
python3 -m pip install --no-cache-dir --upgrade pip && python3 -m pip install --no-cache-dir git+https://github.com/huggingface/doc-builder ./transformers[dev] 1
apt-get -y update && apt-get install -y libsndfile1-dev && apt install -y tesseract-ocr 1
python3 -m pip install --no-cache-dir ./transformers[deepspeed] 1
python3 -m pip install --no-cache-dir torch-scatter -f https://data.pyg.org/whl/torch-$(python -c "from torch import version; print(version.__version__.split('+')[0])")+cpu.html 1
python3 -m pip install --no-cache-dir torchvision git+https://github.com/facebookresearch/detectron2.git pytesseract https://github.com/kpu/kenlm/archive/master.zip 1
python3 -m pip install --no-cache-dir pytorch-quantization --extra-index-url https://pypi.ngc.nvidia.com 1
python3 -m pip install -U "itsdangerous<2.1.0" 1
doc-builder build transformers transformers/docs/source/en --build_dir doc-build-dev --notebook_dir notebooks/transformers_doc --clean 1
rm -rf doc-build-dev 1
apt-get update && apt-get install -y --no-install-recommends build-essential cmake git curl ca-certificates 1
curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh  && chmod +x ~/miniconda.sh && ~/miniconda.sh -b && rm ~/miniconda.sh 1
conda create -y --name container python=3.6 1
conda install -y python=3.6 mkl 1
pip uninstall -y torch && gsutil cp 'gs://tpu-pytorch/wheels/torch-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' . && gsutil cp 'gs://tpu-pytorch/wheels/torch_xla-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' . && gsutil cp 'gs://tpu-pytorch/wheels/torchvision-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' . && pip install 'torch-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && pip install 'torch_xla-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && pip install 'torchvision-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && rm 'torch-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && rm 'torch_xla-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && rm 'torchvision-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && apt-get install -y libomp5 1
git clone https://github.com/huggingface/transformers.git && cd transformers && git fetch origin refs/heads/main:CI && git checkout CI && cd .. && pip install ./transformers && pip install -r ./transformers/examples/pytorch/_test_requirements.txt && pip install pytest 1
python -c "import torch_xla; print(torch_xla.__version__)" 1
python -c "import transformers as trf; print(trf.__version__)" 1
conda init bash 1
python3 -m pip install --no-cache-dir --upgrade pip && python3 -m pip install --no-cache-dir mkl tensorflow-cpu 1
python3 -m pip install --no-cache-dir --upgrade pip && python3 -m pip install --no-cache-dir jupyter torch 1
python3 -m pip install --no-cache-dir --upgrade pip && python3 -m pip install --no-cache-dir jupyter tensorflow-cpu torch 1
apk --no-cache add ca-certificates git 1
tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things 1
apk add --no-cache --virtual .build-deps build-base cmake boost-dev openssl-dev mariadb-connector-c-dev && (cd trojan && cmake . && make -j $(nproc) && strip -s trojan && mv trojan /usr/local/bin) && rm -rf trojan && apk del .build-deps && apk add --no-cache --virtual .trojan-rundeps libstdc++ boost-system boost-program_options mariadb-connector-c 1
apt-get -y install python2.7 python3.5 libgomp1 1
python2.7 get-pip.py 1
pip2.7 install virtualenv 1
python3.5 get-pip.py 1
pip3.5 install virtualenv 1
apt-get -y install python3.6 python3.6-distutils python3.7 python3.7-distutils libgomp1 lsb-release npm nodejs doxygen zip 1
apt-get -y install software-properties-common 1
add-apt-repository -y ppa:deadsnakes/ppa 1
apt-get -y install python3.8 1
apt-get -y install python3.9 python3.9-distutils 1
apt-get -y install build-essential libpython3.6-dev libpython3.7-dev 1
ln -s /usr/include/locale.h /usr/include/xlocale.h 1
python3.6 get-pip.py 1
pip3.6 install virtualenv 1
python3.7 get-pip.py 1
pip3.7 install virtualenv 1
python3.8 get-pip.py 1
pip3.8 install virtualenv 1
python3.9 get-pip.py 1
pip3.9 install virtualenv 1
echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C 1
echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 && echo "oracle-java7-installer shared/accepted-oracle-license-v1-1 select true" | debconf-set-selections 1
echo "deb http://download.mono-project.com/repo/debian wheezy main" | tee /etc/apt/sources.list.d/mono-xamarin.list && echo "deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main" | tee -a /etc/apt/sources.list.d/mono-xamarin.list && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF 1
echo "deb http://ppa.launchpad.net/ondrej/php/ubuntu trusty main" | tee /etc/apt/sources.list.d/various-php.list && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F4FCBB07 1
apt-get update && apt-get install -y --force-yes curl libunwind8 gettext && curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=809130 &&  mkdir -p /opt/dotnet && tar zxf dotnet.tar.gz -C /opt/dotnet && ln -s /opt/dotnet/dotnet /usr/local/bin 1
apt-get clean && apt-get update && apt-get install -y --force-yes autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget mono-devel referenceassemblies-pcl nunit maven openjdk-7-jdk oracle-java7-installer python-setuptools python-pip python-dev python2.6-dev python3.3-dev python3.4-dev ruby cmake php5.6     php5.6-dev php5.6-xml php7.0     php7.0-dev php7.0-xml phpunit    valgrind   libxml2-dev && apt-get clean 1
wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe 1
pip install pip --upgrade 1
pip install virtualenv tox yattag 1
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 1
\curl -sSL https://get.rvm.io | bash -s stable 1
/bin/bash -l -c "rvm install ruby-2.1" 1
/bin/bash -l -c "rvm install ruby-2.2" 1
/bin/bash -l -c "rvm install jruby-1.7" 1
/bin/bash -l -c "gem install bundler --no-ri --no-rdoc" 1
cd /tmp && git clone https://github.com/google/protobuf.git && cd protobuf && git reset --hard c2b3b3e04e7a023efe06f2107705b45428847800 && ./autogen.sh && ./configure && make -j4 && cd java && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO && cd ../javanano && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO 1
wget http://am1.php.net/get/php-5.5.38.tar.bz2/from/this/mirror 1
mv mirror php-5.5.38.tar.bz2 1
tar -xvf php-5.5.38.tar.bz2 1
cd php-5.5.38 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.5-zts && make && make install && cd .. 1
cd php-5.5.38 && make clean && ./configure --prefix=/usr/local/php-5.5 && make && make install && cd .. 1
wget http://am1.php.net/get/php-5.6.30.tar.bz2/from/this/mirror 1
mv mirror php-5.6.30.tar.bz2 1
tar -xvf php-5.6.30.tar.bz2 1
cd php-5.6.30 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.6-zts && make && make install && cd .. 1
cd php-5.6.30 && make clean && ./configure --prefix=/usr/local/php-5.6 && make && make install && cd .. 1
wget http://am1.php.net/get/php-7.0.18.tar.bz2/from/this/mirror 1
mv mirror php-7.0.18.tar.bz2 1
tar -xvf php-7.0.18.tar.bz2 1
cd php-7.0.18 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.0-zts && make && make install && cd .. 1
cd php-7.0.18 && make clean && ./configure --prefix=/usr/local/php-7.0 && make && make install && cd .. 1
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" 1
php composer-setup.php 1
mv composer.phar /usr/bin/composer 1
php -r "unlink('composer-setup.php');" 1
composer config -g -- disable-tls true 1
composer config -g -- secure-http false 1
cd /tmp && rm -rf protobuf && git clone https://github.com/google/protobuf.git && cd protobuf && git reset --hard 6b27c1f981a9a93918e4039f236ead27165a8e91 && cd php && ln -sfn /usr/local/php-5.5/bin/php /usr/bin/php && ln -sfn /usr/local/php-5.5/bin/php-config /usr/bin/php-config && ln -sfn /usr/local/php-5.5/bin/phpize /usr/bin/phpize && composer install && mv vendor /usr/local/vendor-5.5 && ln -sfn /usr/local/php-5.6/bin/php /usr/bin/php && ln -sfn /usr/local/php-5.6/bin/php-config /usr/bin/php-config && ln -sfn /usr/local/php-5.6/bin/phpize /usr/bin/phpize && composer install && mv vendor /usr/local/vendor-5.6 && ln -sfn /usr/local/php-7.0/bin/php /usr/bin/php && ln -sfn /usr/local/php-7.0/bin/php-config /usr/bin/php-config && ln -sfn /usr/local/php-7.0/bin/phpize /usr/bin/phpize && composer install && mv vendor /usr/local/vendor-7.0 1
apt-get install -y  golang 1
apt-get install -y npm 1
ln -s `which nodejs` /usr/bin/node 1
ln -s /usr/bin/ccache /usr/local/bin/gcc 1
ln -s /usr/bin/ccache /usr/local/bin/g++ 1
ln -s /usr/bin/ccache /usr/local/bin/cc 1
ln -s /usr/bin/ccache /usr/local/bin/c++ 1
ln -s /usr/bin/ccache /usr/local/bin/clang 1
ln -s /usr/bin/ccache /usr/local/bin/clang++ 1
yum install -y https://repo.ius.io/ius-release-el7.rpm https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 1
yum install -y tar git gcc make tcl autoconf automake libtool wget memcached socat which python36u python36u-pip && yum clean all 1
pip3.6 install nose && pip3.6 install 'git+https://github.com/andymccurdy/redis-py.git@3.5.3' && pip3.6 install 'git+https://github.com/linsomniac/python-memcached.git@1.58' 1
wget https://github.com/redis/redis/archive/3.2.11.tar.gz && tar zxvf 3.2.11.tar.gz && pushd redis-3.2.11 && make install && popd && rm -r redis-* 1
/usr/local/bin/build-nutcracker.sh 1
mkdir tests/_binaries -p 1
ln -nsf $PWD/src/nutcracker tests/_binaries/nutcracker && cp `which redis-server` tests/_binaries/redis-server && cp `which redis-server` tests/_binaries/redis-sentinel && cp `which memcached` tests/_binaries/memcached && cp `which redis-cli` tests/_binaries/redis-cli 1
chmod -R a+w log/ 1
cat /etc/passwd 1
chown -R daemon:daemon /usr/src/twemproxy 1
autoreconf -h && autoreconf -fvi && ./configure && make && make install 1
git clone --depth 1 https://github.com/vuejs/core.git /vue-next 1
pnpm add typescript@./typescript.tgz --save-exact --save-dev --ignore-scripts -W 1
pnpm i 1
apt-get install libsecret-1-dev libx11-dev libxkbfile-dev -y 1
git clone --depth 1 https://github.com/microsoft/vscode.git /vscode 1
yarn add rimraf 1
npm install -g @microsoft/rush 1
git clone --depth 1 https://github.com/Azure/azure-sdk-for-js.git /azure-sdk 1
rush update 1
rush add -p "typescript@3.5.1" --dev -m 1
rm -rf typescript 1
ln -s /typescript/package ./typescript 1
git clone --depth 1 https://github.com/prettier/prettier.git /prettier 1
git clone --depth 1 https://github.com/microsoft/pyright.git /pyright 1
npm i 1
npm install /typescript.tgz --exact --ignore-scripts --save-dev 1
npx lerna exec --stream --concurrency 1 -- npm install /typescript.tgz --exact --ignore-scripts --save-dev 1
git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git /depot_tools 1
mkdir devtools 1
fetch devtools-frontend 1
gn gen out/Default 1
ln -s /typescript/package ./node_modules/typescript 1
-u node npm install -g gulp-cli 1
apt-get update && apt-get -y install build-essential libc6-dbg 1
tar -C /opt -xf /opt/valgrind-3.17.0.tar.bz2 1
cd /opt/valgrind-3.17.0 && ./configure --prefix=/usr && make -j8 && make install 1
DEBIAN_FRONTEND="noninteractive" apt-get -y install gdb 1
apt-get -y update && apt-get -y install ca-certificates alien 1
apt-get -y update && apt-get -y install ca-certificates 1
chmod +x /opt/typesense-server 1
apk add --update nodejs npm --repository=http://dl-cdn.alpinelinux.org/alpine/latest-stable/main/ 1
npm install --production 1
apt update && apt --yes --no-install-recommends install python3 python3-pip python3-cryptography python3-six python3-yaml python3-click python3-markdown python3-requests python3-requests-oauthlib sqlite3 iputils-ping util-linux dumb-init && pip3 --no-cache-dir install apprise==0.9.8.3 && rm -rf /var/lib/apt/lists/* && apt --yes autoremove 1
node ./extra/download-cloudflared.js $TARGETPLATFORM && dpkg --add-architecture arm && apt update && apt --yes --no-install-recommends install ./cloudflared.deb && rm -rf /var/lib/apt/lists/* && rm -f cloudflared.deb && apt --yes autoremove 1
apt --yes install curl 1
apt update && apt --yes install git curl 1
curl -sL https://deb.nodesource.com/setup_16.x | bash - 1
apt --yes install nodejs 1
git clone https://github.com/louislam/uptime-kuma.git . 1
node server/server.js 1
apk add --update nodejs npm git 1
/bin/sh install.sh local /opt/uptime-kuma 3000 0.0.0.0 1
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends gcc clang make git && apt-get clean && rm -rf /var/cache/apt/archives/* && rm -rf /var/lib/apt/lists/* 1
if [ -z "${USE_LOCAL}" ] ; then git clone https://github.com/vlang/v/ /opt/vlang && rm -rf /vlang-local ; else mv /vlang-local/* . && rm -rf /vlang-local ; fi 1
make && ln -s /opt/vlang/v /usr/local/bin/v 1
apk update && apk add --no-cache git bash wget curl 1
git clone --progress https://github.com/v2fly/v2ray-core.git . && bash ./release/user-package.sh nosource noconf codename=$(git describe --abbrev=0 --tags) buildname=docker-fly abpathtgz=/tmp/v2ray.tgz 1
apk update && apk add ca-certificates && mkdir -p /usr/bin/v2ray && tar xvfz /tmp/v2ray.tgz -C /usr/bin/v2ray 1
apk add --update curl clang make openjdk8 npm python3 1
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && PATH="${HOME}/.cargo/bin:${PATH}" rustup target add wasm32-unknown-unknown 1
PATH="${HOME}/.cargo/bin:${PATH}" make all && rm -rf closure-compiler gen lib src tools .cargo cargo.toml Makefile 1
apk add --no-cache libcap su-exec dumb-init tzdata 1
set -eux; microdnf install -y ca-certificates gnupg openssl libcap tzdata procps shadow-utils util-linux 1
groupadd --gid 1000 vault && adduser --uid 100 --system -g vault vault && usermod -a -G root vault 1
mkdir -p /vault/logs && mkdir -p /vault/file && mkdir -p /vault/config && mkdir -p $HOME && chown -R vault /vault && chown -R vault $HOME && chgrp -R 0 $HOME && chmod -R g+rwX $HOME && chgrp -R 0 /vault && chmod -R g+rwX /vault 1
apt-get update -y && apt-get install --no-install-recommends -y -q curl zip build-essential gcc-multilib g++-multilib ca-certificates git mercurial bzr gnupg libltdl-dev libltdl7 1
curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - 1
apt-get update -y && apt-get install -y -q nodejs yarn 1
mkdir /goroot && mkdir /gopath 1
curl https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz | tar xvzf - -C /goroot --strip-components=1 1
go get golang.org/x/tools/cmd/goimports 1
go get github.com/mitchellh/gox 1
mkdir -p /gopath/src/github.com/hashicorp/vault 1
apt-get update && apt-get install -y --no-install-recommends build-essential cmake g++ libclang1-9 libsasl2-dev libssl-dev llvm-9 pkg-config zlib1g-dev && rm -rf /var/lib/apt/lists/* 1
rustup run "${RUST_VERSION}" cargo install cargo-nextest --version 0.9.18 1
mkdir -p /lib/native-libs && cp /usr/local/arm-linux-musleabihf/lib/libstdc++.a /lib/native-libs/ 1
mkdir -p /lib/native-libs && cp /usr/local/x86_64-linux-musl/lib/libstdc++.a /lib/native-libs/ 1
mkdir -p /lib/native-libs && cp /usr/local/aarch64-linux-musl/lib/libstdc++.a /lib/native-libs/ 1
yum -y -q install libXpm net-tools bzip2 wget vim gcc gcc-c++ samba dos2unix glibc-devel glibc.i686 glibc-devel.i686 mpfr.i686 mpfr-devel.i686 rsync autogen autoconf automake libtool gettext* bison binutils flex device-mapper-devel SDL libpciaccess libusb freetype freetype-devel gnu-free-* qemu-* virt-* libvirt* vte* NetworkManager-bluetooth brlapi fuse-devel dejavu* gnu-efi* pesign shim iscsi-initiator-utils grub2-tools zip nasm acpica-tools glibc-static zlib-static xorriso lz4 squashfs-tools 1
apk --no-cache add openssl ca-certificates wget && apk --no-cache add g++ gcc libgcc libstdc++ linux-headers make python2 && wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-2.25-r0.apk && apk add glibc-2.25-r0.apk 1
npm -g i pnpm@6.32.15 && pnpm config set registry $VERDACCIO_BUILD_REGISTRY && pnpm recursive install --frozen-lockfile --ignore-scripts && rm -Rf test && pnpm run build && pnpm install -P 1
apk --no-cache add openssl dumb-init 1
mkdir -p /verdaccio/storage /verdaccio/plugins /verdaccio/conf 1
ls packages/config/src/conf 1
adduser -u $VERDACCIO_USER_UID -S -D -h /opt/verdaccio -g "$VERDACCIO_USER_NAME user" -s /sbin/nologin $VERDACCIO_USER_NAME && chmod -R +x /opt/verdaccio/packages/verdaccio/bin /opt/verdaccio/docker-bin && chown -R $VERDACCIO_USER_UID:root /verdaccio/storage && chmod -R g=u /verdaccio/storage /etc/passwd 1
pip install awscli 1
chmod +x /entry.sh 1
apt-get update && apt-get install -y xorg xvfb libxss-dev libgtk-3-0 gconf2 libnss3 libasound2 libsecret-1-0 1
apt-get update -y --allow-insecure-repositories && apt-get install -y build-essential curl git libncurses5-dev python3-pip && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 1
pip3 install vim-vint 1
useradd -ms /bin/bash -d /vim-go vim-go 1
scripts/install-vim vim-8.0 1
scripts/install-vim vim-8.2 1
scripts/install-vim nvim 1
scripts/install-tools vim-8.0 1
scripts/install-tools vim-8.2 1
scripts/install-tools nvim 1
apt-get -qq update && apt-get -qq -y install curl bzip2 libsox-fmt-all && curl -sSL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/miniconda.sh && bash /tmp/miniconda.sh -bfp /usr/local && rm -rf /tmp/miniconda.sh && conda install -y python=3 && conda update conda && apt-get -qq -y remove curl bzip2 && apt-get -qq -y autoremove && apt-get autoclean && rm -rf /var/lib/apt/lists/* /var/log/dpkg.log && conda clean --all --yes 1
conda create -y --name python3.7 python=3.7 1
conda create -y --name python3.8 python=3.8 1
conda create -y --name python3.9 python=3.9 1
conda create -y --name python3.10 python=3.10 1
echo "source /usr/local/etc/profile.d/conda.sh" >> ~/.bashrc 1
set -ex && apt-get update && apt-get install -y --no-install-recommends make gcc perl libc6-dev && cd /usr/src && tar xzvf /OpenSSL_1_0_1c.tar.gz -C /usr/src --strip-components=1 && ./config --prefix=/usr/local --openssldir=/usr/local/openssl shared && make && make install_sw && apt-get purge -y --auto-remove gcc make perl && rm -rf /usr/src/* /var/lib/apt/lists/* 1
set -ex && apt-get update && apt-get install -y --no-install-recommends make gcc perl libc6-dev && cd /usr/src && tar xzvf /OpenSSL_1_1_1m.tar.gz -C /usr/src --strip-components=1 && ./config && make && make install && apt-get purge -y --auto-remove gcc make perl && rm -rf /usr/src/* /var/lib/apt/lists/* 1
set -ex && rm -rf /usr/local/tomcat/webapps/* && sed -i 's/securerandom\.source=file:\/dev\/random/securerandom.source=file:\/dev\/.\/urandom/g' $JAVA_HOME/conf/security/java.security 1
cargo install cross 1
dpkg --add-architecture arm64 && apt-get update && apt-get install -qy curl && curl -sSL https://get.docker.com/ | sh && apt-get install --assume-yes libxkbcommon0:arm64 libwayland-cursor0:arm64 libxkbcommon-dev:arm64 libwayland-dev:arm64 libxkbcommon-x11-dev:arm64 1
apt-get update && apt-get install -y apt-utils clang cmake curl git libc++-dev libc++abi-dev libglib2.0-dev libgmp-dev ninja-build python 1
make v8-checkout 1
make -j v8 1
apt-get update && apt-get install -y --no-install-recommends apt-utils autoconf automake bash build-essential ca-certificates chromium coreutils curl ffmpeg figlet git gnupg2 jq libgconf-2-4 libtool libxtst6 moreutils python-dev shellcheck  tzdata vim wget && apt-get purge --auto-remove && rm -rf /tmp/* /var/lib/apt/lists/* 1
curl -sL https://deb.nodesource.com/setup_16.x | bash - && apt-get update && apt-get install -y --no-install-recommends nodejs && apt-get purge --auto-remove && rm -rf /tmp/* /var/lib/apt/lists/* 1
npm install && rm -fr /tmp/* ~/.npm 1
./scripts/generate-package-json.sh && rm -f src/package-json.spec.ts 1
npm test && npm run dist && npm link 1
npm run puppet-install &&  rm -fr /tmp/* ~/.npm 1
echo '{"type": "module"}' > /package.json 1
mkdir /node_modules && ln -sfv /usr/lib/node_modules/*  /node_modules/ && ln -sfv /wechaty/node_modules/*  /node_modules/ && /wechaty/bin/clean-json.js /wechaty/tsconfig.json | jq 'del(."ts-node")' > /tsconfig.json && echo 'Linked Wechaty & tsconfig.json to Global' 1
set -o xtrace && useradd --user-group --system --home-dir /home/wekan wekan &&  apt-get update -y && apt-get install -y --no-install-recommends apt-utils &&  cp $(which tar) $(which tar)~ && ln -sf $(which bsdtar) $(which tar) &&  wget https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-${ARCHITECTURE}.tar.gz && wget https://nodejs.org/dist/${NODE_VERSION}/SHASUMS256.txt.asc &&  grep ${NODE_VERSION}-${ARCHITECTURE}.tar.gz SHASUMS256.txt.asc | shasum -a 256 -c - && rm -f SHASUMS256.txt.asc &&  tar xvzf node-${NODE_VERSION}-${ARCHITECTURE}.tar.gz && rm node-${NODE_VERSION}-${ARCHITECTURE}.tar.gz && mv node-${NODE_VERSION}-${ARCHITECTURE} /opt/nodejs && ln -s /opt/nodejs/bin/node /usr/bin/node && ln -s /opt/nodejs/bin/npm /usr/bin/npm && mkdir -p /opt/nodejs/lib/node_modules/fibers/.node-gyp /root/.node-gyp/${NODE_VERSION} /home/wekan/.config && chown wekan --recursive /home/wekan/.config &&   npm install -g npm@${NPM_VERSION} &&  cd /home/wekan/ && chown wekan --recursive /home/wekan && echo "Starting meteor ${METEOR_RELEASE} installation...   \n" && gosu wekan:wekan curl https://install.meteor.com/ | /bin/sh && mv /root/.meteor /home/wekan/ && chown wekan --recursive /home/wekan/.meteor &&  sed -i 's/api\.versionsFrom/\/\/api.versionsFrom/' /home/wekan/app/packages/meteor-useraccounts-core/package.js && cd /home/wekan/.meteor && gosu wekan:wekan /home/wekan/.meteor/meteor -- help;  cd /home/wekan/app && mkdir -p /home/wekan/.npm && chown wekan --recursive /home/wekan/.npm /home/wekan/.config /home/wekan/.meteor && chmod u+w *.json && gosu wekan:wekan npm install && gosu wekan:wekan /home/wekan/.meteor/meteor build --directory /home/wekan/app_build && cd /home/wekan/app_build/bundle/programs/server/ && chmod u+w *.json && gosu wekan:wekan npm install && cd node_modules/fibers && node build.js && cd ../.. && rm -rf /home/wekan/app_build/bundle/programs/web.browser.legacy && mv /home/wekan/app_build/bundle /build &&  mv $(which tar)~ $(which tar) &&  apt-get remove --purge -y apt-utils && apt-get autoremove -y && npm uninstall -g api2html & rm -R /tmp/* && rm -R /var/lib/apt/lists/* && rm -R /home/wekan/.meteor && rm -R /home/wekan/app && rm -R /home/wekan/app_build && mkdir /data && chown wekan --recursive /data 1
yarn --production --frozen-lockfile --non-interactive --network-timeout 100000 1
yarn cache clean 1
yarn --frozen-lockfile --non-interactive 1
rm -rf /wiki/node_modules 1
yarn --production --frozen-lockfile --non-interactive 1
chgrp -R 0 /wiki /logs && chmod -R g=u /wiki /logs 1
apt-get update && apt-get install -y bash curl git python make g++ nano openssh-server gnupg && mkdir -p /wiki 1
apt-get update && apt-get install -y autoconf build-essential git libtool && rm -rf /var/lib/apt/lists/* && mkdir /libyaml 1
apt-get update && apt-get install -y software-properties-common python-software-properties && add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y autoconf build-essential git libtool && rm -rf /var/lib/apt/lists/* && mkdir /libyaml 1
mkdir -p /root/.ssh/ 1
apt-get update && apt-get install -y git curl build-essential && apt-get -y autoclean 1
curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh | bash 1
source $NVM_DIR/nvm.sh && nvm install 16.11.1 && nvm alias default 16.11.1 && nvm use default && npm install -g yarn 1
node -v 1
npm -v 1
apk add git make ncurses && git clone https://github.com/wtfutil/wtf.git $GOPATH/src/github.com/wtfutil/wtf && cd $GOPATH/src/github.com/wtfutil/wtf && git checkout master 1
adduser -h /config -DG users -u 20000 wtf 1
go get -u github.com/mattn/go-colorable && go get -u github.com/klauspost/lctime && go get -u github.com/mattn/go-runewidth && CGO_ENABLED=0 go build /app/we-lang.go 1
apk add --no-cache --virtual .build autoconf automake g++ gcc jpeg-dev llvm11-de make zlib-dev && apk add --no-cache python3 py3-pip py3-scipy py3-wheel py3-gevent zlib jpeg llvm11 libtool supervisor py3-numpy-dev python3-dev && mkdir -p /app/cache && mkdir -p /var/log/supervisor && mkdir -p /etc/supervisor/conf.d && chmod -R o+rw /var/log/supervisor && chmod -R o+rw /var/run && pip install -r requirements.txt --no-cache-dir && apk del --no-cache -r .build 1
yum -y update && yum install -y bzip2 make tar unzip wget xz git centos-release-scl yum-utils java-1.8.0-openjdk-devel && yum-config-manager --enable centos-sclo-rh-testing && yum -y update && yum install -y devtoolset-7-gcc devtoolset-7-binutils devtoolset-7-gcc-c++ && wget https://repo.continuum.io/miniconda/Miniconda3-4.5.12-Linux-x86_64.sh && bash Miniconda3-4.5.12-Linux-x86_64.sh -b -p /opt/python && wget -nv -nc https://cmake.org/files/v3.18/cmake-3.18.3-Linux-x86_64.sh --no-check-certificate && bash cmake-3.18.3-Linux-x86_64.sh --skip-license --prefix=/usr && wget https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz && tar xvf apache-maven-3.6.1-bin.tar.gz -C /opt && ln -s /opt/apache-maven-3.6.1/ /opt/maven 1
pip install numpy pytest scipy scikit-learn wheel kubernetes urllib3==1.22 awscli 1
set -ex; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" && chmod +x /usr/local/bin/gosu && gosu nobody true 1
apt-get update && apt-get -y install --no-install-recommends apt-utils 2>&1 1
apt-get install -y git procps 1
apt-get install -y curl apt-transport-https lsb-release && curl -sS https://dl.yarnpkg.com/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/pubkey.gpg | apt-key add - 2>/dev/null && echo "deb https://dl.yarnpkg.com/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/ stable main" | tee /etc/apt/sources.list.d/yarn.list && apt-get update && apt-get -y install --no-install-recommends yarn fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst ttf-freefont gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget 1
apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* 1
/usr/local/bin/composer install --prefer-dist 1
apt-get update && apt-get -y dist-upgrade && apt-get -y --no-install-recommends install ca-cacert locales tzdata language-pack-en libncurses5-dev libncursesw5-dev git build-essential cmake curl  python3-dev python3-pip python3-setuptools openjdk-11-jdk-headless npm vim-nox zlib1g-dev && apt-get -y autoremove 1
ln -fs /usr/share/zoneinfo/Europe/London /etc/localtime && dpkg-reconfigure --frontend noninteractive tzdata 1
mkdir -p $HOME/vim && cd $HOME/vim && git clone https://github.com/vim/vim && cd vim && git checkout v8.2.2735 && make -j 4 && make install 1
mkdir -p /home/linuxbrew/.linuxbrew & chmod -R go+rwx /home/linuxbrew && mkdir -p /home/linuxbrew/.linuxbrew/bin && git clone  https://github.com/Homebrew/brew /home/linuxbrew/.linuxbrew/Homebrew && ln -s /home/linuxbrew/.linuxbrew/Homebrew/bin/brew /home/linuxbrew/.linuxbrew/bin && echo "eval \$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" > /etc/bash.bashrc 1
python3 -m pip install --upgrade pip setuptools wheel 1
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* & /home/linuxbrew/.linuxbrew/bin/brew cleanup && rm -rf ~/.cache && rm -rf $HOME/vim 1
apk update && apk add  --no-cache tzdata ca-certificates alpine-sdk libressl-dev libffi-dev cargo && apk add tiff-dev jpeg-dev openjpeg-dev zlib-dev freetype-dev lcms2-dev libwebp-dev tcl-dev tk-dev harfbuzz-dev fribidi-dev libimagequant-dev libxcb-dev libpng-dev 1
pip3 install  --user -r /requirements.txt && rm /requirements.txt 1
apk update && apk add --no-cache libressl jpeg-dev openjpeg-dev libimagequant-dev tiff-dev freetype-dev libxcb-dev 1
yarn --network-timeout 1000000 1
if [ "$env" = "dev" ]; then echo "dev build"; yarn build; sh /tmp/dev_robots.sh; else echo "prod build"; yarn run release; fi 1
apk add mongodb-tools mysql-client 1
apk --update --no-cache --no-progress add python3 python3-dev gcc libffi-dev musl-dev make tor openssl && pip3 install -r /root/requirements.txt && apk del python3-dev gcc libffi-dev musl-dev make && echo "ControlPort 9051" >> /etc/tor/torrc && echo "CookieAuthentication 1" >> /etc/tor/torrc 1
python3 -V && python3 -m pip list && tor --version && openssl version 1
set -x && adduser -S znc && addgroup -S znc && apk add --no-cache --virtual runtime-dependencies boost ca-certificates cyrus-sasl icu openssl su-exec tini tzdata && apk add --no-cache --virtual build-dependencies boost-dev build-base cmake curl cyrus-sasl-dev gettext gnupg icu-dev openssl-dev perl-dev python3-dev && mkdir /znc-src && cd /znc-src && curl -fsSL "https://znc.in/releases/archive/znc-${ZNC_VERSION}.tar.gz" -o znc.tgz && curl -fsSL "https://znc.in/releases/archive/znc-${ZNC_VERSION}.tar.gz.sig" -o znc.tgz.sig && export GNUPGHOME="$(mktemp -d)" && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "${GPG_KEY}" && gpg --batch --verify znc.tgz.sig znc.tgz && rm -rf "$GNUPGHOME" && tar -zxf znc.tgz --strip-components=1 && mkdir build && cd build && cmake .. -DCMAKE_INSTALL_PREFIX && make  && make install && apk del build-dependencies && cd / && rm -rf /znc-src 1
set -eux; ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -q -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; }; ddist "apache-zookeeper-3.7.1-bin.tar.gz" "zookeeper/zookeeper-3.7.1/apache-zookeeper-3.7.1-bin.tar.gz"; ddist "apache-zookeeper-3.7.1-bin.tar.gz.asc" "zookeeper/zookeeper-3.7.1/apache-zookeeper-3.7.1-bin.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --keyserver hkps://keyserver.pgp.com --recv-key "DFF24FB8323ADAC90E3CF36F729E61230EA917E9" || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "DFF24FB8323ADAC90E3CF36F729E61230EA917E9" || gpg --keyserver hkps://pgp.mit.edu --recv-keys "DFF24FB8323ADAC90E3CF36F729E61230EA917E9"; gpg --batch --verify "apache-zookeeper-3.7.1-bin.tar.gz.asc" "apache-zookeeper-3.7.1-bin.tar.gz"; tar -zxf "apache-zookeeper-3.7.1-bin.tar.gz"; mv "apache-zookeeper-3.7.1-bin/conf/"* "/conf"; rm -rf "$GNUPGHOME" "apache-zookeeper-3.7.1-bin.tar.gz" "apache-zookeeper-3.7.1-bin.tar.gz.asc"; chown -R zookeeper:zookeeper "/apache-zookeeper-3.7.1-bin" 1
set -eux; ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -q -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; }; ddist "apache-zookeeper-3.8.0-bin.tar.gz" "zookeeper/zookeeper-3.8.0/apache-zookeeper-3.8.0-bin.tar.gz"; ddist "apache-zookeeper-3.8.0-bin.tar.gz.asc" "zookeeper/zookeeper-3.8.0/apache-zookeeper-3.8.0-bin.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --keyserver hkps://keyserver.pgp.com --recv-key "BBE7232D7991050B54C8EA0ADC08637CA615D22C" || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "BBE7232D7991050B54C8EA0ADC08637CA615D22C" || gpg --keyserver hkps://pgp.mit.edu --recv-keys "BBE7232D7991050B54C8EA0ADC08637CA615D22C"; gpg --batch --verify "apache-zookeeper-3.8.0-bin.tar.gz.asc" "apache-zookeeper-3.8.0-bin.tar.gz"; tar -zxf "apache-zookeeper-3.8.0-bin.tar.gz"; mv "apache-zookeeper-3.8.0-bin/conf/"* "/conf"; rm -rf "$GNUPGHOME" "apache-zookeeper-3.8.0-bin.tar.gz" "apache-zookeeper-3.8.0-bin.tar.gz.asc"; chown -R zookeeper:zookeeper "/apache-zookeeper-3.8.0-bin" 1
set -eux; ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -q -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; }; ddist "apache-zookeeper-3.6.3-bin.tar.gz" "zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz"; ddist "apache-zookeeper-3.6.3-bin.tar.gz.asc" "zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --keyserver hkps://keyserver.pgp.com --recv-key "DFF24FB8323ADAC90E3CF36F729E61230EA917E9" || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "DFF24FB8323ADAC90E3CF36F729E61230EA917E9" || gpg --keyserver hkps://pgp.mit.edu --recv-keys "DFF24FB8323ADAC90E3CF36F729E61230EA917E9"; gpg --batch --verify "apache-zookeeper-3.6.3-bin.tar.gz.asc" "apache-zookeeper-3.6.3-bin.tar.gz"; tar -zxf "apache-zookeeper-3.6.3-bin.tar.gz"; mv "apache-zookeeper-3.6.3-bin/conf/"* "/conf"; rm -rf "$GNUPGHOME" "apache-zookeeper-3.6.3-bin.tar.gz" "apache-zookeeper-3.6.3-bin.tar.gz.asc"; chown -R zookeeper:zookeeper "/apache-zookeeper-3.6.3-bin" 1
set -eux; apt-get -qq update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates dirmngr gosu gnupg netcat wget; rm -rf /var/lib/apt/lists/*; gosu nobody true 1
set -eux; ddist() { local f="$1"; shift; local distFile="$1"; shift; local success=; local distUrl=; for distUrl in 'https://www.apache.org/dyn/closer.cgi?action=download&filename=' https://www-us.apache.org/dist/ https://www.apache.org/dist/ https://archive.apache.org/dist/ ; do if wget -q -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then success=1; break; fi; done; [ -n "$success" ]; }; ddist "apache-zookeeper-3.5.9-bin.tar.gz" "zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz"; ddist "apache-zookeeper-3.5.9-bin.tar.gz.asc" "zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --keyserver hkps://keyserver.pgp.com --recv-key "3D296268A36FACA1B7EAF110792D43153B5B5147" || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "3D296268A36FACA1B7EAF110792D43153B5B5147" || gpg --keyserver hkps://pgp.mit.edu --recv-keys "3D296268A36FACA1B7EAF110792D43153B5B5147"; gpg --batch --verify "apache-zookeeper-3.5.9-bin.tar.gz.asc" "apache-zookeeper-3.5.9-bin.tar.gz"; tar -zxf "apache-zookeeper-3.5.9-bin.tar.gz"; mv "apache-zookeeper-3.5.9-bin/conf/"* "/conf"; rm -rf "$GNUPGHOME" "apache-zookeeper-3.5.9-bin.tar.gz" "apache-zookeeper-3.5.9-bin.tar.gz.asc"; chown -R zookeeper:zookeeper "/apache-zookeeper-3.5.9-bin" 1
echo locales locales/default_environment_locale select C.UTF-8 | debconf-set-selections && echo locales locales/locales_to_be_generated select "C.UTF-8 UTF-8" | debconf-set-selections && { [ ! "$UBUNTU_MIRROR" ] || sed -i "s|http://\(\w*\.\)*archive\.ubuntu\.com/ubuntu/\? |$UBUNTU_MIRROR |" /etc/apt/sources.list; } && printf 'y\n\n' | unminimize && apt-get install --no-install-recommends -y ca-certificates curl locales openssh-server python3  systemd && rm -rf /var/lib/apt/lists/* 1
dpkg-divert --add --rename /bin/systemctl && curl -fLsS -o /bin/systemctl 'https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/v1.5.4505/files/docker/systemctl3.py' && echo '93006382a98aadfd2490e521824fc870759732ff80cd012ce0dfc70d4225c803  /bin/systemctl' | sha256sum -c && chmod +x /bin/systemctl && ln -nsf /bin/true /usr/sbin/policy-rc.d && mkdir -p /run/sshd && ln -ns /lib/systemd/system/postgresql@.service /etc/systemd/system/multi-user.target.wants/postgresql@12-main.service && useradd -ms /bin/bash -u "$VAGRANT_UID" vagrant && mkdir -m 700 ~vagrant/.ssh && curl -fLsS -o ~vagrant/.ssh/authorized_keys 'https://raw.githubusercontent.com/hashicorp/vagrant/be7876d83644aa6bdf7f951592fdc681506bcbe6/keys/vagrant.pub' && chown -R vagrant: ~vagrant/.ssh && echo 'vagrant ALL=(ALL) NOPASSWD:ALL' > /etc/ers.d/vagrant 1
ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime 1
apt-get update && apt-get -y install --no-install-recommends build-essential ca-certificates curl gettext git hunspell-en-us jq libffi-dev libfreetype6-dev libjpeg-dev libldap2-dev libpq-dev libssl-dev libxml2-dev libxslt1-dev locales memcached moreutils puppet python3-dev python3-pip rabbitmq-server redis-server  supervisor unzip xvfb zlib1g-dev 1
groupadd --gid 1001 github && useradd --uid 1001 --gid github --shell /bin/bash --create-home github && echo "github ALL = (ALL) NOPASSWD: ALL" >> /etc/ers.d/50-github && echo 'Defaults    env_keep += "DEBIAN_FRONTEND"' >> /etc/ers.d/env_keep 1
